
Test_RTOS_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800c308  0800c308  0001c308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cacc  0800cacc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cacc  0800cacc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cacc  0800cacc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cacc  0800cacc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cad0  0800cad0  0001cad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fd4  200001e4  0800ccb8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031b8  0800ccb8  000231b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187a5  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b7  00000000  00000000  000389b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a12  00000000  00000000  0003eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168f3  00000000  00000000  0004352a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096dfe  00000000  00000000  00059e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee4  00000000  00000000  000f0c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2f0 	.word	0x0800c2f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c2f0 	.word	0x0800c2f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_RxCpltCallback+0x48>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d114      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x3e>
	{
		static BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_UART_RxCpltCallback+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		xQueueSendFromISR(myQueueDataHandle,&buffer,NULL);
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_UART_RxCpltCallback+0x50>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	490c      	ldr	r1, [pc, #48]	; (8000c2c <HAL_UART_RxCpltCallback+0x54>)
 8000bfc:	f004 fac2 	bl	8005184 <xQueueGenericSendFromISR>
		xSemaphoreGiveFromISR(myCountingSem01Handle,&xHigherPriorityTaskWoken);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_UART_RxCpltCallback+0x58>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <HAL_UART_RxCpltCallback+0x4c>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fb54 	bl	80052b4 <xQueueGiveFromISR>
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4907      	ldr	r1, [pc, #28]	; (8000c2c <HAL_UART_RxCpltCallback+0x54>)
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <HAL_UART_RxCpltCallback+0x48>)
 8000c12:	f002 fac0 	bl	8003196 <HAL_UART_Receive_IT>
	}
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000248 	.word	0x20000248
 8000c24:	20000344 	.word	0x20000344
 8000c28:	20000290 	.word	0x20000290
 8000c2c:	200002a4 	.word	0x200002a4
 8000c30:	20000298 	.word	0x20000298

08000c34 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B_Temp_Pin)
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d113      	bne.n	8000c6c <HAL_GPIO_EXTI_Callback+0x38>
	{
		 static uint32_t last_interrupt_time = 0;
		 uint32_t current_time = HAL_GetTick();
 8000c44:	f000 fe12 	bl	800186c <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
		 if ((current_time - last_interrupt_time) > 200)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2bc8      	cmp	r3, #200	; 0xc8
 8000c54:	d906      	bls.n	8000c64 <HAL_GPIO_EXTI_Callback+0x30>
		 {
//			 a = 1;
			 Send_Error_Status();
 8000c56:	f003 fa9f 	bl	8004198 <Send_Error_Status>
			 HAL_GPIO_WritePin(GPIOB, Led_Temp_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c60:	f001 f946 	bl	8001ef0 <HAL_GPIO_WritePin>
//			 HAL_GPIO_TogglePin(GPIOB, Led_Temp_Pin);
		 }
		 last_interrupt_time = current_time;
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, Led_Water_Pin, GPIO_PIN_SET);
//			HAL_GPIO_TogglePin(GPIOB, Led_Water_Pin);
		}
		last_interrupt_time = current_time;
	}
}
 8000c6a:	e015      	b.n	8000c98 <HAL_GPIO_EXTI_Callback+0x64>
	else if (GPIO_Pin == B_Water_Pin)
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d112      	bne.n	8000c98 <HAL_GPIO_EXTI_Callback+0x64>
		uint32_t current_time = HAL_GetTick();
 8000c72:	f000 fdfb 	bl	800186c <HAL_GetTick>
 8000c76:	60f8      	str	r0, [r7, #12]
		if ((current_time - last_interrupt_time) > 200)
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2bc8      	cmp	r3, #200	; 0xc8
 8000c82:	d906      	bls.n	8000c92 <HAL_GPIO_EXTI_Callback+0x5e>
			Send_Error_Status();
 8000c84:	f003 fa88 	bl	8004198 <Send_Error_Status>
			HAL_GPIO_WritePin(GPIOB, Led_Water_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c8e:	f001 f92f 	bl	8001ef0 <HAL_GPIO_WritePin>
		last_interrupt_time = current_time;
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000348 	.word	0x20000348
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	2000034c 	.word	0x2000034c

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 fdb3 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f879 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f92b 	bl	8000f14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cbe:	f000 f8ff 	bl	8000ec0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cc2:	f000 f8af 	bl	8000e24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 8000cc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cca:	930a      	str	r3, [sp, #40]	; 0x28
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <main+0xc4>)
 8000cce:	9309      	str	r3, [sp, #36]	; 0x24
 8000cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd4:	9308      	str	r3, [sp, #32]
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <main+0xc4>)
 8000cd8:	9307      	str	r3, [sp, #28]
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	9306      	str	r3, [sp, #24]
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <main+0xc8>)
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <main+0xc8>)
 8000cec:	9303      	str	r3, [sp, #12]
 8000cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <main+0xc8>)
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <main+0xc8>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	2110      	movs	r1, #16
 8000d04:	481c      	ldr	r0, [pc, #112]	; (8000d78 <main+0xcc>)
 8000d06:	f003 f82a 	bl	8003d5e <CLCD_4BIT_Init>
    									D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
    									D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	491b      	ldr	r1, [pc, #108]	; (8000d7c <main+0xd0>)
 8000d0e:	481c      	ldr	r0, [pc, #112]	; (8000d80 <main+0xd4>)
 8000d10:	f002 fa41 	bl	8003196 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <main+0xd8>)
 8000d16:	f001 fdb5 	bl	8002884 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <main+0xc4>)
 8000d22:	f001 f8e5 	bl	8001ef0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d26:	f003 fc43 	bl	80045b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <main+0xdc>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f003 fd7c 	bl	800482c <osSemaphoreNew>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <main+0xe0>)
 8000d38:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(5, 5, &myCountingSem01_attributes);
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <main+0xe4>)
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f003 fd74 	bl	800482c <osSemaphoreNew>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <main+0xe8>)
 8000d48:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueData */
  myQueueDataHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQueueData_attributes);
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <main+0xec>)
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	2010      	movs	r0, #16
 8000d50:	f003 fe08 	bl	8004964 <osMessageQueueNew>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <main+0xf0>)
 8000d58:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d5a:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <main+0xf4>)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <main+0xf8>)
 8000d60:	f003 fc8c 	bl	800467c <osThreadNew>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <main+0xfc>)
 8000d68:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d6a:	f003 fc53 	bl	8004614 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <main+0xc2>
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40010800 	.word	0x40010800
 8000d78:	200002ec 	.word	0x200002ec
 8000d7c:	200002a4 	.word	0x200002a4
 8000d80:	20000248 	.word	0x20000248
 8000d84:	20000200 	.word	0x20000200
 8000d88:	0800c3ec 	.word	0x0800c3ec
 8000d8c:	20000294 	.word	0x20000294
 8000d90:	0800c3fc 	.word	0x0800c3fc
 8000d94:	20000298 	.word	0x20000298
 8000d98:	0800c3d4 	.word	0x0800c3d4
 8000d9c:	20000290 	.word	0x20000290
 8000da0:	0800c3b0 	.word	0x0800c3b0
 8000da4:	0800124d 	.word	0x0800124d
 8000da8:	2000028c 	.word	0x2000028c

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 feff 	bl	8007bbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 f8b4 	bl	8001f50 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dee:	f000 fab5 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fb22 	bl	8002454 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e16:	f000 faa1 	bl	800135c <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3740      	adds	r7, #64	; 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e4a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e6c:	f001 fcba 	bl	80027e4 <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e76:	f000 fa71 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000e88:	f001 fe56 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e92:	f000 fa63 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_TIM2_Init+0x98>)
 8000ea4:	f002 f828 	bl	8002ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eae:	f000 fa55 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000200 	.word	0x20000200

08000ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART2_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ede:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ee8:	220c      	movs	r2, #12
 8000eea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_USART2_UART_Init+0x4c>)
 8000efa:	f002 f86d 	bl	8002fd8 <HAL_UART_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000f04:	f000 fa2a 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000248 	.word	0x20000248
 8000f10:	40004400 	.word	0x40004400

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a29      	ldr	r2, [pc, #164]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_GPIO_Init+0xd8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|D7_Pin|D6_Pin|Led_Water_Pin
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f24e 0160 	movw	r1, #57440	; 0xe060
 8000f5e:	4824      	ldr	r0, [pc, #144]	; (8000ff0 <MX_GPIO_Init+0xdc>)
 8000f60:	f000 ffc6 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |Led_Temp_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D5_Pin|D4_Pin|EN_Pin|RW_Pin
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <MX_GPIO_Init+0xe0>)
 8000f6c:	f000 ffc0 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Temp_Pin B_Water_Pin */
  GPIO_InitStruct.Pin = B_Temp_Pin|B_Water_Pin;
 8000f70:	2303      	movs	r3, #3
 8000f72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_GPIO_Init+0xe4>)
 8000f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4619      	mov	r1, r3
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <MX_GPIO_Init+0xe0>)
 8000f84:	f000 fe30 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 D7_Pin D6_Pin Led_Water_Pin
                           Led_Temp_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|D7_Pin|D6_Pin|Led_Water_Pin
 8000f88:	f24e 0360 	movw	r3, #57440	; 0xe060
 8000f8c:	60bb      	str	r3, [r7, #8]
                          |Led_Temp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2302      	movs	r3, #2
 8000f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <MX_GPIO_Init+0xdc>)
 8000fa2:	f000 fe21 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin EN_Pin RW_Pin
                           RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin|EN_Pin|RW_Pin
 8000fa6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000faa:	60bb      	str	r3, [r7, #8]
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_GPIO_Init+0xe0>)
 8000fc0:	f000 fe12 	bl	8001be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2107      	movs	r1, #7
 8000fc8:	2006      	movs	r0, #6
 8000fca:	f000 fd32 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fce:	2006      	movs	r0, #6
 8000fd0:	f000 fd4b 	bl	8001a6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	2007      	movs	r0, #7
 8000fda:	f000 fd2a 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f000 fd43 	bl	8001a6a <HAL_NVIC_EnableIRQ>

}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	10210000 	.word	0x10210000

08000ffc <Process_Modbus>:

/* USER CODE BEGIN 4 */
void Process_Modbus(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	switch(i)
 8001000:	4b81      	ldr	r3, [pc, #516]	; (8001208 <Process_Modbus+0x20c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b06      	cmp	r3, #6
 8001006:	f200 80fc 	bhi.w	8001202 <Process_Modbus+0x206>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <Process_Modbus+0x14>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	0800102d 	.word	0x0800102d
 8001014:	0800108f 	.word	0x0800108f
 8001018:	08001155 	.word	0x08001155
 800101c:	0800117b 	.word	0x0800117b
 8001020:	08001199 	.word	0x08001199
 8001024:	080011b7 	.word	0x080011b7
 8001028:	080011d5 	.word	0x080011d5
	{
	case 0:
		Error_Stat = Receive_Error_Status(Data_16[0]);
 800102c:	4b77      	ldr	r3, [pc, #476]	; (800120c <Process_Modbus+0x210>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f8dd 	bl	80041f0 <Receive_Error_Status>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b75      	ldr	r3, [pc, #468]	; (8001210 <Process_Modbus+0x214>)
 800103c:	801a      	strh	r2, [r3, #0]
		if (Error_Stat == Have_Errors)
 800103e:	4b74      	ldr	r3, [pc, #464]	; (8001210 <Process_Modbus+0x214>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001046:	d117      	bne.n	8001078 <Process_Modbus+0x7c>
		{
			memset(rx_data, 0, sizeof(rx_data));
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4871      	ldr	r0, [pc, #452]	; (8001214 <Process_Modbus+0x218>)
 800104e:	f006 fdb6 	bl	8007bbe <memset>
			CLCD_SetCursor(&LCD1, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	4870      	ldr	r0, [pc, #448]	; (8001218 <Process_Modbus+0x21c>)
 8001058:	f002 ff14 	bl	8003e84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Have Errors");
 800105c:	496f      	ldr	r1, [pc, #444]	; (800121c <Process_Modbus+0x220>)
 800105e:	486e      	ldr	r0, [pc, #440]	; (8001218 <Process_Modbus+0x21c>)
 8001060:	f002 ff77 	bl	8003f52 <CLCD_WriteString>
			osDelay(2000);
 8001064:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001068:	f003 fbb2 	bl	80047d0 <osDelay>
			Send_Error_Code();
 800106c:	f003 f8d2 	bl	8004214 <Send_Error_Code>
			i = 1;
 8001070:	4b65      	ldr	r3, [pc, #404]	; (8001208 <Process_Modbus+0x20c>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
//			osDelay(1000);
			memset(rx_data, 0, sizeof(rx_data));
			Read_Temp();
			i = 2;
		}
		break;
 8001076:	e0c4      	b.n	8001202 <Process_Modbus+0x206>
			memset(rx_data, 0, sizeof(rx_data));
 8001078:	2220      	movs	r2, #32
 800107a:	2100      	movs	r1, #0
 800107c:	4865      	ldr	r0, [pc, #404]	; (8001214 <Process_Modbus+0x218>)
 800107e:	f006 fd9e 	bl	8007bbe <memset>
			Read_Temp();
 8001082:	f003 fa3d 	bl	8004500 <Read_Temp>
			i = 2;
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <Process_Modbus+0x20c>)
 8001088:	2202      	movs	r2, #2
 800108a:	601a      	str	r2, [r3, #0]
		break;
 800108c:	e0b9      	b.n	8001202 <Process_Modbus+0x206>

	// Check Error code
	case 1:
		Error_Cod = Receive_Error_Code(Data_16[0]);
 800108e:	4b5f      	ldr	r3, [pc, #380]	; (800120c <Process_Modbus+0x210>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f003 f8ea 	bl	800426c <Receive_Error_Code>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b60      	ldr	r3, [pc, #384]	; (8001220 <Process_Modbus+0x224>)
 800109e:	801a      	strh	r2, [r3, #0]
		// Display error
		if (Error_Cod == Temp_Measur_Err)
 80010a0:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <Process_Modbus+0x224>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d117      	bne.n	80010dc <Process_Modbus+0xe0>
		{
			CLCD_SetCursor(&LCD1, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	4859      	ldr	r0, [pc, #356]	; (8001218 <Process_Modbus+0x21c>)
 80010b2:	f002 fee7 	bl	8003e84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Temp Measure Err");
 80010b6:	495b      	ldr	r1, [pc, #364]	; (8001224 <Process_Modbus+0x228>)
 80010b8:	4857      	ldr	r0, [pc, #348]	; (8001218 <Process_Modbus+0x21c>)
 80010ba:	f002 ff4a 	bl	8003f52 <CLCD_WriteString>
			osDelay(2000);
 80010be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010c2:	f003 fb85 	bl	80047d0 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 80010c6:	2220      	movs	r2, #32
 80010c8:	2100      	movs	r1, #0
 80010ca:	4852      	ldr	r0, [pc, #328]	; (8001214 <Process_Modbus+0x218>)
 80010cc:	f006 fd77 	bl	8007bbe <memset>
			Send_Error_Temp();
 80010d0:	f003 f8fc 	bl	80042cc <Send_Error_Temp>
			i = 3;
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <Process_Modbus+0x20c>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	601a      	str	r2, [r3, #0]
			osDelay(2000);
			memset(rx_data, 0, sizeof(rx_data));
			Send_Error_Device();
			i = 5;
		}
		break;
 80010da:	e091      	b.n	8001200 <Process_Modbus+0x204>
		else if (Error_Cod == Hum_Measur_Err)
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <Process_Modbus+0x224>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	f640 32ba 	movw	r2, #3002	; 0xbba
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d117      	bne.n	8001118 <Process_Modbus+0x11c>
			CLCD_SetCursor(&LCD1, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	484a      	ldr	r0, [pc, #296]	; (8001218 <Process_Modbus+0x21c>)
 80010ee:	f002 fec9 	bl	8003e84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Humi Measure Err");
 80010f2:	494d      	ldr	r1, [pc, #308]	; (8001228 <Process_Modbus+0x22c>)
 80010f4:	4848      	ldr	r0, [pc, #288]	; (8001218 <Process_Modbus+0x21c>)
 80010f6:	f002 ff2c 	bl	8003f52 <CLCD_WriteString>
			osDelay(2000);
 80010fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010fe:	f003 fb67 	bl	80047d0 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 8001102:	2220      	movs	r2, #32
 8001104:	2100      	movs	r1, #0
 8001106:	4843      	ldr	r0, [pc, #268]	; (8001214 <Process_Modbus+0x218>)
 8001108:	f006 fd59 	bl	8007bbe <memset>
			Send_Error_RH();
 800110c:	f003 f940 	bl	8004390 <Send_Error_RH>
			i = 4;
 8001110:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <Process_Modbus+0x20c>)
 8001112:	2204      	movs	r2, #4
 8001114:	601a      	str	r2, [r3, #0]
		break;
 8001116:	e073      	b.n	8001200 <Process_Modbus+0x204>
		else if (Error_Cod == Humi_Sen_Fail)
 8001118:	4b41      	ldr	r3, [pc, #260]	; (8001220 <Process_Modbus+0x224>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	f640 32bb 	movw	r2, #3003	; 0xbbb
 8001120:	4293      	cmp	r3, r2
 8001122:	d16d      	bne.n	8001200 <Process_Modbus+0x204>
			CLCD_SetCursor(&LCD1, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	483b      	ldr	r0, [pc, #236]	; (8001218 <Process_Modbus+0x21c>)
 800112a:	f002 feab 	bl	8003e84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Humi Sensor Fail ");
 800112e:	493f      	ldr	r1, [pc, #252]	; (800122c <Process_Modbus+0x230>)
 8001130:	4839      	ldr	r0, [pc, #228]	; (8001218 <Process_Modbus+0x21c>)
 8001132:	f002 ff0e 	bl	8003f52 <CLCD_WriteString>
			osDelay(2000);
 8001136:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800113a:	f003 fb49 	bl	80047d0 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 800113e:	2220      	movs	r2, #32
 8001140:	2100      	movs	r1, #0
 8001142:	4834      	ldr	r0, [pc, #208]	; (8001214 <Process_Modbus+0x218>)
 8001144:	f006 fd3b 	bl	8007bbe <memset>
			Send_Error_Device();
 8001148:	f003 f984 	bl	8004454 <Send_Error_Device>
			i = 5;
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <Process_Modbus+0x20c>)
 800114e:	2205      	movs	r2, #5
 8001150:	601a      	str	r2, [r3, #0]
		break;
 8001152:	e055      	b.n	8001200 <Process_Modbus+0x204>

	// Read Temp
	case 2:
		Temp = unpack754_32(Data_32);
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <Process_Modbus+0x234>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 ffc5 	bl	80040e8 <unpack754_32>
 800115e:	4603      	mov	r3, r0
 8001160:	4a34      	ldr	r2, [pc, #208]	; (8001234 <Process_Modbus+0x238>)
 8001162:	6013      	str	r3, [r2, #0]
//			sprintf(LCD_Send,"Temp: %.2f oC",Temp );
//			CLCD_SetCursor(&LCD1, 0, 0);
//			CLCD_WriteString(&LCD1, LCD_Send);
//			a = 0;
//		}
		memset(rx_data, 0, sizeof(rx_data));
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	482a      	ldr	r0, [pc, #168]	; (8001214 <Process_Modbus+0x218>)
 800116a:	f006 fd28 	bl	8007bbe <memset>
		Read_Water();
 800116e:	f003 f9f3 	bl	8004558 <Read_Water>
		i = 6;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <Process_Modbus+0x20c>)
 8001174:	2206      	movs	r2, #6
 8001176:	601a      	str	r2, [r3, #0]
		break;
 8001178:	e043      	b.n	8001202 <Process_Modbus+0x206>

	// Read Error Temperature measurement
	case 3:
		Error_T = Receive_Error_Temp(Data_16[0]);
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <Process_Modbus+0x210>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 f8d0 	bl	8004324 <Receive_Error_Temp>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <Process_Modbus+0x23c>)
 800118a:	801a      	strh	r2, [r3, #0]
		// Display error
		memset(rx_data, 0, sizeof(rx_data));
 800118c:	2220      	movs	r2, #32
 800118e:	2100      	movs	r1, #0
 8001190:	4820      	ldr	r0, [pc, #128]	; (8001214 <Process_Modbus+0x218>)
 8001192:	f006 fd14 	bl	8007bbe <memset>
		break;
 8001196:	e034      	b.n	8001202 <Process_Modbus+0x206>

	// Read Error RH measurement
	case 4:
		Error_H = Receive_Error_RH(Data_16[0]);
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <Process_Modbus+0x210>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f003 f923 	bl	80043e8 <Receive_Error_RH>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <Process_Modbus+0x240>)
 80011a8:	801a      	strh	r2, [r3, #0]
		// Display error
		memset(rx_data, 0, sizeof(rx_data));
 80011aa:	2220      	movs	r2, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4819      	ldr	r0, [pc, #100]	; (8001214 <Process_Modbus+0x218>)
 80011b0:	f006 fd05 	bl	8007bbe <memset>
		break;
 80011b4:	e025      	b.n	8001202 <Process_Modbus+0x206>

	// Read error device
	case 5:
		Error_Device = Receive_Error_Device(Data_16[0]);
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <Process_Modbus+0x210>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 f976 	bl	80044ac <Receive_Error_Device>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <Process_Modbus+0x244>)
 80011c6:	801a      	strh	r2, [r3, #0]
		// Display error
		memset(rx_data, 0, sizeof(rx_data));
 80011c8:	2220      	movs	r2, #32
 80011ca:	2100      	movs	r1, #0
 80011cc:	4811      	ldr	r0, [pc, #68]	; (8001214 <Process_Modbus+0x218>)
 80011ce:	f006 fcf6 	bl	8007bbe <memset>
		break;
 80011d2:	e016      	b.n	8001202 <Process_Modbus+0x206>

	// Read RH
	case 6:
		RH =  unpack754_32(Data_32);
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <Process_Modbus+0x234>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 ff85 	bl	80040e8 <unpack754_32>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a18      	ldr	r2, [pc, #96]	; (8001244 <Process_Modbus+0x248>)
 80011e2:	6013      	str	r3, [r2, #0]
//			CLCD_SetCursor(&LCD1, 0, 0);
//			CLCD_WriteString(&LCD1, LCD_Send);
//			CLCD_Clear(&LCD1);
//			a = 0;
//		}
		HAL_GPIO_WritePin(GPIOB, Led_Water_Pin|Led_Temp_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2160      	movs	r1, #96	; 0x60
 80011e8:	4817      	ldr	r0, [pc, #92]	; (8001248 <Process_Modbus+0x24c>)
 80011ea:	f000 fe81 	bl	8001ef0 <HAL_GPIO_WritePin>
		memset(rx_data, 0, sizeof(rx_data));
 80011ee:	2220      	movs	r2, #32
 80011f0:	2100      	movs	r1, #0
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <Process_Modbus+0x218>)
 80011f4:	f006 fce3 	bl	8007bbe <memset>
		i = 0;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <Process_Modbus+0x20c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
	}
}
 80011fe:	e000      	b.n	8001202 <Process_Modbus+0x206>
		break;
 8001200:	bf00      	nop
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002e8 	.word	0x200002e8
 800120c:	2000029c 	.word	0x2000029c
 8001210:	200002d6 	.word	0x200002d6
 8001214:	200002b0 	.word	0x200002b0
 8001218:	200002ec 	.word	0x200002ec
 800121c:	0800c340 	.word	0x0800c340
 8001220:	200002d8 	.word	0x200002d8
 8001224:	0800c34c 	.word	0x0800c34c
 8001228:	0800c360 	.word	0x0800c360
 800122c:	0800c374 	.word	0x0800c374
 8001230:	200002a0 	.word	0x200002a0
 8001234:	200002e0 	.word	0x200002e0
 8001238:	200002da 	.word	0x200002da
 800123c:	200002dc 	.word	0x200002dc
 8001240:	200002de 	.word	0x200002de
 8001244:	200002e4 	.word	0x200002e4
 8001248:	40010c00 	.word	0x40010c00

0800124c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	while(xSemaphoreTake(myCountingSem01Handle,portMAX_DELAY))
 8001254:	e050      	b.n	80012f8 <StartDefaultTask+0xac>
		{
			if (xQueueReceive(myQueueDataHandle, &rxData, portMAX_DELAY))
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <StartDefaultTask+0xcc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	492f      	ldr	r1, [pc, #188]	; (800131c <StartDefaultTask+0xd0>)
 8001260:	4618      	mov	r0, r3
 8001262:	f004 f8b5 	bl	80053d0 <xQueueReceive>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d045      	beq.n	80012f8 <StartDefaultTask+0xac>
			{
				rx_data[rx_index++] = rxData;
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <StartDefaultTask+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	492b      	ldr	r1, [pc, #172]	; (8001320 <StartDefaultTask+0xd4>)
 8001274:	600a      	str	r2, [r1, #0]
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <StartDefaultTask+0xd0>)
 8001278:	7811      	ldrb	r1, [r2, #0]
 800127a:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <StartDefaultTask+0xd8>)
 800127c:	54d1      	strb	r1, [r2, r3]
				rx_length++;
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <StartDefaultTask+0xdc>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <StartDefaultTask+0xdc>)
 8001288:	801a      	strh	r2, [r3, #0]
				if (rx_length >= 7 && checkcrc16(rx_data, rx_index) == 1)
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <StartDefaultTask+0xdc>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d932      	bls.n	80012f8 <StartDefaultTask+0xac>
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <StartDefaultTask+0xd4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	4822      	ldr	r0, [pc, #136]	; (8001324 <StartDefaultTask+0xd8>)
 800129c:	f002 fea6 	bl	8003fec <checkcrc16>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d128      	bne.n	80012f8 <StartDefaultTask+0xac>
				{
					Data_16[0] = rx_data[3]<<8 | rx_data[4];
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <StartDefaultTask+0xd8>)
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <StartDefaultTask+0xd8>)
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <StartDefaultTask+0xe0>)
 80012bc:	801a      	strh	r2, [r3, #0]
					Data_16[1] = rx_data[5]<<8 | rx_data[6];
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <StartDefaultTask+0xd8>)
 80012c0:	795b      	ldrb	r3, [r3, #5]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <StartDefaultTask+0xd8>)
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <StartDefaultTask+0xe0>)
 80012d4:	805a      	strh	r2, [r3, #2]
					Data_32 = Data_16[1]<<16 | Data_16[0];
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <StartDefaultTask+0xe0>)
 80012d8:	885b      	ldrh	r3, [r3, #2]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <StartDefaultTask+0xe0>)
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <StartDefaultTask+0xe4>)
 80012e6:	601a      	str	r2, [r3, #0]
					Process_Modbus();
 80012e8:	f7ff fe88 	bl	8000ffc <Process_Modbus>
					rx_index = 0;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <StartDefaultTask+0xd4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
					rx_length = 0;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <StartDefaultTask+0xdc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	801a      	strh	r2, [r3, #0]
	while(xSemaphoreTake(myCountingSem01Handle,portMAX_DELAY))
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <StartDefaultTask+0xe8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	4618      	mov	r0, r3
 8001302:	f004 f945 	bl	8005590 <xQueueSemaphoreTake>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1a4      	bne.n	8001256 <StartDefaultTask+0xa>
				}
			}
		}
  /* USER CODE END 5 */
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000290 	.word	0x20000290
 800131c:	200002ad 	.word	0x200002ad
 8001320:	200002d0 	.word	0x200002d0
 8001324:	200002b0 	.word	0x200002b0
 8001328:	200002d4 	.word	0x200002d4
 800132c:	2000029c 	.word	0x2000029c
 8001330:	200002a0 	.word	0x200002a0
 8001334:	20000298 	.word	0x20000298

08001338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800134a:	f000 fa7d 	bl	8001848 <HAL_IncTick>
//	Send_Error_Status();
//    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//  }

  /* USER CODE END Callback 1 */
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40000800 	.word	0x40000800

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_MspInit+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_MspInit+0x68>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_MspInit+0x68>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_MspInit+0x68>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <HAL_MspInit+0x68>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_MspInit+0x68>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	210f      	movs	r1, #15
 80013a2:	f06f 0001 	mvn.w	r0, #1
 80013a6:	f000 fb44 	bl	8001a32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_MspInit+0x6c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_MspInit+0x6c>)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000

080013d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d113      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x44>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2106      	movs	r1, #6
 8001406:	201c      	movs	r0, #28
 8001408:	f000 fb13 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140c:	201c      	movs	r0, #28
 800140e:	f000 fb2c 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_UART_MspInit+0x98>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d137      	bne.n	80014b0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_UART_MspInit+0x9c>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_UART_MspInit+0x9c>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144a:	61d3      	str	r3, [r2, #28]
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_UART_MspInit+0x9c>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_UART_MspInit+0x9c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <HAL_UART_MspInit+0x9c>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_UART_MspInit+0x9c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001470:	2304      	movs	r3, #4
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <HAL_UART_MspInit+0xa0>)
 8001484:	f000 fbb0 	bl	8001be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001488:	2308      	movs	r3, #8
 800148a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <HAL_UART_MspInit+0xa0>)
 800149c:	f000 fba4 	bl	8001be8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 9, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2109      	movs	r1, #9
 80014a4:	2026      	movs	r0, #38	; 0x26
 80014a6:	f000 fac4 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014aa:	2026      	movs	r0, #38	; 0x26
 80014ac:	f000 fadd 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40004400 	.word	0x40004400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010800 	.word	0x40010800

080014c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_InitTick+0xe8>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a33      	ldr	r2, [pc, #204]	; (80015ac <HAL_InitTick+0xe8>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_InitTick+0xe8>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f2:	f107 0210 	add.w	r2, r7, #16
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 f923 	bl	8002748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800150c:	f001 f8f4 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8001510:	6378      	str	r0, [r7, #52]	; 0x34
 8001512:	e004      	b.n	800151e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001514:	f001 f8f0 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8001518:	4603      	mov	r3, r0
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800151e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001520:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <HAL_InitTick+0xec>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	3b01      	subs	r3, #1
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_InitTick+0xf0>)
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_InitTick+0xf4>)
 8001530:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_InitTick+0xf0>)
 8001534:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001538:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_InitTick+0xf0>)
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_InitTick+0xf0>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_InitTick+0xf0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_InitTick+0xf0>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <HAL_InitTick+0xf0>)
 8001554:	f001 f946 	bl	80027e4 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800155e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11b      	bne.n	800159e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001566:	4813      	ldr	r0, [pc, #76]	; (80015b4 <HAL_InitTick+0xf0>)
 8001568:	f001 f98c 	bl	8002884 <HAL_TIM_Base_Start_IT>
 800156c:	4603      	mov	r3, r0
 800156e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001576:	2b00      	cmp	r3, #0
 8001578:	d111      	bne.n	800159e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800157a:	201e      	movs	r0, #30
 800157c:	f000 fa75 	bl	8001a6a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d808      	bhi.n	8001598 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001586:	2200      	movs	r2, #0
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	201e      	movs	r0, #30
 800158c:	f000 fa51 	bl	8001a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_InitTick+0xf8>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e002      	b.n	800159e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800159e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	20000350 	.word	0x20000350
 80015b8:	40000800 	.word	0x40000800
 80015bc:	20000004 	.word	0x20000004

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Temp_Pin);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fc96 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Water_Pin);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f000 fc8f 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <TIM2_IRQHandler+0x10>)
 800160e:	f001 f98b 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000200 	.word	0x20000200

0800161c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM4_IRQHandler+0x10>)
 8001622:	f001 f981 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000350 	.word	0x20000350

08001630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART2_IRQHandler+0x10>)
 8001636:	f001 fddf 	bl	80031f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//	HAL_UART_Transmit(&huart2, buffer, 7, 200);


  /* USER CODE END USART2_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000248 	.word	0x20000248

08001644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <_kill>:

int _kill(int pid, int sig)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165c:	f006 f97e 	bl	800795c <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	2216      	movs	r2, #22
 8001664:	601a      	str	r2, [r3, #0]
  return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_exit>:

void _exit (int status)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800167a:	f04f 31ff 	mov.w	r1, #4294967295
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffe7 	bl	8001652 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001684:	e7fe      	b.n	8001684 <_exit+0x12>

08001686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e00a      	b.n	80016ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001698:	f3af 8000 	nop.w
 800169c:	4601      	mov	r1, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	60ba      	str	r2, [r7, #8]
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	dbf0      	blt.n	8001698 <_read+0x12>
  }

  return len;
 80016b6:	687b      	ldr	r3, [r7, #4]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e009      	b.n	80016e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbf1      	blt.n	80016d2 <_write+0x12>
  }
  return len;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_close>:

int _close(int file)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	605a      	str	r2, [r3, #4]
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <_isatty>:

int _isatty(int file)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f006 f8e8 	bl	800795c <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20005000 	.word	0x20005000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20000398 	.word	0x20000398
 80017c0:	200031b8 	.word	0x200031b8

080017c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017d2:	490d      	ldr	r1, [pc, #52]	; (8001808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
   b LoopCopyDataInit
 80017d8:	e002      	b.n	80017e0 <LoopCopyDataInit>

080017da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017de:	3304      	adds	r3, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e4:	d3f9      	bcc.n	80017da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e8:	4c0a      	ldr	r4, [pc, #40]	; (8001814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ec:	e001      	b.n	80017f2 <LoopFillZerobss>

080017ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f0:	3204      	adds	r2, #4

080017f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f4:	d3fb      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017f6:	f7ff ffe5 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f006 f9ab 	bl	8007b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017fe:	f7ff fa55 	bl	8000cac <main>
  bx lr
 8001802:	4770      	bx	lr
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800180c:	0800cad4 	.word	0x0800cad4
  ldr r2, =_sbss
 8001810:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001814:	200031b8 	.word	0x200031b8

08001818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_2_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x28>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x28>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 f8f5 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	200f      	movs	r0, #15
 8001834:	f7ff fe46 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fd96 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x1c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_IncTick+0x20>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000008 	.word	0x20000008
 8001868:	2000039c 	.word	0x2000039c

0800186c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_GetTick+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	2000039c 	.word	0x2000039c

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff fff0 	bl	800186c <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffe0 	bl	800186c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4906      	ldr	r1, [pc, #24]	; (8001960 <__NVIC_EnableIRQ+0x34>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff4f 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff64 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ffb2 	bl	80019b8 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff81 	bl	8001964 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff57 	bl	800192c <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e020      	b.n	8001af0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020e 	bic.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d005      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2204      	movs	r2, #4
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e051      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 020e 	bic.w	r2, r2, #14
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_DMA_Abort_IT+0xd0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d029      	beq.n	8001b9c <HAL_DMA_Abort_IT+0xa0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <HAL_DMA_Abort_IT+0xd4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d022      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x9c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <HAL_DMA_Abort_IT+0xd8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d01a      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x96>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <HAL_DMA_Abort_IT+0xdc>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d012      	beq.n	8001b8c <HAL_DMA_Abort_IT+0x90>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <HAL_DMA_Abort_IT+0xe0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00a      	beq.n	8001b86 <HAL_DMA_Abort_IT+0x8a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <HAL_DMA_Abort_IT+0xe4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d102      	bne.n	8001b80 <HAL_DMA_Abort_IT+0x84>
 8001b7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b7e:	e00e      	b.n	8001b9e <HAL_DMA_Abort_IT+0xa2>
 8001b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b84:	e00b      	b.n	8001b9e <HAL_DMA_Abort_IT+0xa2>
 8001b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b8a:	e008      	b.n	8001b9e <HAL_DMA_Abort_IT+0xa2>
 8001b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b90:	e005      	b.n	8001b9e <HAL_DMA_Abort_IT+0xa2>
 8001b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b96:	e002      	b.n	8001b9e <HAL_DMA_Abort_IT+0xa2>
 8001b98:	2310      	movs	r3, #16
 8001b9a:	e000      	b.n	8001b9e <HAL_DMA_Abort_IT+0xa2>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_DMA_Abort_IT+0xe8>)
 8001ba0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
    } 
  }
  return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020008 	.word	0x40020008
 8001bd0:	4002001c 	.word	0x4002001c
 8001bd4:	40020030 	.word	0x40020030
 8001bd8:	40020044 	.word	0x40020044
 8001bdc:	40020058 	.word	0x40020058
 8001be0:	4002006c 	.word	0x4002006c
 8001be4:	40020000 	.word	0x40020000

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	; 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e169      	b.n	8001ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8158 	bne.w	8001eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a9a      	ldr	r2, [pc, #616]	; (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05e      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a98      	ldr	r2, [pc, #608]	; (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d875      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c2a:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d058      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c30:	4a96      	ldr	r2, [pc, #600]	; (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d86f      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c36:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d052      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a94      	ldr	r2, [pc, #592]	; (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d869      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c42:	4a94      	ldr	r2, [pc, #592]	; (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04c      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c48:	4a92      	ldr	r2, [pc, #584]	; (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d863      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a92      	ldr	r2, [pc, #584]	; (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d046      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c54:	4a90      	ldr	r2, [pc, #576]	; (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d85d      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d82a      	bhi.n	8001cb4 <HAL_GPIO_Init+0xcc>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d859      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <HAL_GPIO_Init+0x80>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001ccf 	.word	0x08001ccf
 8001c74:	08001d11 	.word	0x08001d11
 8001c78:	08001d17 	.word	0x08001d17
 8001c7c:	08001d17 	.word	0x08001d17
 8001c80:	08001d17 	.word	0x08001d17
 8001c84:	08001d17 	.word	0x08001d17
 8001c88:	08001d17 	.word	0x08001d17
 8001c8c:	08001d17 	.word	0x08001d17
 8001c90:	08001d17 	.word	0x08001d17
 8001c94:	08001d17 	.word	0x08001d17
 8001c98:	08001d17 	.word	0x08001d17
 8001c9c:	08001d17 	.word	0x08001d17
 8001ca0:	08001d17 	.word	0x08001d17
 8001ca4:	08001d17 	.word	0x08001d17
 8001ca8:	08001d17 	.word	0x08001d17
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001cd9 	.word	0x08001cd9
 8001cb4:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_GPIO_Init+0x2b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cba:	e02c      	b.n	8001d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e029      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e024      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e01f      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e01a      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cea:	2304      	movs	r3, #4
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e013      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	611a      	str	r2, [r3, #16]
          break;
 8001d02:	e009      	b.n	8001d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	615a      	str	r2, [r3, #20]
          break;
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          break;
 8001d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2bff      	cmp	r3, #255	; 0xff
 8001d1c:	d801      	bhi.n	8001d22 <HAL_GPIO_Init+0x13a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_Init+0x13e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	; 0xff
 8001d2c:	d802      	bhi.n	8001d34 <HAL_GPIO_Init+0x14c>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x152>
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	3b08      	subs	r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	210f      	movs	r1, #15
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80b1 	beq.w	8001eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d80:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1ec>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3f      	ldr	r2, [pc, #252]	; (8001eac <HAL_GPIO_Init+0x2c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <HAL_GPIO_Init+0x2c8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3d      	ldr	r2, [pc, #244]	; (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	492f      	ldr	r1, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	492c      	ldr	r1, [pc, #176]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4928      	ldr	r1, [pc, #160]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4918      	ldr	r1, [pc, #96]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4914      	ldr	r1, [pc, #80]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d021      	beq.n	8001ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
 8001e84:	e021      	b.n	8001eca <HAL_GPIO_Init+0x2e2>
 8001e86:	bf00      	nop
 8001e88:	10320000 	.word	0x10320000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10120000 	.word	0x10120000
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40011400 	.word	0x40011400
 8001eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_GPIO_Init+0x304>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	4909      	ldr	r1, [pc, #36]	; (8001eec <HAL_GPIO_Init+0x304>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	3301      	adds	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f47f ae8e 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	372c      	adds	r7, #44	; 0x2c
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fe78 	bl	8000c34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e272      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f70:	4b92      	ldr	r3, [pc, #584]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7c:	4b8f      	ldr	r3, [pc, #572]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
 8001f88:	4b8c      	ldr	r3, [pc, #560]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06c      	beq.n	800207c <HAL_RCC_OscConfig+0x12c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d168      	bne.n	800207c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e24c      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76>
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7f      	ldr	r2, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a77      	ldr	r2, [pc, #476]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xbc>
 8001ff2:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 800200c:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6a      	ldr	r2, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a67      	ldr	r2, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fc1e 	bl	800186c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fc1a 	bl	800186c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e200      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe4>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fc0a 	bl	800186c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc06 	bl	800186c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1ec      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x10c>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c0      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4939      	ldr	r1, [pc, #228]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fbbf 	bl	800186c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fbbb 	bl	800186c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4927      	ldr	r1, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fb9e 	bl	800186c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fb9a 	bl	800186c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e180      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7ff fb7e 	bl	800186c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fb7a 	bl	800186c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e160      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fb08 	bl	80027a8 <RCC_Delay>
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fb64 	bl	800186c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	e00f      	b.n	80021c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fb60 	bl	800186c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e146      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	42420000 	.word	0x42420000
 80021c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b92      	ldr	r3, [pc, #584]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e9      	bne.n	80021a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a6 	beq.w	800232e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a87      	ldr	r2, [pc, #540]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b85      	ldr	r3, [pc, #532]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b7f      	ldr	r3, [pc, #508]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7ff fb21 	bl	800186c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7ff fb1d 	bl	800186c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e103      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6e      	ldr	r2, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e02d      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x334>
 800226a:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a69      	ldr	r2, [pc, #420]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x356>
 800228c:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a60      	ldr	r2, [pc, #384]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 80022a6:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a5a      	ldr	r2, [pc, #360]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fad1 	bl	800186c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7ff facd 	bl	800186c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0b1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x37e>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fabb 	bl	800186c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7ff fab7 	bl	800186c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e09b      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8087 	beq.w	8002446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d061      	beq.n	8002408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d146      	bne.n	80023da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7ff fa8b 	bl	800186c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fa87 	bl	800186c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e06d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4921      	ldr	r1, [pc, #132]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a19      	ldr	r1, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	430b      	orrs	r3, r1
 80023a6:	491b      	ldr	r1, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fa5b 	bl	800186c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fa57 	bl	800186c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x46a>
 80023d8:	e035      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa44 	bl	800186c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fa40 	bl	800186c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e026      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x498>
 8002406:	e01e      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e019      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x500>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d0      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4965      	ldr	r1, [pc, #404]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d040      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e073      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4936      	ldr	r1, [pc, #216]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7ff f992 	bl	800186c <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff f98e 	bl	800186c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e053      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d210      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4922      	ldr	r1, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f821 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1cc>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe ff5e 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	0800c40c 	.word	0x0800c40c
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b490      	push	{r4, r7}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002630:	1d3c      	adds	r4, r7, #4
 8002632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002638:	f240 2301 	movw	r3, #513	; 0x201
 800263c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b04      	cmp	r3, #4
 8002660:	d002      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x40>
 8002662:	2b08      	cmp	r3, #8
 8002664:	d003      	beq.n	800266e <HAL_RCC_GetSysClockFreq+0x46>
 8002666:	e02b      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800266a:	623b      	str	r3, [r7, #32]
      break;
 800266c:	e02b      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	0c9b      	lsrs	r3, r3, #18
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3328      	adds	r3, #40	; 0x28
 8002678:	443b      	add	r3, r7
 800267a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800267e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d012      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	3328      	adds	r3, #40	; 0x28
 8002696:	443b      	add	r3, r7
 8002698:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800269c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a2:	fb03 f202 	mul.w	r2, r3, r2
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	e004      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	623b      	str	r3, [r7, #32]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c2:	623b      	str	r3, [r7, #32]
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc90      	pop	{r4, r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	0800c388 	.word	0x0800c388
 80026d8:	40021000 	.word	0x40021000
 80026dc:	007a1200 	.word	0x007a1200
 80026e0:	003d0900 	.word	0x003d0900

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20000000 	.word	0x20000000

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff2 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	0800c41c 	.word	0x0800c41c

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffde 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	0800c41c 	.word	0x0800c41c

08002748 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	220f      	movs	r2, #15
 8002756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_RCC_GetClockConfig+0x58>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <HAL_RCC_GetClockConfig+0x58>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_GetClockConfig+0x58>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_RCC_GetClockConfig+0x58>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_GetClockConfig+0x5c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0207 	and.w	r2, r3, #7
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40022000 	.word	0x40022000

080027a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <RCC_Delay+0x34>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <RCC_Delay+0x38>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a5b      	lsrs	r3, r3, #9
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c4:	bf00      	nop
  }
  while (Delay --);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <RCC_Delay+0x1c>
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	20000000 	.word	0x20000000
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e041      	b.n	800287a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fde4 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 fa70 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d001      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e03a      	b.n	8002912 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIM_Base_Start_IT+0x98>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x58>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <HAL_TIM_Base_Start_IT+0xa0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d010      	beq.n	8002910 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	e007      	b.n	8002910 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0202 	mvn.w	r2, #2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f9b1 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9a4 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f9b3 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0204 	mvn.w	r2, #4
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f987 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f97a 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f989 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0208 	mvn.w	r2, #8
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f95d 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f950 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f95f 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f933 	bl	8002cd2 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f926 	bl	8002cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f935 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0201 	mvn.w	r2, #1
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fc46 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa77 	bl	8002fc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8f9 	bl	8002cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0220 	mvn.w	r2, #32
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa42 	bl	8002fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_ConfigClockSource+0x18>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0b3      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x180>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b88:	d03e      	beq.n	8002c08 <HAL_TIM_ConfigClockSource+0xd0>
 8002b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8e:	f200 8087 	bhi.w	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	f000 8085 	beq.w	8002ca4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9e:	d87f      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d01a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0xa2>
 8002ba4:	2b70      	cmp	r3, #112	; 0x70
 8002ba6:	d87b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002ba8:	2b60      	cmp	r3, #96	; 0x60
 8002baa:	d050      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x116>
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d877      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb0:	2b50      	cmp	r3, #80	; 0x50
 8002bb2:	d03c      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xf6>
 8002bb4:	2b50      	cmp	r3, #80	; 0x50
 8002bb6:	d873      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d058      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x136>
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d86f      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d064      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
 8002bc4:	2b30      	cmp	r3, #48	; 0x30
 8002bc6:	d86b      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d060      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d867      	bhi.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05c      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d05a      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bd8:	e062      	b.n	8002ca0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6899      	ldr	r1, [r3, #8]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f000 f966 	bl	8002eba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
      break;
 8002c06:	e04e      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6899      	ldr	r1, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f000 f94f 	bl	8002eba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c2a:	609a      	str	r2, [r3, #8]
      break;
 8002c2c:	e03b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f000 f8c6 	bl	8002dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2150      	movs	r1, #80	; 0x50
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f91d 	bl	8002e86 <TIM_ITRx_SetConfig>
      break;
 8002c4c:	e02b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f8e4 	bl	8002e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2160      	movs	r1, #96	; 0x60
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f90d 	bl	8002e86 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e01b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f8a6 	bl	8002dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2140      	movs	r1, #64	; 0x40
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f8fd 	bl	8002e86 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e00b      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f000 f8f4 	bl	8002e86 <TIM_ITRx_SetConfig>
        break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ca4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <TIM_Base_SetConfig+0xb8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0x30>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0x30>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <TIM_Base_SetConfig+0xbc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0x30>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <TIM_Base_SetConfig+0xb8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <TIM_Base_SetConfig+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d007      	beq.n	8002d6a <TIM_Base_SetConfig+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <TIM_Base_SetConfig+0xbc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d003      	beq.n	8002d6a <TIM_Base_SetConfig+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d108      	bne.n	8002d7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <TIM_Base_SetConfig+0xb8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d103      	bne.n	8002db0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	615a      	str	r2, [r3, #20]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800

08002dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 030a 	bic.w	r3, r3, #10
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 0210 	bic.w	r2, r3, #16
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	031b      	lsls	r3, r3, #12
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f043 0307 	orr.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	609a      	str	r2, [r3, #8]
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e046      	b.n	8002f9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5c:	d009      	beq.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10c      	bne.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800

08002fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e03f      	b.n	800306a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fe fa0e 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	; 0x24
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fc85 	bl	800392c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b08a      	sub	sp, #40	; 0x28
 8003076:	af02      	add	r7, sp, #8
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	d17c      	bne.n	800318c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_Transmit+0x2c>
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e075      	b.n	800318e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_UART_Transmit+0x3e>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e06e      	b.n	800318e <HAL_UART_Transmit+0x11c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2221      	movs	r2, #33	; 0x21
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fbd1 	bl	800186c <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	d108      	bne.n	80030f4 <HAL_UART_Transmit+0x82>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e003      	b.n	80030fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003104:	e02a      	b.n	800315c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fa38 	bl	8003586 <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e036      	b.n	800318e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	3302      	adds	r3, #2
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	e007      	b.n	800314e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1cf      	bne.n	8003106 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fa08 	bl	8003586 <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	4613      	mov	r3, r2
 80031a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d11d      	bne.n	80031ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_UART_Receive_IT+0x26>
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e016      	b.n	80031ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Receive_IT+0x38>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e00f      	b.n	80031ee <HAL_UART_Receive_IT+0x58>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	461a      	mov	r2, r3
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fa19 	bl	800361a <UART_Start_Receive_IT>
 80031e8:	4603      	mov	r3, r0
 80031ea:	e000      	b.n	80031ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_UART_IRQHandler+0x52>
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fac9 	bl	80037da <UART_Receive_IT>
      return;
 8003248:	e17b      	b.n	8003542 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80b1 	beq.w	80033b4 <HAL_UART_IRQHandler+0x1bc>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_UART_IRQHandler+0x70>
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80a6 	beq.w	80033b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_UART_IRQHandler+0x90>
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_UART_IRQHandler+0xb0>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f043 0202 	orr.w	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_UART_IRQHandler+0xd0>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00f      	beq.n	80032f2 <HAL_UART_IRQHandler+0xfa>
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <HAL_UART_IRQHandler+0xee>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f043 0208 	orr.w	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 811e 	beq.w	8003538 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_UART_IRQHandler+0x11e>
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa62 	bl	80037da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <HAL_UART_IRQHandler+0x146>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d031      	beq.n	80033a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9a4 	bl	800368c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d023      	beq.n	800339a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003360:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	2b00      	cmp	r3, #0
 8003368:	d013      	beq.n	8003392 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	4a76      	ldr	r2, [pc, #472]	; (8003548 <HAL_UART_IRQHandler+0x350>)
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fbc0 	bl	8001afc <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d016      	beq.n	80033b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800338c:	4610      	mov	r0, r2
 800338e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e00e      	b.n	80033b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8e3 	bl	800355e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	e00a      	b.n	80033b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8df 	bl	800355e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e006      	b.n	80033b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8db 	bl	800355e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033ae:	e0c3      	b.n	8003538 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	bf00      	nop
    return;
 80033b2:	e0c1      	b.n	8003538 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f040 80a1 	bne.w	8003500 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 809b 	beq.w	8003500 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8095 	beq.w	8003500 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d04e      	beq.n	8003498 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003404:	8a3b      	ldrh	r3, [r7, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8098 	beq.w	800353c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003410:	8a3a      	ldrh	r2, [r7, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	f080 8092 	bcs.w	800353c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8a3a      	ldrh	r2, [r7, #16]
 800341c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b20      	cmp	r3, #32
 8003426:	d02b      	beq.n	8003480 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003436:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0210 	bic.w	r2, r2, #16
 8003474:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fb03 	bl	8001a86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	b29b      	uxth	r3, r3
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f86d 	bl	8003570 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003496:	e051      	b.n	800353c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d047      	beq.n	8003540 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80034b0:	8a7b      	ldrh	r3, [r7, #18]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d044      	beq.n	8003540 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0210 	bic.w	r2, r2, #16
 80034f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f4:	8a7b      	ldrh	r3, [r7, #18]
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f839 	bl	8003570 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034fe:	e01f      	b.n	8003540 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_UART_IRQHandler+0x324>
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f8f9 	bl	800370c <UART_Transmit_IT>
    return;
 800351a:	e012      	b.n	8003542 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <HAL_UART_IRQHandler+0x34a>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f93a 	bl	80037aa <UART_EndTransmit_IT>
    return;
 8003536:	e004      	b.n	8003542 <HAL_UART_IRQHandler+0x34a>
    return;
 8003538:	bf00      	nop
 800353a:	e002      	b.n	8003542 <HAL_UART_IRQHandler+0x34a>
      return;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <HAL_UART_IRQHandler+0x34a>
      return;
 8003540:	bf00      	nop
  }
}
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	080036e5 	.word	0x080036e5

0800354c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003596:	e02c      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359e:	d028      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a6:	f7fe f961 	bl	800186c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d21d      	bcs.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00f      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0c3      	beq.n	8003598 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	4613      	mov	r3, r2
 8003626:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2222      	movs	r2, #34	; 0x22
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0210 	bic.w	r2, r2, #16
 80036ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff ff2d 	bl	800355e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b21      	cmp	r3, #33	; 0x21
 800371e:	d13e      	bne.n	800379e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003728:	d114      	bne.n	8003754 <UART_Transmit_IT+0x48>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d110      	bne.n	8003754 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003746:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	1c9a      	adds	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]
 8003752:	e008      	b.n	8003766 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	1c59      	adds	r1, r3, #1
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6211      	str	r1, [r2, #32]
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29b      	uxth	r3, r3
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003788:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003798:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff febe 	bl	800354c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b22      	cmp	r3, #34	; 0x22
 80037ec:	f040 8099 	bne.w	8003922 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d117      	bne.n	800382a <UART_Receive_IT+0x50>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d113      	bne.n	800382a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003818:	b29a      	uxth	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	1c9a      	adds	r2, r3, #2
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
 8003828:	e026      	b.n	8003878 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d007      	beq.n	800384e <UART_Receive_IT+0x74>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <UART_Receive_IT+0x82>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e008      	b.n	800386e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003868:	b2da      	uxtb	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29b      	uxth	r3, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4619      	mov	r1, r3
 8003886:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003888:	2b00      	cmp	r3, #0
 800388a:	d148      	bne.n	800391e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0220 	bic.w	r2, r2, #32
 800389a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d123      	bne.n	8003914 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0210 	bic.w	r2, r2, #16
 80038e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d10a      	bne.n	8003906 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fe2f 	bl	8003570 <HAL_UARTEx_RxEventCallback>
 8003912:	e002      	b.n	800391a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fd f95f 	bl	8000bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e002      	b.n	8003924 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003966:	f023 030c 	bic.w	r3, r3, #12
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	430b      	orrs	r3, r1
 8003972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <UART_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d103      	bne.n	800399c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7fe fec4 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	e002      	b.n	80039a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7fe feac 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 80039a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <UART_SetConfig+0x118>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	0119      	lsls	r1, r3, #4
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009a      	lsls	r2, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <UART_SetConfig+0x118>)
 80039da:	fba3 0302 	umull	r0, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2064      	movs	r0, #100	; 0x64
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <UART_SetConfig+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f8:	4419      	add	r1, r3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <UART_SetConfig+0x118>)
 8003a12:	fba3 0302 	umull	r0, r3, r3, r2
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2064      	movs	r0, #100	; 0x64
 8003a1a:	fb00 f303 	mul.w	r3, r0, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	3332      	adds	r3, #50	; 0x32
 8003a24:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <UART_SetConfig+0x118>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	440a      	add	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40013800 	.word	0x40013800
 8003a44:	51eb851f 	.word	0x51eb851f

08003a48 <CLCD_Delay>:
#include "Lcd.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd ff13 	bl	8001880 <HAL_Delay>

}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 8003a72:	78bb      	ldrb	r3, [r7, #2]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d108      	bne.n	8003a8a <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6858      	ldr	r0, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	891b      	ldrh	r3, [r3, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	4619      	mov	r1, r3
 8003a84:	f7fe fa34 	bl	8001ef0 <HAL_GPIO_WritePin>
 8003a88:	e00a      	b.n	8003aa0 <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 8003a8a:	78bb      	ldrb	r3, [r7, #2]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6858      	ldr	r0, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	891b      	ldrh	r3, [r3, #8]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7fe fa28 	bl	8001ef0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6958      	ldr	r0, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8b19      	ldrh	r1, [r3, #24]
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f7fe fa1d 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69d8      	ldr	r0, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8c19      	ldrh	r1, [r3, #32]
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	f7fe fa10 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f7fe fa03 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fe f9f6 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f7fe f9e9 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	f7fe f9db 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	f7fe f9cd 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	09db      	lsrs	r3, r3, #7
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7fe f9c2 	bl	8001ef0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68d8      	ldr	r0, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8a1b      	ldrh	r3, [r3, #16]
 8003b74:	2200      	movs	r2, #0
 8003b76:	4619      	mov	r1, r3
 8003b78:	f7fe f9ba 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7ff ff63 	bl	8003a48 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68d8      	ldr	r0, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8a1b      	ldrh	r3, [r3, #16]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f7fe f9af 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f7ff ff58 	bl	8003a48 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68d8      	ldr	r0, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8a1b      	ldrh	r3, [r3, #16]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f7fe f9a4 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7ff ff4d 	bl	8003a48 <CLCD_Delay>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 8003bd0:	78bb      	ldrb	r3, [r7, #2]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6858      	ldr	r0, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	891b      	ldrh	r3, [r3, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fe f985 	bl	8001ef0 <HAL_GPIO_WritePin>
 8003be6:	e00a      	b.n	8003bfe <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8003be8:	78bb      	ldrb	r3, [r7, #2]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6858      	ldr	r0, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	891b      	ldrh	r3, [r3, #8]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f7fe f979 	bl	8001ef0 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7fe f96e 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7fe f960 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7fe f952 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	f7fe f944 	bl	8001ef0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68d8      	ldr	r0, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8a1b      	ldrh	r3, [r3, #16]
 8003c70:	2200      	movs	r2, #0
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fe f93c 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f7ff fee5 	bl	8003a48 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68d8      	ldr	r0, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8a1b      	ldrh	r3, [r3, #16]
 8003c86:	2201      	movs	r2, #1
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fe f931 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f7ff feda 	bl	8003a48 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68d8      	ldr	r0, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8a1b      	ldrh	r3, [r3, #16]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fe f926 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f7ff fecf 	bl	8003a48 <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8003cb2:	7bbb      	ldrb	r3, [r7, #14]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7fe f918 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8003cca:	7bbb      	ldrb	r3, [r7, #14]
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f7fe f90a 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8003ce6:	7bbb      	ldrb	r3, [r7, #14]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fe f8fc 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003d02:	7bbb      	ldrb	r3, [r7, #14]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7fe f8ee 	bl	8001ef0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68d8      	ldr	r0, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8a1b      	ldrh	r3, [r3, #16]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f7fe f8e6 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7ff fe8f 	bl	8003a48 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68d8      	ldr	r0, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8a1b      	ldrh	r3, [r3, #16]
 8003d32:	2201      	movs	r2, #1
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fe f8db 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f7ff fe84 	bl	8003a48 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68d8      	ldr	r0, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8a1b      	ldrh	r3, [r3, #16]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fe f8d0 	bl	8001ef0 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003d50:	2001      	movs	r0, #1
 8003d52:	f7ff fe79 	bl	8003a48 <CLCD_Delay>
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	72fb      	strb	r3, [r7, #11]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	7afa      	ldrb	r2, [r7, #11]
 8003d7a:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	7aba      	ldrb	r2, [r7, #10]
 8003d80:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8b3a      	ldrh	r2, [r7, #24]
 8003d8c:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8c3a      	ldrh	r2, [r7, #32]
 8003d98:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003da4:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003daa:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003dbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc6:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003dce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2228      	movs	r2, #40	; 0x28
 8003dd6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2206      	movs	r2, #6
 8003dde:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	220c      	movs	r2, #12
 8003de6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2214      	movs	r2, #20
 8003dee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	CLCD_Delay(50);
 8003df2:	2032      	movs	r0, #50	; 0x32
 8003df4:	f7ff fe28 	bl	8003a48 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2133      	movs	r1, #51	; 0x33
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff feda 	bl	8003bb6 <CLCD_Write4>
	CLCD_Delay(5);
 8003e02:	2005      	movs	r0, #5
 8003e04:	f7ff fe20 	bl	8003a48 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2133      	movs	r1, #51	; 0x33
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fed2 	bl	8003bb6 <CLCD_Write4>
	CLCD_Delay(5);
 8003e12:	2005      	movs	r0, #5
 8003e14:	f7ff fe18 	bl	8003a48 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2132      	movs	r1, #50	; 0x32
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff feca 	bl	8003bb6 <CLCD_Write4>
	CLCD_Delay(5);
 8003e22:	2005      	movs	r0, #5
 8003e24:	f7ff fe10 	bl	8003a48 <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4619      	mov	r1, r3
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff febf 	bl	8003bb6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4619      	mov	r1, r3
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff feb7 	bl	8003bb6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e4e:	2200      	movs	r2, #0
 8003e50:	4619      	mov	r1, r3
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff feaf 	bl	8003bb6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003e5e:	2200      	movs	r2, #0
 8003e60:	4619      	mov	r1, r3
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff fea7 	bl	8003bb6 <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff fea2 	bl	8003bb6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2102      	movs	r1, #2
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff fe9d 	bl	8003bb6 <CLCD_Write4>
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
 8003e90:	4613      	mov	r3, r2
 8003e92:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <CLCD_SetCursor+0x8c>)
 8003e9a:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d303      	bcc.n	8003eae <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	789b      	ldrb	r3, [r3, #2]
 8003eb2:	78ba      	ldrb	r2, [r7, #2]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d303      	bcc.n	8003ec0 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	789b      	ldrb	r3, [r3, #2]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8003ec0:	78bb      	ldrb	r3, [r7, #2]
 8003ec2:	3310      	adds	r3, #16
 8003ec4:	443b      	add	r3, r7
 8003ec6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	4413      	add	r3, r2
 8003ece:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d109      	bne.n	8003eec <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fdbc 	bl	8003a62 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 8003eea:	e00c      	b.n	8003f06 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d108      	bne.n	8003f06 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fe58 	bl	8003bb6 <CLCD_Write4>
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	54144000 	.word	0x54144000

08003f14 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d106      	bne.n	8003f36 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fd97 	bl	8003a62 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8003f34:	e009      	b.n	8003f4a <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	2201      	movs	r2, #1
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fe36 	bl	8003bb6 <CLCD_Write4>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_WriteChar(LCD, *String++);
 8003f5c:	e007      	b.n	8003f6e <CLCD_WriteString+0x1c>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	603a      	str	r2, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ffd3 	bl	8003f14 <CLCD_WriteChar>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f3      	bne.n	8003f5e <CLCD_WriteString+0xc>
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <crc16>:

extern UART_HandleTypeDef huart2;


uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8003f8c:	23ff      	movs	r3, #255	; 0xff
 8003f8e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8003f90:	23ff      	movs	r3, #255	; 0xff
 8003f92:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8003f94:	e013      	b.n	8003fbe <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	7bbb      	ldrb	r3, [r7, #14]
 8003fa0:	4053      	eors	r3, r2
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8003fa6:	4a0f      	ldr	r2, [pc, #60]	; (8003fe4 <crc16+0x64>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4413      	add	r3, r2
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	4053      	eors	r3, r2
 8003fb2:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	; (8003fe8 <crc16+0x68>)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	807a      	strh	r2, [r7, #2]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e6      	bne.n	8003f96 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b21a      	sxth	r2, r3
 8003fce:	7bbb      	ldrb	r3, [r7, #14]
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b21b      	sxth	r3, r3
 8003fd6:	b29b      	uxth	r3, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	0800c424 	.word	0x0800c424
 8003fe8:	0800c524 	.word	0x0800c524

08003fec <checkcrc16>:

// buffer: data nhan duoc de kiem tra checksum
// index: size cua data
// Vd truyen vao data có 7 byte: index = 7
uint8_t checkcrc16(uint8_t *buffer, uint8_t index)
{
 8003fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	b089      	sub	sp, #36	; 0x24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
 8003ffa:	466b      	mov	r3, sp
 8003ffc:	461e      	mov	r6, r3
	uint8_t transform[index], a;
 8003ffe:	78f9      	ldrb	r1, [r7, #3]
 8004000:	460b      	mov	r3, r1
 8004002:	3b01      	subs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	b2cb      	uxtb	r3, r1
 8004008:	2200      	movs	r2, #0
 800400a:	4698      	mov	r8, r3
 800400c:	4691      	mov	r9, r2
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800401a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004022:	b2cb      	uxtb	r3, r1
 8004024:	2200      	movs	r2, #0
 8004026:	461c      	mov	r4, r3
 8004028:	4615      	mov	r5, r2
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	00eb      	lsls	r3, r5, #3
 8004034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004038:	00e2      	lsls	r2, r4, #3
 800403a:	460b      	mov	r3, r1
 800403c:	3307      	adds	r3, #7
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	ebad 0d03 	sub.w	sp, sp, r3
 8004046:	466b      	mov	r3, sp
 8004048:	3300      	adds	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < index - 2; i++)
 800404c:	2300      	movs	r3, #0
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	e00b      	b.n	800406a <checkcrc16+0x7e>
	{
		transform[i] = buffer[i];
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	7819      	ldrb	r1, [r3, #0]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	460a      	mov	r2, r1
 8004062:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < index - 2; i++)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	3b02      	subs	r3, #2
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	dbee      	blt.n	8004052 <checkcrc16+0x66>
	}
	uint16_t crc = crc16(transform, index - 2);
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b02      	subs	r3, #2
 800407a:	b29b      	uxth	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6938      	ldr	r0, [r7, #16]
 8004080:	f7ff ff7e 	bl	8003f80 <crc16>
 8004084:	4603      	mov	r3, r0
 8004086:	81fb      	strh	r3, [r7, #14]
	transform[index - 2] = crc&0xFF;   // CRC LOW
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	3b02      	subs	r3, #2
 800408c:	89fa      	ldrh	r2, [r7, #14]
 800408e:	b2d1      	uxtb	r1, r2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	54d1      	strb	r1, [r2, r3]
	transform[index - 1] = (crc>>8)&0xFF;  // CRC HIGH
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	b29a      	uxth	r2, r3
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	3b01      	subs	r3, #1
 800409e:	b2d1      	uxtb	r1, r2
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	54d1      	strb	r1, [r2, r3]
	if ((transform[index - 2] == buffer[index - 2]) && (transform[index - 2] == buffer[index - 2]))
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	3b02      	subs	r3, #2
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	5cd2      	ldrb	r2, [r2, r3]
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	3b02      	subs	r3, #2
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	440b      	add	r3, r1
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d10d      	bne.n	80040d6 <checkcrc16+0xea>
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	3b02      	subs	r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	5cd2      	ldrb	r2, [r2, r3]
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	3b02      	subs	r3, #2
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	440b      	add	r3, r1
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d102      	bne.n	80040d6 <checkcrc16+0xea>
	{
		a = 1;
 80040d0:	2301      	movs	r3, #1
 80040d2:	76fb      	strb	r3, [r7, #27]
 80040d4:	e001      	b.n	80040da <checkcrc16+0xee>
	}
	else
	{
		a = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	76fb      	strb	r3, [r7, #27]
	}
	return a;
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	46b5      	mov	sp, r6
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	; 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080040e8 <unpack754_32>:
    return f;
}

// Chuyen float 32 bit sang so thuc
float unpack754_32( uint32_t floatingToIntValue )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	 myfloat ieee754;
	 unsigned int mantissa = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
	 unsigned int exponent = 0 ;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
	 unsigned int sign = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

	 sign = NTH_BIT(floatingToIntValue, 31);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0fdb      	lsrs	r3, r3, #31
 8004100:	60fb      	str	r3, [r7, #12]
	 for( int ix=0; ix<8; ix++)
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e00e      	b.n	8004126 <unpack754_32+0x3e>
	   exponent = (exponent | (NTH_BIT(floatingToIntValue, (30-ix))))<<1;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f1c3 031e 	rsb	r3, r3, #30
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	f003 0201 	and.w	r2, r3, #1
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<8; ix++)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	3301      	adds	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b07      	cmp	r3, #7
 800412a:	dded      	ble.n	8004108 <unpack754_32+0x20>
	 exponent = exponent>>1;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<23; ix++)
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	e00e      	b.n	8004156 <unpack754_32+0x6e>
	   mantissa = (mantissa | (NTH_BIT(floatingToIntValue, (22-ix))))<<1;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f1c3 0316 	rsb	r3, r3, #22
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	f003 0201 	and.w	r2, r3, #1
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4313      	orrs	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
	 for( int ix=0; ix<23; ix++)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	3301      	adds	r3, #1
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b16      	cmp	r3, #22
 800415a:	dded      	ble.n	8004138 <unpack754_32+0x50>
	 mantissa = mantissa >> 1;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	61fb      	str	r3, [r7, #28]

	 ieee754.raw.sign = sign;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004170:	72fb      	strb	r3, [r7, #11]
	 ieee754.raw.exponent = exponent;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	f362 13ce 	bfi	r3, r2, #7, #8
 800417c:	817b      	strh	r3, [r7, #10]
	 ieee754.raw.mantissa = mantissa;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f362 0316 	bfi	r3, r2, #0, #23
 800418a:	60bb      	str	r3, [r7, #8]
	 return ieee754.f;
 800418c:	68bb      	ldr	r3, [r7, #8]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3724      	adds	r7, #36	; 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <Send_Error_Status>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Status(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800419e:	23f0      	movs	r3, #240	; 0xf0
 80041a0:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80041a2:	2303      	movs	r3, #3
 80041a4:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 80041a6:	2302      	movs	r3, #2
 80041a8:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	71fb      	strb	r3, [r7, #7]
	// 0x0200: Error Status Address

	TxData[4] = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 80041b2:	2301      	movs	r3, #1
 80041b4:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2106      	movs	r1, #6
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fee0 	bl	8003f80 <crc16>
 80041c0:	4603      	mov	r3, r0
 80041c2:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80041c4:	89fb      	ldrh	r3, [r7, #14]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80041ca:	89fb      	ldrh	r3, [r7, #14]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80041d4:	1d39      	adds	r1, r7, #4
 80041d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041da:	2208      	movs	r2, #8
 80041dc:	4803      	ldr	r0, [pc, #12]	; (80041ec <Send_Error_Status+0x54>)
 80041de:	f7fe ff48 	bl	8003072 <HAL_UART_Transmit>
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000248 	.word	0x20000248

080041f0 <Receive_Error_Status>:
uint32_t Receive_Error_Status(uint16_t data)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
	if (data == 0x01)
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <Receive_Error_Status+0x16>
		return No_Error;
 8004200:	f240 73d1 	movw	r3, #2001	; 0x7d1
 8004204:	e001      	b.n	800420a <Receive_Error_Status+0x1a>
	else
		return Have_Errors;
 8004206:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <Send_Error_Code>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Code(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800421a:	23f0      	movs	r3, #240	; 0xf0
 800421c:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 800421e:	2303      	movs	r3, #3
 8004220:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 8004222:	2302      	movs	r3, #2
 8004224:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x03;
 8004226:	2303      	movs	r3, #3
 8004228:	71fb      	strb	r3, [r7, #7]
	// 0x0203: Error Code

	TxData[4] = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 800422e:	2302      	movs	r3, #2
 8004230:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	2106      	movs	r1, #6
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fea2 	bl	8003f80 <crc16>
 800423c:	4603      	mov	r3, r0
 800423e:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	b29b      	uxth	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004250:	1d39      	adds	r1, r7, #4
 8004252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004256:	2208      	movs	r2, #8
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <Send_Error_Code+0x54>)
 800425a:	f7fe ff0a 	bl	8003072 <HAL_UART_Transmit>
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000248 	.word	0x20000248

0800426c <Receive_Error_Code>:
uint32_t Receive_Error_Code(uint16_t data)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <Receive_Error_Code+0x16>
		return Status_OK;
 800427c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004280:	e01f      	b.n	80042c2 <Receive_Error_Code+0x56>
	else if (data == 0x01)
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d102      	bne.n	800428e <Receive_Error_Code+0x22>
		return Temp_Measur_Err;
 8004288:	f640 33b9 	movw	r3, #3001	; 0xbb9
 800428c:	e019      	b.n	80042c2 <Receive_Error_Code+0x56>
	else if (data == 0x02)
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d102      	bne.n	800429a <Receive_Error_Code+0x2e>
		return Hum_Measur_Err;
 8004294:	f640 33ba 	movw	r3, #3002	; 0xbba
 8004298:	e013      	b.n	80042c2 <Receive_Error_Code+0x56>
	else if (data == 0x04)
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d102      	bne.n	80042a6 <Receive_Error_Code+0x3a>
		return Humi_Sen_Fail;
 80042a0:	f640 33bb 	movw	r3, #3003	; 0xbbb
 80042a4:	e00d      	b.n	80042c2 <Receive_Error_Code+0x56>
	else if (data == 0x08)
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d102      	bne.n	80042b2 <Receive_Error_Code+0x46>
		return Capa_Re_Err;
 80042ac:	f640 33bc 	movw	r3, #3004	; 0xbbc
 80042b0:	e007      	b.n	80042c2 <Receive_Error_Code+0x56>
	else if (data == 0x10)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d102      	bne.n	80042be <Receive_Error_Code+0x52>
		return Temp_Out_Range;
 80042b8:	f640 33bd 	movw	r3, #3005	; 0xbbd
 80042bc:	e001      	b.n	80042c2 <Receive_Error_Code+0x56>
	else
		return Sensor_Heat_Err;
 80042be:	f640 33be 	movw	r3, #3006	; 0xbbe

}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <Send_Error_Temp>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Temp(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 80042d2:	23f0      	movs	r3, #240	; 0xf0
 80042d4:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80042d6:	2303      	movs	r3, #3
 80042d8:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 80042da:	2302      	movs	r3, #2
 80042dc:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x08;
 80042de:	2308      	movs	r3, #8
 80042e0:	71fb      	strb	r3, [r7, #7]
	// T measurement status

	TxData[4] = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 80042e6:	2301      	movs	r3, #1
 80042e8:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2106      	movs	r1, #6
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fe46 	bl	8003f80 <crc16>
 80042f4:	4603      	mov	r3, r0
 80042f6:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80042f8:	89fb      	ldrh	r3, [r7, #14]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004308:	1d39      	adds	r1, r7, #4
 800430a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430e:	2208      	movs	r2, #8
 8004310:	4803      	ldr	r0, [pc, #12]	; (8004320 <Send_Error_Temp+0x54>)
 8004312:	f7fe feae 	bl	8003072 <HAL_UART_Transmit>
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000248 	.word	0x20000248

08004324 <Receive_Error_Temp>:
uint32_t Receive_Error_Temp(uint16_t data)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <Receive_Error_Temp+0x16>
		return Status_OK;
 8004334:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004338:	e025      	b.n	8004386 <Receive_Error_Temp+0x62>
	else if (data == 0x01)
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <Receive_Error_Temp+0x22>
		return Measur_Not_Avai;
 8004340:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8004344:	e01f      	b.n	8004386 <Receive_Error_Temp+0x62>
	else if (data == 0x02)
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d102      	bne.n	8004352 <Receive_Error_Temp+0x2e>
		return Measur_Not_Reliable;
 800434c:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8004350:	e019      	b.n	8004386 <Receive_Error_Temp+0x62>
	else if (data == 0x04)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d102      	bne.n	800435e <Receive_Error_Temp+0x3a>
		return UnderRange;
 8004358:	f640 73a3 	movw	r3, #4003	; 0xfa3
 800435c:	e013      	b.n	8004386 <Receive_Error_Temp+0x62>
	else if (data == 0x08)
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d102      	bne.n	800436a <Receive_Error_Temp+0x46>
		return Overrange;
 8004364:	f640 73a4 	movw	r3, #4004	; 0xfa4
 8004368:	e00d      	b.n	8004386 <Receive_Error_Temp+0x62>
	else if (data == 0x20)
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b20      	cmp	r3, #32
 800436e:	d102      	bne.n	8004376 <Receive_Error_Temp+0x52>
		return Value_Locked;
 8004370:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8004374:	e007      	b.n	8004386 <Receive_Error_Temp+0x62>
	else if (data == 0x80)
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d102      	bne.n	8004382 <Receive_Error_Temp+0x5e>
		return Sensor_Failure;
 800437c:	f640 73a6 	movw	r3, #4006	; 0xfa6
 8004380:	e001      	b.n	8004386 <Receive_Error_Temp+0x62>
	else
		return Measur_Not_Ready;
 8004382:	f640 73a7 	movw	r3, #4007	; 0xfa7
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <Send_Error_RH>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_RH(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8004396:	23f0      	movs	r3, #240	; 0xf0
 8004398:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 800439a:	2303      	movs	r3, #3
 800439c:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 800439e:	2302      	movs	r3, #2
 80043a0:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x07;
 80043a2:	2307      	movs	r3, #7
 80043a4:	71fb      	strb	r3, [r7, #7]
	// RH measurement status

	TxData[4] = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 80043aa:	2301      	movs	r3, #1
 80043ac:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2106      	movs	r1, #6
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fde4 	bl	8003f80 <crc16>
 80043b8:	4603      	mov	r3, r0
 80043ba:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80043c2:	89fb      	ldrh	r3, [r7, #14]
 80043c4:	0a1b      	lsrs	r3, r3, #8
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80043cc:	1d39      	adds	r1, r7, #4
 80043ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043d2:	2208      	movs	r2, #8
 80043d4:	4803      	ldr	r0, [pc, #12]	; (80043e4 <Send_Error_RH+0x54>)
 80043d6:	f7fe fe4c 	bl	8003072 <HAL_UART_Transmit>
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000248 	.word	0x20000248

080043e8 <Receive_Error_RH>:
uint32_t Receive_Error_RH(uint16_t data)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <Receive_Error_RH+0x16>
		return Status_OK;
 80043f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80043fc:	e025      	b.n	800444a <Receive_Error_RH+0x62>
	else if (data == 0x01)
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <Receive_Error_RH+0x22>
		return Measur_Not_Avai;
 8004404:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8004408:	e01f      	b.n	800444a <Receive_Error_RH+0x62>
	else if (data == 0x02)
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d102      	bne.n	8004416 <Receive_Error_RH+0x2e>
		return Measur_Not_Reliable;
 8004410:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8004414:	e019      	b.n	800444a <Receive_Error_RH+0x62>
	else if (data == 0x04)
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b04      	cmp	r3, #4
 800441a:	d102      	bne.n	8004422 <Receive_Error_RH+0x3a>
		return UnderRange;
 800441c:	f640 73a3 	movw	r3, #4003	; 0xfa3
 8004420:	e013      	b.n	800444a <Receive_Error_RH+0x62>
	else if (data == 0x08)
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d102      	bne.n	800442e <Receive_Error_RH+0x46>
		return Overrange;
 8004428:	f640 73a4 	movw	r3, #4004	; 0xfa4
 800442c:	e00d      	b.n	800444a <Receive_Error_RH+0x62>
	else if (data == 0x20)
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	2b20      	cmp	r3, #32
 8004432:	d102      	bne.n	800443a <Receive_Error_RH+0x52>
		return Value_Locked;
 8004434:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8004438:	e007      	b.n	800444a <Receive_Error_RH+0x62>
	else if (data == 0x80)
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d102      	bne.n	8004446 <Receive_Error_RH+0x5e>
		return Sensor_Failure;
 8004440:	f640 73a6 	movw	r3, #4006	; 0xfa6
 8004444:	e001      	b.n	800444a <Receive_Error_RH+0x62>
	else
		return Measur_Not_Ready;
 8004446:	f640 73a7 	movw	r3, #4007	; 0xfa7
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <Send_Error_Device>:
/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Device(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800445a:	23f0      	movs	r3, #240	; 0xf0
 800445c:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 800445e:	2303      	movs	r3, #3
 8004460:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 8004462:	2302      	movs	r3, #2
 8004464:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x0A;
 8004466:	230a      	movs	r3, #10
 8004468:	71fb      	strb	r3, [r7, #7]
	//Error Device

	TxData[4] = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 800446e:	2301      	movs	r3, #1
 8004470:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	2106      	movs	r1, #6
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fd82 	bl	8003f80 <crc16>
 800447c:	4603      	mov	r3, r0
 800447e:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004486:	89fb      	ldrh	r3, [r7, #14]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	b29b      	uxth	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004490:	1d39      	adds	r1, r7, #4
 8004492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004496:	2208      	movs	r2, #8
 8004498:	4803      	ldr	r0, [pc, #12]	; (80044a8 <Send_Error_Device+0x54>)
 800449a:	f7fe fdea 	bl	8003072 <HAL_UART_Transmit>
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000248 	.word	0x20000248

080044ac <Receive_Error_Device>:
uint32_t Receive_Error_Device(uint16_t data)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <Receive_Error_Device+0x16>
		return Status_OK;
 80044bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80044c0:	e019      	b.n	80044f6 <Receive_Error_Device+0x4a>
	else if (data == 0x01)
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d102      	bne.n	80044ce <Receive_Error_Device+0x22>
		return Need_Maintance;
 80044c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80044cc:	e013      	b.n	80044f6 <Receive_Error_Device+0x4a>
	else if (data == 0x02)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d102      	bne.n	80044da <Receive_Error_Device+0x2e>
		return Recover_Auto;
 80044d4:	f241 3389 	movw	r3, #5001	; 0x1389
 80044d8:	e00d      	b.n	80044f6 <Receive_Error_Device+0x4a>
	else if (data == 0x04)
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d102      	bne.n	80044e6 <Receive_Error_Device+0x3a>
		return Warning;
 80044e0:	f241 338a 	movw	r3, #5002	; 0x138a
 80044e4:	e007      	b.n	80044f6 <Receive_Error_Device+0x4a>
	else if (data == 0x08)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d102      	bne.n	80044f2 <Receive_Error_Device+0x46>
		return Notification;
 80044ec:	f241 338b 	movw	r3, #5003	; 0x138b
 80044f0:	e001      	b.n	80044f6 <Receive_Error_Device+0x4a>
	else
		return Calib_Mode_Active;
 80044f2:	f241 338c 	movw	r3, #5004	; 0x138c
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <Read_Temp>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Read_Temp(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8004506:	23f0      	movs	r3, #240	; 0xf0
 8004508:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 800450a:	2303      	movs	r3, #3
 800450c:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x02;
 8004512:	2302      	movs	r3, #2
 8004514:	71fb      	strb	r3, [r7, #7]
	//  Temp Address

	TxData[4] = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 800451a:	2302      	movs	r3, #2
 800451c:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	2106      	movs	r1, #6
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fd2c 	bl	8003f80 <crc16>
 8004528:	4603      	mov	r3, r0
 800452a:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	b29b      	uxth	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 800453c:	1d39      	adds	r1, r7, #4
 800453e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004542:	2208      	movs	r2, #8
 8004544:	4803      	ldr	r0, [pc, #12]	; (8004554 <Read_Temp+0x54>)
 8004546:	f7fe fd94 	bl	8003072 <HAL_UART_Transmit>
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000248 	.word	0x20000248

08004558 <Read_Water>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Read_Water(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800455e:	23f0      	movs	r3, #240	; 0xf0
 8004560:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8004562:	2303      	movs	r3, #3
 8004564:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x22;
 800456a:	2322      	movs	r3, #34	; 0x22
 800456c:	71fb      	strb	r3, [r7, #7]
	// Ham luong nuoc trong dau

	TxData[4] = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 8004572:	2302      	movs	r3, #2
 8004574:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	2106      	movs	r1, #6
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fd00 	bl	8003f80 <crc16>
 8004580:	4603      	mov	r3, r0
 8004582:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	b29b      	uxth	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004594:	1d39      	adds	r1, r7, #4
 8004596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459a:	2208      	movs	r2, #8
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <Read_Water+0x54>)
 800459e:	f7fe fd68 	bl	8003072 <HAL_UART_Transmit>
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000248 	.word	0x20000248

080045b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b6:	f3ef 8305 	mrs	r3, IPSR
 80045ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80045bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c2:	f3ef 8310 	mrs	r3, PRIMASK
 80045c6:	607b      	str	r3, [r7, #4]
  return(result);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <osKernelInitialize+0x32>
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <osKernelInitialize+0x60>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d109      	bne.n	80045ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045d6:	f3ef 8311 	mrs	r3, BASEPRI
 80045da:	603b      	str	r3, [r7, #0]
  return(result);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045e2:	f06f 0305 	mvn.w	r3, #5
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e00c      	b.n	8004604 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <osKernelInitialize+0x60>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <osKernelInitialize+0x60>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e002      	b.n	8004604 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004604:	68fb      	ldr	r3, [r7, #12]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	200003a0 	.word	0x200003a0

08004614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461a:	f3ef 8305 	mrs	r3, IPSR
 800461e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004620:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
 800462a:	607b      	str	r3, [r7, #4]
  return(result);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <osKernelStart+0x32>
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <osKernelStart+0x64>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d109      	bne.n	800464e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800463a:	f3ef 8311 	mrs	r3, BASEPRI
 800463e:	603b      	str	r3, [r7, #0]
  return(result);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004646:	f06f 0305 	mvn.w	r3, #5
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e00e      	b.n	800466c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <osKernelStart+0x64>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <osKernelStart+0x64>)
 8004658:	2202      	movs	r2, #2
 800465a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800465c:	f001 fc58 	bl	8005f10 <vTaskStartScheduler>
      stat = osOK;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e002      	b.n	800466c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
 800466a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	200003a0 	.word	0x200003a0

0800467c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b092      	sub	sp, #72	; 0x48
 8004680:	af04      	add	r7, sp, #16
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468c:	f3ef 8305 	mrs	r3, IPSR
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 8094 	bne.w	80047c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	623b      	str	r3, [r7, #32]
  return(result);
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 808d 	bne.w	80047c2 <osThreadNew+0x146>
 80046a8:	4b48      	ldr	r3, [pc, #288]	; (80047cc <osThreadNew+0x150>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d106      	bne.n	80046be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 8082 	bne.w	80047c2 <osThreadNew+0x146>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d07e      	beq.n	80047c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80046c8:	2318      	movs	r3, #24
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80046cc:	2300      	movs	r3, #0
 80046ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80046d0:	f107 031b 	add.w	r3, r7, #27
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80046d6:	f04f 33ff 	mov.w	r3, #4294967295
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d045      	beq.n	800476e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <osThreadNew+0x74>
        name = attr->name;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <osThreadNew+0x9a>
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b38      	cmp	r3, #56	; 0x38
 8004708:	d805      	bhi.n	8004716 <osThreadNew+0x9a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <osThreadNew+0x9e>
        return (NULL);
 8004716:	2300      	movs	r3, #0
 8004718:	e054      	b.n	80047c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <osThreadNew+0xd4>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2bbb      	cmp	r3, #187	; 0xbb
 8004738:	d90a      	bls.n	8004750 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800473e:	2b00      	cmp	r3, #0
 8004740:	d006      	beq.n	8004750 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <osThreadNew+0xd4>
        mem = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
 800474e:	e010      	b.n	8004772 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10c      	bne.n	8004772 <osThreadNew+0xf6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d108      	bne.n	8004772 <osThreadNew+0xf6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <osThreadNew+0xf6>
          mem = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
 800476c:	e001      	b.n	8004772 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	2b01      	cmp	r3, #1
 8004776:	d110      	bne.n	800479a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004780:	9202      	str	r2, [sp, #8]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f001 f9da 	bl	8005b48 <xTaskCreateStatic>
 8004794:	4603      	mov	r3, r0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e013      	b.n	80047c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d110      	bne.n	80047c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 fa24 	bl	8005c00 <xTaskCreate>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <osThreadNew+0x146>
          hTask = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047c2:	697b      	ldr	r3, [r7, #20]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3738      	adds	r7, #56	; 0x38
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200003a0 	.word	0x200003a0

080047d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
 80047dc:	613b      	str	r3, [r7, #16]
  return(result);
 80047de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
 80047e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <osDelay+0x34>
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <osDelay+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d109      	bne.n	800480c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047f8:	f3ef 8311 	mrs	r3, BASEPRI
 80047fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <osDelay+0x3c>
    stat = osErrorISR;
 8004804:	f06f 0305 	mvn.w	r3, #5
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e007      	b.n	800481c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 fb46 	bl	8005ea8 <vTaskDelay>
    }
  }

  return (stat);
 800481c:	697b      	ldr	r3, [r7, #20]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200003a0 	.word	0x200003a0

0800482c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b08c      	sub	sp, #48	; 0x30
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483c:	f3ef 8305 	mrs	r3, IPSR
 8004840:	61bb      	str	r3, [r7, #24]
  return(result);
 8004842:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 8086 	bne.w	8004956 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484a:	f3ef 8310 	mrs	r3, PRIMASK
 800484e:	617b      	str	r3, [r7, #20]
  return(result);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d17f      	bne.n	8004956 <osSemaphoreNew+0x12a>
 8004856:	4b42      	ldr	r3, [pc, #264]	; (8004960 <osSemaphoreNew+0x134>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d105      	bne.n	800486a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800485e:	f3ef 8311 	mrs	r3, BASEPRI
 8004862:	613b      	str	r3, [r7, #16]
  return(result);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d175      	bne.n	8004956 <osSemaphoreNew+0x12a>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d072      	beq.n	8004956 <osSemaphoreNew+0x12a>
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d86e      	bhi.n	8004956 <osSemaphoreNew+0x12a>
    mem = -1;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d006      	beq.n	800489a <osSemaphoreNew+0x6e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b4f      	cmp	r3, #79	; 0x4f
 8004892:	d902      	bls.n	800489a <osSemaphoreNew+0x6e>
        mem = 1;
 8004894:	2301      	movs	r3, #1
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	e00c      	b.n	80048b4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d108      	bne.n	80048b4 <osSemaphoreNew+0x88>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <osSemaphoreNew+0x88>
          mem = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	e001      	b.n	80048b4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d04c      	beq.n	8004956 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d128      	bne.n	8004914 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10a      	bne.n	80048de <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2203      	movs	r2, #3
 80048ce:	9200      	str	r2, [sp, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2100      	movs	r1, #0
 80048d4:	2001      	movs	r0, #1
 80048d6:	f000 fa15 	bl	8004d04 <xQueueGenericCreateStatic>
 80048da:	6278      	str	r0, [r7, #36]	; 0x24
 80048dc:	e005      	b.n	80048ea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80048de:	2203      	movs	r2, #3
 80048e0:	2100      	movs	r1, #0
 80048e2:	2001      	movs	r0, #1
 80048e4:	f000 fa85 	bl	8004df2 <xQueueGenericCreate>
 80048e8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d022      	beq.n	8004936 <osSemaphoreNew+0x10a>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048f6:	2300      	movs	r3, #0
 80048f8:	2200      	movs	r2, #0
 80048fa:	2100      	movs	r1, #0
 80048fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048fe:	f000 fb43 	bl	8004f88 <xQueueGenericSend>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d016      	beq.n	8004936 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800490a:	f000 ff4d 	bl	80057a8 <vQueueDelete>
            hSemaphore = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	e010      	b.n	8004936 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d108      	bne.n	800492c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	461a      	mov	r2, r3
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fac6 	bl	8004eb4 <xQueueCreateCountingSemaphoreStatic>
 8004928:	6278      	str	r0, [r7, #36]	; 0x24
 800492a:	e004      	b.n	8004936 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 faf7 	bl	8004f22 <xQueueCreateCountingSemaphore>
 8004934:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00c      	beq.n	8004956 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <osSemaphoreNew+0x11e>
          name = attr->name;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e001      	b.n	800494e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800494e:	69f9      	ldr	r1, [r7, #28]
 8004950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004952:	f001 f873 	bl	8005a3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004958:	4618      	mov	r0, r3
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200003a0 	.word	0x200003a0

08004964 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004974:	f3ef 8305 	mrs	r3, IPSR
 8004978:	61bb      	str	r3, [r7, #24]
  return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800497c:	2b00      	cmp	r3, #0
 800497e:	d16f      	bne.n	8004a60 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004980:	f3ef 8310 	mrs	r3, PRIMASK
 8004984:	617b      	str	r3, [r7, #20]
  return(result);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d169      	bne.n	8004a60 <osMessageQueueNew+0xfc>
 800498c:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <osMessageQueueNew+0x108>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d105      	bne.n	80049a0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004994:	f3ef 8311 	mrs	r3, BASEPRI
 8004998:	613b      	str	r3, [r7, #16]
  return(result);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d15f      	bne.n	8004a60 <osMessageQueueNew+0xfc>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d05c      	beq.n	8004a60 <osMessageQueueNew+0xfc>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d059      	beq.n	8004a60 <osMessageQueueNew+0xfc>
    mem = -1;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d029      	beq.n	8004a0c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <osMessageQueueNew+0x82>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b4f      	cmp	r3, #79	; 0x4f
 80049c6:	d90e      	bls.n	80049e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <osMessageQueueNew+0x82>
        mem = 1;
 80049e0:	2301      	movs	r3, #1
 80049e2:	623b      	str	r3, [r7, #32]
 80049e4:	e014      	b.n	8004a10 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d110      	bne.n	8004a10 <osMessageQueueNew+0xac>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10c      	bne.n	8004a10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <osMessageQueueNew+0xac>
          mem = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	e001      	b.n	8004a10 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d10b      	bne.n	8004a2e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	9100      	str	r1, [sp, #0]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f96d 	bl	8004d04 <xQueueGenericCreateStatic>
 8004a2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a2c:	e008      	b.n	8004a40 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004a34:	2200      	movs	r2, #0
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f9da 	bl	8004df2 <xQueueGenericCreate>
 8004a3e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	e001      	b.n	8004a58 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a5c:	f000 ffee 	bl	8005a3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200003a0 	.word	0x200003a0

08004a70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a06      	ldr	r2, [pc, #24]	; (8004a98 <vApplicationGetIdleTaskMemory+0x28>)
 8004a80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <vApplicationGetIdleTaskMemory+0x2c>)
 8004a86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	601a      	str	r2, [r3, #0]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	200003a4 	.word	0x200003a4
 8004a9c:	20000460 	.word	0x20000460

08004aa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a07      	ldr	r2, [pc, #28]	; (8004acc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ab0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a06      	ldr	r2, [pc, #24]	; (8004ad0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ab6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000660 	.word	0x20000660
 8004ad0:	2000071c 	.word	0x2000071c

08004ad4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f103 0208 	add.w	r2, r3, #8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f103 0208 	add.w	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f103 0208 	add.w	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr

08004b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d103      	bne.n	8004b90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e00c      	b.n	8004baa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3308      	adds	r3, #8
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e002      	b.n	8004b9e <vListInsert+0x2e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d2f6      	bcs.n	8004b98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6852      	ldr	r2, [r2, #4]
 8004c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d103      	bne.n	8004c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1e5a      	subs	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
	...

08004c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c5e:	f002 fba5 	bl	80073ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	441a      	add	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d114      	bne.n	8004cde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01a      	beq.n	8004cf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3310      	adds	r3, #16
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 fbc1 	bl	8006448 <xTaskRemoveFromEventList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d012      	beq.n	8004cf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <xQueueGenericReset+0xcc>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	e009      	b.n	8004cf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fef6 	bl	8004ad4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fef1 	bl	8004ad4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cf2:	f002 fb8b 	bl	800740c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cf6:	2301      	movs	r3, #1
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08e      	sub	sp, #56	; 0x38
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <xQueueGenericCreateStatic+0x52>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <xQueueGenericCreateStatic+0x56>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueGenericCreateStatic+0x58>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	623b      	str	r3, [r7, #32]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <xQueueGenericCreateStatic+0x7e>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <xQueueGenericCreateStatic+0x82>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <xQueueGenericCreateStatic+0x84>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	61fb      	str	r3, [r7, #28]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004da2:	2350      	movs	r3, #80	; 0x50
 8004da4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b50      	cmp	r3, #80	; 0x50
 8004daa:	d00a      	beq.n	8004dc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61bb      	str	r3, [r7, #24]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f843 	bl	8004e6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3730      	adds	r7, #48	; 0x30
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b08a      	sub	sp, #40	; 0x28
 8004df6:	af02      	add	r7, sp, #8
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	613b      	str	r3, [r7, #16]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	e004      	b.n	8004e32 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3350      	adds	r3, #80	; 0x50
 8004e36:	4618      	mov	r0, r3
 8004e38:	f002 fbb8 	bl	80075ac <pvPortMalloc>
 8004e3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00f      	beq.n	8004e64 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	3350      	adds	r3, #80	; 0x50
 8004e48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e52:	79fa      	ldrb	r2, [r7, #7]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f805 	bl	8004e6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e64:	69bb      	ldr	r3, [r7, #24]
	}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e002      	b.n	8004e90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f7ff fec8 	bl	8004c34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	61bb      	str	r3, [r7, #24]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d90a      	bls.n	8004efa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	617b      	str	r3, [r7, #20]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004efa:	2302      	movs	r3, #2
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2100      	movs	r1, #0
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fefd 	bl	8004d04 <xQueueGenericCreateStatic>
 8004f0a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f18:	69fb      	ldr	r3, [r7, #28]
	}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	613b      	str	r3, [r7, #16]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d90a      	bls.n	8004f66 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f66:	2202      	movs	r2, #2
 8004f68:	2100      	movs	r1, #0
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ff41 	bl	8004df2 <xQueueGenericCreate>
 8004f70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f7e:	697b      	ldr	r3, [r7, #20]
	}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08e      	sub	sp, #56	; 0x38
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f96:	2300      	movs	r3, #0
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <xQueueGenericSend+0x32>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <xQueueGenericSend+0x40>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <xQueueGenericSend+0x44>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <xQueueGenericSend+0x46>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <xQueueGenericSend+0x60>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d103      	bne.n	8004ff6 <xQueueGenericSend+0x6e>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <xQueueGenericSend+0x72>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <xQueueGenericSend+0x74>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <xQueueGenericSend+0x8e>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	623b      	str	r3, [r7, #32]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005016:	f001 fbdd 	bl	80067d4 <xTaskGetSchedulerState>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <xQueueGenericSend+0x9e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <xQueueGenericSend+0xa2>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <xQueueGenericSend+0xa4>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <xQueueGenericSend+0xbe>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	61fb      	str	r3, [r7, #28]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005046:	f002 f9b1 	bl	80073ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <xQueueGenericSend+0xd4>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d129      	bne.n	80050b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005062:	f000 fbdb 	bl	800581c <prvCopyDataToQueue>
 8005066:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	3324      	adds	r3, #36	; 0x24
 8005074:	4618      	mov	r0, r3
 8005076:	f001 f9e7 	bl	8006448 <xTaskRemoveFromEventList>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005080:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <xQueueGenericSend+0x1f8>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	e00a      	b.n	80050a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <xQueueGenericSend+0x1f8>)
 800509a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050a8:	f002 f9b0 	bl	800740c <vPortExitCritical>
				return pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e063      	b.n	8005178 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050b6:	f002 f9a9 	bl	800740c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e05c      	b.n	8005178 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 fa21 	bl	8006510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d2:	f002 f99b 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050d6:	f000 ff8b 	bl	8005ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050da:	f002 f967 	bl	80073ac <vPortEnterCritical>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d103      	bne.n	80050f4 <xQueueGenericSend+0x16c>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050fa:	b25b      	sxtb	r3, r3
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d103      	bne.n	800510a <xQueueGenericSend+0x182>
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510a:	f002 f97f 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800510e:	1d3a      	adds	r2, r7, #4
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fa10 	bl	800653c <xTaskCheckForTimeOut>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d124      	bne.n	800516c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005124:	f000 fc72 	bl	8005a0c <prvIsQueueFull>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	3310      	adds	r3, #16
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f936 	bl	80063a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800513c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800513e:	f000 fbfd 	bl	800593c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005142:	f000 ff63 	bl	800600c <xTaskResumeAll>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	f47f af7c 	bne.w	8005046 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <xQueueGenericSend+0x1f8>)
 8005150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	e772      	b.n	8005046 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005162:	f000 fbeb 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005166:	f000 ff51 	bl	800600c <xTaskResumeAll>
 800516a:	e76c      	b.n	8005046 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800516c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800516e:	f000 fbe5 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005172:	f000 ff4b 	bl	800600c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005176:	2300      	movs	r3, #0
		}
	}
}
 8005178:	4618      	mov	r0, r3
 800517a:	3738      	adds	r7, #56	; 0x38
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08e      	sub	sp, #56	; 0x38
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d103      	bne.n	80051c0 <xQueueGenericSendFromISR+0x3c>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <xQueueGenericSendFromISR+0x40>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <xQueueGenericSendFromISR+0x42>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	623b      	str	r3, [r7, #32]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d103      	bne.n	80051ee <xQueueGenericSendFromISR+0x6a>
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <xQueueGenericSendFromISR+0x6e>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueGenericSendFromISR+0x70>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61fb      	str	r3, [r7, #28]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800520e:	f002 f98f 	bl	8007530 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005212:	f3ef 8211 	mrs	r2, BASEPRI
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	61ba      	str	r2, [r7, #24]
 8005228:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800522a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <xQueueGenericSendFromISR+0xbc>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d12c      	bne.n	800529a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005250:	f000 fae4 	bl	800581c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005254:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d112      	bne.n	8005284 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	3324      	adds	r3, #36	; 0x24
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f8ec 	bl	8006448 <xTaskRemoveFromEventList>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00e      	beq.n	8005294 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e007      	b.n	8005294 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005284:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005288:	3301      	adds	r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	b25a      	sxtb	r2, r3
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005294:	2301      	movs	r3, #1
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005298:	e001      	b.n	800529e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3738      	adds	r7, #56	; 0x38
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08e      	sub	sp, #56	; 0x38
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueGiveFromISR+0x2a>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	623b      	str	r3, [r7, #32]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <xQueueGiveFromISR+0x48>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	61fb      	str	r3, [r7, #28]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <xQueueGiveFromISR+0x58>
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <xQueueGiveFromISR+0x5c>
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <xQueueGiveFromISR+0x5e>
 8005310:	2300      	movs	r3, #0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <xQueueGiveFromISR+0x78>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	61bb      	str	r3, [r7, #24]
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800532c:	f002 f900 	bl	8007530 <vPortValidateInterruptPriority>
	__asm volatile
 8005330:	f3ef 8211 	mrs	r2, BASEPRI
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	617a      	str	r2, [r7, #20]
 8005346:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005348:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	429a      	cmp	r2, r3
 800535a:	d22b      	bcs.n	80053b4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800536e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d112      	bne.n	800539e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d016      	beq.n	80053ae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	3324      	adds	r3, #36	; 0x24
 8005384:	4618      	mov	r0, r3
 8005386:	f001 f85f 	bl	8006448 <xTaskRemoveFromEventList>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00e      	beq.n	80053ae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e007      	b.n	80053ae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800539e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053a2:	3301      	adds	r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	b25a      	sxtb	r2, r3
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053ae:	2301      	movs	r3, #1
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
 80053b2:	e001      	b.n	80053b8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f383 8811 	msr	BASEPRI, r3
}
 80053c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3738      	adds	r7, #56	; 0x38
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08c      	sub	sp, #48	; 0x30
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <xQueueReceive+0x30>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	623b      	str	r3, [r7, #32]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <xQueueReceive+0x3e>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueReceive+0x42>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueReceive+0x44>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueReceive+0x5e>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800542e:	f001 f9d1 	bl	80067d4 <xTaskGetSchedulerState>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <xQueueReceive+0x6e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <xQueueReceive+0x72>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <xQueueReceive+0x74>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xQueueReceive+0x8e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61bb      	str	r3, [r7, #24]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800545e:	f001 ffa5 	bl	80073ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01f      	beq.n	80054ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005472:	f000 fa3d 	bl	80058f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	3310      	adds	r3, #16
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ffdc 	bl	8006448 <xTaskRemoveFromEventList>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005496:	4b3d      	ldr	r3, [pc, #244]	; (800558c <xQueueReceive+0x1bc>)
 8005498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054a6:	f001 ffb1 	bl	800740c <vPortExitCritical>
				return pdPASS;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e069      	b.n	8005582 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054b4:	f001 ffaa 	bl	800740c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e062      	b.n	8005582 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c2:	f107 0310 	add.w	r3, r7, #16
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 f822 	bl	8006510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d0:	f001 ff9c 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d4:	f000 fd8c 	bl	8005ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d8:	f001 ff68 	bl	80073ac <vPortEnterCritical>
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueReceive+0x122>
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d103      	bne.n	8005508 <xQueueReceive+0x138>
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005508:	f001 ff80 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550c:	1d3a      	adds	r2, r7, #4
 800550e:	f107 0310 	add.w	r3, r7, #16
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f811 	bl	800653c <xTaskCheckForTimeOut>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d123      	bne.n	8005568 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005522:	f000 fa5d 	bl	80059e0 <prvIsQueueEmpty>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d017      	beq.n	800555c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	3324      	adds	r3, #36	; 0x24
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f000 ff37 	bl	80063a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	f000 f9fe 	bl	800593c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005540:	f000 fd64 	bl	800600c <xTaskResumeAll>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d189      	bne.n	800545e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <xQueueReceive+0x1bc>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	e780      	b.n	800545e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800555c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555e:	f000 f9ed 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005562:	f000 fd53 	bl	800600c <xTaskResumeAll>
 8005566:	e77a      	b.n	800545e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	f000 f9e7 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800556e:	f000 fd4d 	bl	800600c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005574:	f000 fa34 	bl	80059e0 <prvIsQueueEmpty>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	f43f af6f 	beq.w	800545e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005582:	4618      	mov	r0, r3
 8005584:	3730      	adds	r7, #48	; 0x30
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800559a:	2300      	movs	r3, #0
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	623b      	str	r3, [r7, #32]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	61fb      	str	r3, [r7, #28]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055e0:	f001 f8f8 	bl	80067d4 <xTaskGetSchedulerState>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <xQueueSemaphoreTake+0x60>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <xQueueSemaphoreTake+0x64>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <xQueueSemaphoreTake+0x66>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	61bb      	str	r3, [r7, #24]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005610:	f001 fecc 	bl	80073ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	d024      	beq.n	800566a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	1e5a      	subs	r2, r3, #1
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005630:	f001 fa50 	bl	8006ad4 <pvTaskIncrementMutexHeldCount>
 8005634:	4602      	mov	r2, r0
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00f      	beq.n	8005662 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	3310      	adds	r3, #16
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fefe 	bl	8006448 <xTaskRemoveFromEventList>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005652:	4b54      	ldr	r3, [pc, #336]	; (80057a4 <xQueueSemaphoreTake+0x214>)
 8005654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005662:	f001 fed3 	bl	800740c <vPortExitCritical>
				return pdPASS;
 8005666:	2301      	movs	r3, #1
 8005668:	e097      	b.n	800579a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d111      	bne.n	8005694 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	617b      	str	r3, [r7, #20]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800568c:	f001 febe 	bl	800740c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005690:	2300      	movs	r3, #0
 8005692:	e082      	b.n	800579a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800569a:	f107 030c 	add.w	r3, r7, #12
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 ff36 	bl	8006510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056a8:	f001 feb0 	bl	800740c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056ac:	f000 fca0 	bl	8005ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056b0:	f001 fe7c 	bl	80073ac <vPortEnterCritical>
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ba:	b25b      	sxtb	r3, r3
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d103      	bne.n	80056ca <xQueueSemaphoreTake+0x13a>
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d0:	b25b      	sxtb	r3, r3
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d103      	bne.n	80056e0 <xQueueSemaphoreTake+0x150>
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e0:	f001 fe94 	bl	800740c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056e4:	463a      	mov	r2, r7
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 ff25 	bl	800653c <xTaskCheckForTimeOut>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d132      	bne.n	800575e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056fa:	f000 f971 	bl	80059e0 <prvIsQueueEmpty>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d026      	beq.n	8005752 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800570c:	f001 fe4e 	bl	80073ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	4618      	mov	r0, r3
 8005716:	f001 f87b 	bl	8006810 <xTaskPriorityInherit>
 800571a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800571c:	f001 fe76 	bl	800740c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fe3d 	bl	80063a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800572e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005730:	f000 f904 	bl	800593c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005734:	f000 fc6a 	bl	800600c <xTaskResumeAll>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	f47f af68 	bne.w	8005610 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005740:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <xQueueSemaphoreTake+0x214>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	e75e      	b.n	8005610 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005754:	f000 f8f2 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005758:	f000 fc58 	bl	800600c <xTaskResumeAll>
 800575c:	e758      	b.n	8005610 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800575e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005760:	f000 f8ec 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005764:	f000 fc52 	bl	800600c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800576a:	f000 f939 	bl	80059e0 <prvIsQueueEmpty>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	f43f af4d 	beq.w	8005610 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800577c:	f001 fe16 	bl	80073ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005782:	f000 f834 	bl	80057ee <prvGetDisinheritPriorityAfterTimeout>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800578e:	4618      	mov	r0, r3
 8005790:	f001 f91a 	bl	80069c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005794:	f001 fe3a 	bl	800740c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800579a:	4618      	mov	r0, r3
 800579c:	3738      	adds	r7, #56	; 0x38
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <vQueueDelete+0x28>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60bb      	str	r3, [r7, #8]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f95b 	bl	8005a8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f001 ffa7 	bl	8007734 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d006      	beq.n	800580c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e001      	b.n	8005810 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005810:	68fb      	ldr	r3, [r7, #12]
	}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d14d      	bne.n	80058de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f850 	bl	80068ec <xTaskPriorityDisinherit>
 800584c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e043      	b.n	80058de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d119      	bne.n	8005890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6898      	ldr	r0, [r3, #8]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	461a      	mov	r2, r3
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	f002 f99b 	bl	8007ba2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d32b      	bcc.n	80058de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	e026      	b.n	80058de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68d8      	ldr	r0, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	f002 f981 	bl	8007ba2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	425b      	negs	r3, r3
 80058aa:	441a      	add	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	425b      	negs	r3, r3
 80058c6:	441a      	add	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d105      	bne.n	80058de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3b01      	subs	r3, #1
 80058dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058e6:	697b      	ldr	r3, [r7, #20]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d303      	bcc.n	8005924 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68d9      	ldr	r1, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	461a      	mov	r2, r3
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	f002 f937 	bl	8007ba2 <memcpy>
	}
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005944:	f001 fd32 	bl	80073ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005950:	e011      	b.n	8005976 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d012      	beq.n	8005980 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3324      	adds	r3, #36	; 0x24
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fd72 	bl	8006448 <xTaskRemoveFromEventList>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800596a:	f000 fe49 	bl	8006600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	3b01      	subs	r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dce9      	bgt.n	8005952 <prvUnlockQueue+0x16>
 800597e:	e000      	b.n	8005982 <prvUnlockQueue+0x46>
					break;
 8005980:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fd3f 	bl	800740c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800598e:	f001 fd0d 	bl	80073ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005998:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599a:	e011      	b.n	80059c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3310      	adds	r3, #16
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fd4d 	bl	8006448 <xTaskRemoveFromEventList>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059b4:	f000 fe24 	bl	8006600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dce9      	bgt.n	800599c <prvUnlockQueue+0x60>
 80059c8:	e000      	b.n	80059cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	22ff      	movs	r2, #255	; 0xff
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059d4:	f001 fd1a 	bl	800740c <vPortExitCritical>
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e8:	f001 fce0 	bl	80073ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e001      	b.n	80059fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059fe:	f001 fd05 	bl	800740c <vPortExitCritical>

	return xReturn;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a14:	f001 fcca 	bl	80073ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d102      	bne.n	8005a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a24:	2301      	movs	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e001      	b.n	8005a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f001 fced 	bl	800740c <vPortExitCritical>

	return xReturn;
 8005a32:	68fb      	ldr	r3, [r7, #12]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e014      	b.n	8005a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a4c:	4a0e      	ldr	r2, [pc, #56]	; (8005a88 <vQueueAddToRegistry+0x4c>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a58:	490b      	ldr	r1, [pc, #44]	; (8005a88 <vQueueAddToRegistry+0x4c>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a62:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <vQueueAddToRegistry+0x4c>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a6e:	e006      	b.n	8005a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d9e7      	bls.n	8005a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr
 8005a88:	20000b1c 	.word	0x20000b1c

08005a8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e016      	b.n	8005ac8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <vQueueUnregisterQueue+0x50>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d10b      	bne.n	8005ac2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005aaa:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <vQueueUnregisterQueue+0x50>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2100      	movs	r1, #0
 8005ab0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ab4:	4a09      	ldr	r2, [pc, #36]	; (8005adc <vQueueUnregisterQueue+0x50>)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	2200      	movs	r2, #0
 8005abe:	605a      	str	r2, [r3, #4]
				break;
 8005ac0:	e006      	b.n	8005ad0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b07      	cmp	r3, #7
 8005acc:	d9e5      	bls.n	8005a9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ace:	bf00      	nop
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000b1c 	.word	0x20000b1c

08005ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005af0:	f001 fc5c 	bl	80073ac <vPortEnterCritical>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d103      	bne.n	8005b0a <vQueueWaitForMessageRestricted+0x2a>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d103      	bne.n	8005b20 <vQueueWaitForMessageRestricted+0x40>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b20:	f001 fc74 	bl	800740c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3324      	adds	r3, #36	; 0x24
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fc5b 	bl	80063f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b3a:	6978      	ldr	r0, [r7, #20]
 8005b3c:	f7ff fefe 	bl	800593c <prvUnlockQueue>
	}
 8005b40:	bf00      	nop
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08e      	sub	sp, #56	; 0x38
 8005b4c:	af04      	add	r7, sp, #16
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	623b      	str	r3, [r7, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <xTaskCreateStatic+0x46>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	61fb      	str	r3, [r7, #28]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b8e:	23bc      	movs	r3, #188	; 0xbc
 8005b90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2bbc      	cmp	r3, #188	; 0xbc
 8005b96:	d00a      	beq.n	8005bae <xTaskCreateStatic+0x66>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61bb      	str	r3, [r7, #24]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01e      	beq.n	8005bf2 <xTaskCreateStatic+0xaa>
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01b      	beq.n	8005bf2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9303      	str	r3, [sp, #12]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	9302      	str	r3, [sp, #8]
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f851 	bl	8005c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bec:	f000 f8ec 	bl	8005dc8 <prvAddNewTaskToReadyList>
 8005bf0:	e001      	b.n	8005bf6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bf6:	697b      	ldr	r3, [r7, #20]
	}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	; 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	; 0x30
 8005c04:	af04      	add	r7, sp, #16
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fcc9 	bl	80075ac <pvPortMalloc>
 8005c1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00e      	beq.n	8005c40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005c22:	20bc      	movs	r0, #188	; 0xbc
 8005c24:	f001 fcc2 	bl	80075ac <pvPortMalloc>
 8005c28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
 8005c36:	e005      	b.n	8005c44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c38:	6978      	ldr	r0, [r7, #20]
 8005c3a:	f001 fd7b 	bl	8007734 <vPortFree>
 8005c3e:	e001      	b.n	8005c44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	2300      	movs	r3, #0
 8005c56:	9303      	str	r3, [sp, #12]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	9302      	str	r3, [sp, #8]
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f80f 	bl	8005c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c6e:	69f8      	ldr	r0, [r7, #28]
 8005c70:	f000 f8aa 	bl	8005dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c74:	2301      	movs	r3, #1
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e002      	b.n	8005c80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c80:	69bb      	ldr	r3, [r7, #24]
	}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	21a5      	movs	r1, #165	; 0xa5
 8005ca6:	f001 ff8a 	bl	8007bbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f023 0307 	bic.w	r3, r3, #7
 8005cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	e012      	b.n	8005d10 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	7819      	ldrb	r1, [r3, #0]
 8005cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3334      	adds	r3, #52	; 0x34
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d006      	beq.n	8005d18 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d9e9      	bls.n	8005cea <prvInitialiseNewTask+0x5e>
 8005d16:	e000      	b.n	8005d1a <prvInitialiseNewTask+0x8e>
		{
			break;
 8005d18:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	2b37      	cmp	r3, #55	; 0x37
 8005d26:	d901      	bls.n	8005d2c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d28:	2337      	movs	r3, #55	; 0x37
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fee5 	bl	8004b12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	3318      	adds	r3, #24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe fee0 	bl	8004b12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	3354      	adds	r3, #84	; 0x54
 8005d7c:	2260      	movs	r2, #96	; 0x60
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 ff1c 	bl	8007bbe <memset>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	4a0c      	ldr	r2, [pc, #48]	; (8005dbc <prvInitialiseNewTask+0x130>)
 8005d8a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <prvInitialiseNewTask+0x134>)
 8005d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <prvInitialiseNewTask+0x138>)
 8005d96:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	69b8      	ldr	r0, [r7, #24]
 8005d9e:	f001 fa13 	bl	80071c8 <pxPortInitialiseStack>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db4:	bf00      	nop
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	0800c644 	.word	0x0800c644
 8005dc0:	0800c664 	.word	0x0800c664
 8005dc4:	0800c624 	.word	0x0800c624

08005dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dd0:	f001 faec 	bl	80073ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dd4:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <prvAddNewTaskToReadyList+0xc4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <prvAddNewTaskToReadyList+0xc4>)
 8005ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005de6:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <prvAddNewTaskToReadyList+0xc4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d110      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005df4:	f000 fc28 	bl	8006648 <prvInitialiseTaskLists>
 8005df8:	e00d      	b.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <prvAddNewTaskToReadyList+0xcc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d802      	bhi.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <prvAddNewTaskToReadyList+0xd0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <prvAddNewTaskToReadyList+0xd0>)
 8005e1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e20:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <prvAddNewTaskToReadyList+0xd0>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4b1b      	ldr	r3, [pc, #108]	; (8005e9c <prvAddNewTaskToReadyList+0xd4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d903      	bls.n	8005e3c <prvAddNewTaskToReadyList+0x74>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	4a18      	ldr	r2, [pc, #96]	; (8005e9c <prvAddNewTaskToReadyList+0xd4>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a15      	ldr	r2, [pc, #84]	; (8005ea0 <prvAddNewTaskToReadyList+0xd8>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fe69 	bl	8004b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e58:	f001 fad8 	bl	800740c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <prvAddNewTaskToReadyList+0xcc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <prvAddNewTaskToReadyList+0xc8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d207      	bcs.n	8005e82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <prvAddNewTaskToReadyList+0xdc>)
 8005e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20001030 	.word	0x20001030
 8005e90:	20000b5c 	.word	0x20000b5c
 8005e94:	2000103c 	.word	0x2000103c
 8005e98:	2000104c 	.word	0x2000104c
 8005e9c:	20001038 	.word	0x20001038
 8005ea0:	20000b60 	.word	0x20000b60
 8005ea4:	e000ed04 	.word	0xe000ed04

08005ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d017      	beq.n	8005eea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <vTaskDelay+0x60>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <vTaskDelay+0x30>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ed8:	f000 f88a 	bl	8005ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005edc:	2100      	movs	r1, #0
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fe0c 	bl	8006afc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ee4:	f000 f892 	bl	800600c <xTaskResumeAll>
 8005ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <vTaskDelay+0x64>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20001058 	.word	0x20001058
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f1e:	463a      	mov	r2, r7
 8005f20:	1d39      	adds	r1, r7, #4
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe fda2 	bl	8004a70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	9202      	str	r2, [sp, #8]
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	2300      	movs	r3, #0
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	4924      	ldr	r1, [pc, #144]	; (8005fd0 <vTaskStartScheduler+0xc0>)
 8005f40:	4824      	ldr	r0, [pc, #144]	; (8005fd4 <vTaskStartScheduler+0xc4>)
 8005f42:	f7ff fe01 	bl	8005b48 <xTaskCreateStatic>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4a23      	ldr	r2, [pc, #140]	; (8005fd8 <vTaskStartScheduler+0xc8>)
 8005f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f4c:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <vTaskStartScheduler+0xc8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e001      	b.n	8005f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f64:	f000 fe1e 	bl	8006ba4 <xTimerCreateTimerTask>
 8005f68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d11b      	bne.n	8005fa8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	613b      	str	r3, [r7, #16]
}
 8005f82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <vTaskStartScheduler+0xcc>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3354      	adds	r3, #84	; 0x54
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <vTaskStartScheduler+0xd0>)
 8005f8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f8e:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <vTaskStartScheduler+0xd4>)
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <vTaskStartScheduler+0xd8>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <vTaskStartScheduler+0xdc>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fa2:	f001 f991 	bl	80072c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fa6:	e00e      	b.n	8005fc6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d10a      	bne.n	8005fc6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <vTaskStartScheduler+0xb4>
}
 8005fc6:	bf00      	nop
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	0800c398 	.word	0x0800c398
 8005fd4:	08006619 	.word	0x08006619
 8005fd8:	20001054 	.word	0x20001054
 8005fdc:	20000b5c 	.word	0x20000b5c
 8005fe0:	20000010 	.word	0x20000010
 8005fe4:	20001050 	.word	0x20001050
 8005fe8:	2000103c 	.word	0x2000103c
 8005fec:	20001034 	.word	0x20001034

08005ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ff4:	4b04      	ldr	r3, [pc, #16]	; (8006008 <vTaskSuspendAll+0x18>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	4a03      	ldr	r2, [pc, #12]	; (8006008 <vTaskSuspendAll+0x18>)
 8005ffc:	6013      	str	r3, [r2, #0]
}
 8005ffe:	bf00      	nop
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20001058 	.word	0x20001058

0800600c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800601a:	4b42      	ldr	r3, [pc, #264]	; (8006124 <xTaskResumeAll+0x118>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <xTaskResumeAll+0x2c>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	603b      	str	r3, [r7, #0]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006038:	f001 f9b8 	bl	80073ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800603c:	4b39      	ldr	r3, [pc, #228]	; (8006124 <xTaskResumeAll+0x118>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3b01      	subs	r3, #1
 8006042:	4a38      	ldr	r2, [pc, #224]	; (8006124 <xTaskResumeAll+0x118>)
 8006044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006046:	4b37      	ldr	r3, [pc, #220]	; (8006124 <xTaskResumeAll+0x118>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d162      	bne.n	8006114 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <xTaskResumeAll+0x11c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d05e      	beq.n	8006114 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006056:	e02f      	b.n	80060b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006058:	4b34      	ldr	r3, [pc, #208]	; (800612c <xTaskResumeAll+0x120>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3318      	adds	r3, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe fdbb 	bl	8004be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fdb6 	bl	8004be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <xTaskResumeAll+0x124>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d903      	bls.n	8006088 <xTaskResumeAll+0x7c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4a2a      	ldr	r2, [pc, #168]	; (8006130 <xTaskResumeAll+0x124>)
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4a27      	ldr	r2, [pc, #156]	; (8006134 <xTaskResumeAll+0x128>)
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7fe fd43 	bl	8004b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b23      	ldr	r3, [pc, #140]	; (8006138 <xTaskResumeAll+0x12c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80060b2:	4b22      	ldr	r3, [pc, #136]	; (800613c <xTaskResumeAll+0x130>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060b8:	4b1c      	ldr	r3, [pc, #112]	; (800612c <xTaskResumeAll+0x120>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1cb      	bne.n	8006058 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060c6:	f000 fb61 	bl	800678c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <xTaskResumeAll+0x134>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d010      	beq.n	80060f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060d6:	f000 f845 	bl	8006164 <xTaskIncrementTick>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <xTaskResumeAll+0x130>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f1      	bne.n	80060d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80060f2:	4b13      	ldr	r3, [pc, #76]	; (8006140 <xTaskResumeAll+0x134>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060f8:	4b10      	ldr	r3, [pc, #64]	; (800613c <xTaskResumeAll+0x130>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <xTaskResumeAll+0x138>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006114:	f001 f97a 	bl	800740c <vPortExitCritical>

	return xAlreadyYielded;
 8006118:	68bb      	ldr	r3, [r7, #8]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20001058 	.word	0x20001058
 8006128:	20001030 	.word	0x20001030
 800612c:	20000ff0 	.word	0x20000ff0
 8006130:	20001038 	.word	0x20001038
 8006134:	20000b60 	.word	0x20000b60
 8006138:	20000b5c 	.word	0x20000b5c
 800613c:	20001044 	.word	0x20001044
 8006140:	20001040 	.word	0x20001040
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <xTaskGetTickCount+0x18>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006154:	687b      	ldr	r3, [r7, #4]
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr
 8006160:	20001034 	.word	0x20001034

08006164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800616e:	4b51      	ldr	r3, [pc, #324]	; (80062b4 <xTaskIncrementTick+0x150>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f040 808e 	bne.w	8006294 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006178:	4b4f      	ldr	r3, [pc, #316]	; (80062b8 <xTaskIncrementTick+0x154>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006180:	4a4d      	ldr	r2, [pc, #308]	; (80062b8 <xTaskIncrementTick+0x154>)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d120      	bne.n	80061ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800618c:	4b4b      	ldr	r3, [pc, #300]	; (80062bc <xTaskIncrementTick+0x158>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	603b      	str	r3, [r7, #0]
}
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <xTaskIncrementTick+0x46>
 80061ac:	4b43      	ldr	r3, [pc, #268]	; (80062bc <xTaskIncrementTick+0x158>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	4b43      	ldr	r3, [pc, #268]	; (80062c0 <xTaskIncrementTick+0x15c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a41      	ldr	r2, [pc, #260]	; (80062bc <xTaskIncrementTick+0x158>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	4a41      	ldr	r2, [pc, #260]	; (80062c0 <xTaskIncrementTick+0x15c>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4b40      	ldr	r3, [pc, #256]	; (80062c4 <xTaskIncrementTick+0x160>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a3f      	ldr	r2, [pc, #252]	; (80062c4 <xTaskIncrementTick+0x160>)
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	f000 fadf 	bl	800678c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061ce:	4b3e      	ldr	r3, [pc, #248]	; (80062c8 <xTaskIncrementTick+0x164>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d34e      	bcc.n	8006276 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d8:	4b38      	ldr	r3, [pc, #224]	; (80062bc <xTaskIncrementTick+0x158>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <xTaskIncrementTick+0x82>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <xTaskIncrementTick+0x84>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ec:	4b36      	ldr	r3, [pc, #216]	; (80062c8 <xTaskIncrementTick+0x164>)
 80061ee:	f04f 32ff 	mov.w	r2, #4294967295
 80061f2:	601a      	str	r2, [r3, #0]
					break;
 80061f4:	e03f      	b.n	8006276 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061f6:	4b31      	ldr	r3, [pc, #196]	; (80062bc <xTaskIncrementTick+0x158>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d203      	bcs.n	8006216 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800620e:	4a2e      	ldr	r2, [pc, #184]	; (80062c8 <xTaskIncrementTick+0x164>)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6013      	str	r3, [r2, #0]
						break;
 8006214:	e02f      	b.n	8006276 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	3304      	adds	r3, #4
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fce0 	bl	8004be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3318      	adds	r3, #24
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe fcd7 	bl	8004be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006236:	4b25      	ldr	r3, [pc, #148]	; (80062cc <xTaskIncrementTick+0x168>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d903      	bls.n	8006246 <xTaskIncrementTick+0xe2>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	4a22      	ldr	r2, [pc, #136]	; (80062cc <xTaskIncrementTick+0x168>)
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <xTaskIncrementTick+0x16c>)
 8006254:	441a      	add	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	3304      	adds	r3, #4
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f7fe fc64 	bl	8004b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <xTaskIncrementTick+0x170>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	429a      	cmp	r2, r3
 800626e:	d3b3      	bcc.n	80061d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006274:	e7b0      	b.n	80061d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006276:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <xTaskIncrementTick+0x170>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	4914      	ldr	r1, [pc, #80]	; (80062d0 <xTaskIncrementTick+0x16c>)
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d907      	bls.n	800629e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e004      	b.n	800629e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006294:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <xTaskIncrementTick+0x174>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <xTaskIncrementTick+0x174>)
 800629c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <xTaskIncrementTick+0x178>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80062a6:	2301      	movs	r3, #1
 80062a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062aa:	697b      	ldr	r3, [r7, #20]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20001058 	.word	0x20001058
 80062b8:	20001034 	.word	0x20001034
 80062bc:	20000fe8 	.word	0x20000fe8
 80062c0:	20000fec 	.word	0x20000fec
 80062c4:	20001048 	.word	0x20001048
 80062c8:	20001050 	.word	0x20001050
 80062cc:	20001038 	.word	0x20001038
 80062d0:	20000b60 	.word	0x20000b60
 80062d4:	20000b5c 	.word	0x20000b5c
 80062d8:	20001040 	.word	0x20001040
 80062dc:	20001044 	.word	0x20001044

080062e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062e6:	4b2a      	ldr	r3, [pc, #168]	; (8006390 <vTaskSwitchContext+0xb0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ee:	4b29      	ldr	r3, [pc, #164]	; (8006394 <vTaskSwitchContext+0xb4>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062f4:	e046      	b.n	8006384 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80062f6:	4b27      	ldr	r3, [pc, #156]	; (8006394 <vTaskSwitchContext+0xb4>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80062fc:	4b26      	ldr	r3, [pc, #152]	; (8006398 <vTaskSwitchContext+0xb8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e010      	b.n	8006326 <vTaskSwitchContext+0x46>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <vTaskSwitchContext+0x40>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	607b      	str	r3, [r7, #4]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <vTaskSwitchContext+0x3e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b01      	subs	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	491d      	ldr	r1, [pc, #116]	; (800639c <vTaskSwitchContext+0xbc>)
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0e4      	beq.n	8006304 <vTaskSwitchContext+0x24>
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4a15      	ldr	r2, [pc, #84]	; (800639c <vTaskSwitchContext+0xbc>)
 8006346:	4413      	add	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	3308      	adds	r3, #8
 800635c:	429a      	cmp	r2, r3
 800635e:	d104      	bne.n	800636a <vTaskSwitchContext+0x8a>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4a0b      	ldr	r2, [pc, #44]	; (80063a0 <vTaskSwitchContext+0xc0>)
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	4a08      	ldr	r2, [pc, #32]	; (8006398 <vTaskSwitchContext+0xb8>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <vTaskSwitchContext+0xc0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3354      	adds	r3, #84	; 0x54
 8006380:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <vTaskSwitchContext+0xc4>)
 8006382:	6013      	str	r3, [r2, #0]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20001058 	.word	0x20001058
 8006394:	20001044 	.word	0x20001044
 8006398:	20001038 	.word	0x20001038
 800639c:	20000b60 	.word	0x20000b60
 80063a0:	20000b5c 	.word	0x20000b5c
 80063a4:	20000010 	.word	0x20000010

080063a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <vTaskPlaceOnEventList+0x44>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3318      	adds	r3, #24
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fe fbca 	bl	8004b70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063dc:	2101      	movs	r1, #1
 80063de:	6838      	ldr	r0, [r7, #0]
 80063e0:	f000 fb8c 	bl	8006afc <prvAddCurrentTaskToDelayedList>
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000b5c 	.word	0x20000b5c

080063f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	617b      	str	r3, [r7, #20]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <vTaskPlaceOnEventListRestricted+0x54>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3318      	adds	r3, #24
 800641e:	4619      	mov	r1, r3
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7fe fb82 	bl	8004b2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	68b8      	ldr	r0, [r7, #8]
 8006436:	f000 fb61 	bl	8006afc <prvAddCurrentTaskToDelayedList>
	}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000b5c 	.word	0x20000b5c

08006448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60fb      	str	r3, [r7, #12]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	3318      	adds	r3, #24
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fbb1 	bl	8004be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647e:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <xTaskRemoveFromEventList+0xb0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11d      	bne.n	80064c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fba8 	bl	8004be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4b19      	ldr	r3, [pc, #100]	; (80064fc <xTaskRemoveFromEventList+0xb4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d903      	bls.n	80064a4 <xTaskRemoveFromEventList+0x5c>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	4a16      	ldr	r2, [pc, #88]	; (80064fc <xTaskRemoveFromEventList+0xb4>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4a13      	ldr	r2, [pc, #76]	; (8006500 <xTaskRemoveFromEventList+0xb8>)
 80064b2:	441a      	add	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fe fb35 	bl	8004b2a <vListInsertEnd>
 80064c0:	e005      	b.n	80064ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3318      	adds	r3, #24
 80064c6:	4619      	mov	r1, r3
 80064c8:	480e      	ldr	r0, [pc, #56]	; (8006504 <xTaskRemoveFromEventList+0xbc>)
 80064ca:	f7fe fb2e 	bl	8004b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <xTaskRemoveFromEventList+0xc0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d905      	bls.n	80064e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <xTaskRemoveFromEventList+0xc4>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e001      	b.n	80064ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064ec:	697b      	ldr	r3, [r7, #20]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20001058 	.word	0x20001058
 80064fc:	20001038 	.word	0x20001038
 8006500:	20000b60 	.word	0x20000b60
 8006504:	20000ff0 	.word	0x20000ff0
 8006508:	20000b5c 	.word	0x20000b5c
 800650c:	20001044 	.word	0x20001044

08006510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <vTaskInternalSetTimeOutState+0x24>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <vTaskInternalSetTimeOutState+0x28>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	605a      	str	r2, [r3, #4]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20001048 	.word	0x20001048
 8006538:	20001034 	.word	0x20001034

0800653c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	613b      	str	r3, [r7, #16]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	60fb      	str	r3, [r7, #12]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800657e:	f000 ff15 	bl	80073ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006582:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <xTaskCheckForTimeOut+0xbc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d102      	bne.n	80065a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	e023      	b.n	80065ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <xTaskCheckForTimeOut+0xc0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d007      	beq.n	80065be <xTaskCheckForTimeOut+0x82>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	e015      	b.n	80065ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d20b      	bcs.n	80065e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff9b 	bl	8006510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	e004      	b.n	80065ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065ea:	f000 ff0f 	bl	800740c <vPortExitCritical>

	return xReturn;
 80065ee:	69fb      	ldr	r3, [r7, #28]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3720      	adds	r7, #32
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20001034 	.word	0x20001034
 80065fc:	20001048 	.word	0x20001048

08006600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006604:	4b03      	ldr	r3, [pc, #12]	; (8006614 <vTaskMissedYield+0x14>)
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
}
 800660a:	bf00      	nop
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20001044 	.word	0x20001044

08006618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006620:	f000 f852 	bl	80066c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <prvIdleTask+0x28>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d9f9      	bls.n	8006620 <prvIdleTask+0x8>
			{
				taskYIELD();
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <prvIdleTask+0x2c>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800663c:	e7f0      	b.n	8006620 <prvIdleTask+0x8>
 800663e:	bf00      	nop
 8006640:	20000b60 	.word	0x20000b60
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	e00c      	b.n	800666e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4a12      	ldr	r2, [pc, #72]	; (80066a8 <prvInitialiseTaskLists+0x60>)
 8006660:	4413      	add	r3, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fa36 	bl	8004ad4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3301      	adds	r3, #1
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b37      	cmp	r3, #55	; 0x37
 8006672:	d9ef      	bls.n	8006654 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006674:	480d      	ldr	r0, [pc, #52]	; (80066ac <prvInitialiseTaskLists+0x64>)
 8006676:	f7fe fa2d 	bl	8004ad4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800667a:	480d      	ldr	r0, [pc, #52]	; (80066b0 <prvInitialiseTaskLists+0x68>)
 800667c:	f7fe fa2a 	bl	8004ad4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006680:	480c      	ldr	r0, [pc, #48]	; (80066b4 <prvInitialiseTaskLists+0x6c>)
 8006682:	f7fe fa27 	bl	8004ad4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006686:	480c      	ldr	r0, [pc, #48]	; (80066b8 <prvInitialiseTaskLists+0x70>)
 8006688:	f7fe fa24 	bl	8004ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800668c:	480b      	ldr	r0, [pc, #44]	; (80066bc <prvInitialiseTaskLists+0x74>)
 800668e:	f7fe fa21 	bl	8004ad4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <prvInitialiseTaskLists+0x78>)
 8006694:	4a05      	ldr	r2, [pc, #20]	; (80066ac <prvInitialiseTaskLists+0x64>)
 8006696:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <prvInitialiseTaskLists+0x7c>)
 800669a:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <prvInitialiseTaskLists+0x68>)
 800669c:	601a      	str	r2, [r3, #0]
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000b60 	.word	0x20000b60
 80066ac:	20000fc0 	.word	0x20000fc0
 80066b0:	20000fd4 	.word	0x20000fd4
 80066b4:	20000ff0 	.word	0x20000ff0
 80066b8:	20001004 	.word	0x20001004
 80066bc:	2000101c 	.word	0x2000101c
 80066c0:	20000fe8 	.word	0x20000fe8
 80066c4:	20000fec 	.word	0x20000fec

080066c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ce:	e019      	b.n	8006704 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066d0:	f000 fe6c 	bl	80073ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <prvCheckTasksWaitingTermination+0x50>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3304      	adds	r3, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fa7d 	bl	8004be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <prvCheckTasksWaitingTermination+0x54>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	4a0b      	ldr	r2, [pc, #44]	; (800671c <prvCheckTasksWaitingTermination+0x54>)
 80066ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <prvCheckTasksWaitingTermination+0x58>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <prvCheckTasksWaitingTermination+0x58>)
 80066f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066fa:	f000 fe87 	bl	800740c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f810 	bl	8006724 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <prvCheckTasksWaitingTermination+0x58>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e1      	bne.n	80066d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20001004 	.word	0x20001004
 800671c:	20001030 	.word	0x20001030
 8006720:	20001018 	.word	0x20001018

08006724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3354      	adds	r3, #84	; 0x54
 8006730:	4618      	mov	r0, r3
 8006732:	f002 f95d 	bl	80089f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800673c:	2b00      	cmp	r3, #0
 800673e:	d108      	bne.n	8006752 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fff5 	bl	8007734 <vPortFree>
				vPortFree( pxTCB );
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fff2 	bl	8007734 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006750:	e018      	b.n	8006784 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006758:	2b01      	cmp	r3, #1
 800675a:	d103      	bne.n	8006764 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 ffe9 	bl	8007734 <vPortFree>
	}
 8006762:	e00f      	b.n	8006784 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800676a:	2b02      	cmp	r3, #2
 800676c:	d00a      	beq.n	8006784 <prvDeleteTCB+0x60>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	60fb      	str	r3, [r7, #12]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <prvDeleteTCB+0x5e>
	}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006792:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <prvResetNextTaskUnblockTime+0x40>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <prvResetNextTaskUnblockTime+0x14>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <prvResetNextTaskUnblockTime+0x16>
 80067a0:	2300      	movs	r3, #0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <prvResetNextTaskUnblockTime+0x44>)
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067ae:	e008      	b.n	80067c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <prvResetNextTaskUnblockTime+0x40>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4a04      	ldr	r2, [pc, #16]	; (80067d0 <prvResetNextTaskUnblockTime+0x44>)
 80067c0:	6013      	str	r3, [r2, #0]
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr
 80067cc:	20000fe8 	.word	0x20000fe8
 80067d0:	20001050 	.word	0x20001050

080067d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <xTaskGetSchedulerState+0x34>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d102      	bne.n	80067e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067e2:	2301      	movs	r3, #1
 80067e4:	607b      	str	r3, [r7, #4]
 80067e6:	e008      	b.n	80067fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067e8:	4b08      	ldr	r3, [pc, #32]	; (800680c <xTaskGetSchedulerState+0x38>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067f0:	2302      	movs	r3, #2
 80067f2:	607b      	str	r3, [r7, #4]
 80067f4:	e001      	b.n	80067fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067fa:	687b      	ldr	r3, [r7, #4]
	}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	2000103c 	.word	0x2000103c
 800680c:	20001058 	.word	0x20001058

08006810 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d056      	beq.n	80068d4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682a:	4b2d      	ldr	r3, [pc, #180]	; (80068e0 <xTaskPriorityInherit+0xd0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	429a      	cmp	r2, r3
 8006832:	d246      	bcs.n	80068c2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db06      	blt.n	800684a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683c:	4b28      	ldr	r3, [pc, #160]	; (80068e0 <xTaskPriorityInherit+0xd0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	6959      	ldr	r1, [r3, #20]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4a22      	ldr	r2, [pc, #136]	; (80068e4 <xTaskPriorityInherit+0xd4>)
 800685c:	4413      	add	r3, r2
 800685e:	4299      	cmp	r1, r3
 8006860:	d101      	bne.n	8006866 <xTaskPriorityInherit+0x56>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <xTaskPriorityInherit+0x58>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d022      	beq.n	80068b2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe f9b5 	bl	8004be0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <xTaskPriorityInherit+0xd0>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <xTaskPriorityInherit+0xd8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d903      	bls.n	8006894 <xTaskPriorityInherit+0x84>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <xTaskPriorityInherit+0xd8>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <xTaskPriorityInherit+0xd4>)
 80068a2:	441a      	add	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe f93d 	bl	8004b2a <vListInsertEnd>
 80068b0:	e004      	b.n	80068bc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <xTaskPriorityInherit+0xd0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e008      	b.n	80068d4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <xTaskPriorityInherit+0xd0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d201      	bcs.n	80068d4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068d4:	68fb      	ldr	r3, [r7, #12]
	}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000b5c 	.word	0x20000b5c
 80068e4:	20000b60 	.word	0x20000b60
 80068e8:	20001038 	.word	0x20001038

080068ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d056      	beq.n	80069b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <xTaskPriorityDisinherit+0xd0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d00a      	beq.n	8006922 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	60fb      	str	r3, [r7, #12]
}
 800691e:	bf00      	nop
 8006920:	e7fe      	b.n	8006920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	60bb      	str	r3, [r7, #8]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	1e5a      	subs	r2, r3, #1
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	429a      	cmp	r2, r3
 8006954:	d02c      	beq.n	80069b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	2b00      	cmp	r3, #0
 800695c:	d128      	bne.n	80069b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3304      	adds	r3, #4
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe f93c 	bl	8004be0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <xTaskPriorityDisinherit+0xd4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d903      	bls.n	8006990 <xTaskPriorityDisinherit+0xa4>
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <xTaskPriorityDisinherit+0xd4>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <xTaskPriorityDisinherit+0xd8>)
 800699e:	441a      	add	r2, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7fe f8bf 	bl	8004b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069b0:	697b      	ldr	r3, [r7, #20]
	}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000b5c 	.word	0x20000b5c
 80069c0:	20001038 	.word	0x20001038
 80069c4:	20000b60 	.word	0x20000b60

080069c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80069d6:	2301      	movs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d06f      	beq.n	8006ac0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	60fb      	str	r3, [r7, #12]
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d902      	bls.n	8006a0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	61fb      	str	r3, [r7, #28]
 8006a0c:	e002      	b.n	8006a14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d050      	beq.n	8006ac0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d14b      	bne.n	8006ac0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006a28:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d10a      	bne.n	8006a48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60bb      	str	r3, [r7, #8]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	db04      	blt.n	8006a66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	6959      	ldr	r1, [r3, #20]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4a15      	ldr	r2, [pc, #84]	; (8006acc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a76:	4413      	add	r3, r2
 8006a78:	4299      	cmp	r1, r3
 8006a7a:	d101      	bne.n	8006a80 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01c      	beq.n	8006ac0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe f8a8 	bl	8004be0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d903      	bls.n	8006aa4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4a0b      	ldr	r2, [pc, #44]	; (8006ad0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4a06      	ldr	r2, [pc, #24]	; (8006acc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ab2:	441a      	add	r2, r3
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe f835 	bl	8004b2a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ac0:	bf00      	nop
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000b5c 	.word	0x20000b5c
 8006acc:	20000b60 	.word	0x20000b60
 8006ad0:	20001038 	.word	0x20001038

08006ad4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ae6:	3201      	adds	r2, #1
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006aea:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006aec:	681b      	ldr	r3, [r3, #0]
	}
 8006aee:	4618      	mov	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000b5c 	.word	0x20000b5c

08006afc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b06:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b0c:	4b20      	ldr	r3, [pc, #128]	; (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe f864 	bl	8004be0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d10a      	bne.n	8006b36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b1a      	ldr	r3, [pc, #104]	; (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4819      	ldr	r0, [pc, #100]	; (8006b94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b30:	f7fd fffb 	bl	8004b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b34:	e026      	b.n	8006b84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d209      	bcs.n	8006b62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b4e:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f7fe f808 	bl	8004b70 <vListInsert>
}
 8006b60:	e010      	b.n	8006b84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b62:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fd fffe 	bl	8004b70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b74:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d202      	bcs.n	8006b84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b7e:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	6013      	str	r3, [r2, #0]
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20001034 	.word	0x20001034
 8006b90:	20000b5c 	.word	0x20000b5c
 8006b94:	2000101c 	.word	0x2000101c
 8006b98:	20000fec 	.word	0x20000fec
 8006b9c:	20000fe8 	.word	0x20000fe8
 8006ba0:	20001050 	.word	0x20001050

08006ba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bae:	f000 facb 	bl	8007148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <xTimerCreateTimerTask+0x80>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d021      	beq.n	8006bfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bc2:	1d3a      	adds	r2, r7, #4
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	f107 030c 	add.w	r3, r7, #12
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fd ff67 	bl	8004aa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	9202      	str	r2, [sp, #8]
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	2302      	movs	r3, #2
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	2300      	movs	r3, #0
 8006be2:	460a      	mov	r2, r1
 8006be4:	4910      	ldr	r1, [pc, #64]	; (8006c28 <xTimerCreateTimerTask+0x84>)
 8006be6:	4811      	ldr	r0, [pc, #68]	; (8006c2c <xTimerCreateTimerTask+0x88>)
 8006be8:	f7fe ffae 	bl	8005b48 <xTaskCreateStatic>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <xTimerCreateTimerTask+0x8c>)
 8006bf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <xTimerCreateTimerTask+0x8c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c1a:	697b      	ldr	r3, [r7, #20]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000108c 	.word	0x2000108c
 8006c28:	0800c3a0 	.word	0x0800c3a0
 8006c2c:	08006d51 	.word	0x08006d51
 8006c30:	20001090 	.word	0x20001090

08006c34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	623b      	str	r3, [r7, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <xTimerGenericCommand+0x98>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d02a      	beq.n	8006cc0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	dc18      	bgt.n	8006cae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c7c:	f7ff fdaa 	bl	80067d4 <xTaskGetSchedulerState>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d109      	bne.n	8006c9a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <xTimerGenericCommand+0x98>)
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f107 0110 	add.w	r1, r7, #16
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c92:	f7fe f979 	bl	8004f88 <xQueueGenericSend>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24
 8006c98:	e012      	b.n	8006cc0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <xTimerGenericCommand+0x98>)
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	f107 0110 	add.w	r1, r7, #16
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f7fe f96f 	bl	8004f88 <xQueueGenericSend>
 8006caa:	6278      	str	r0, [r7, #36]	; 0x24
 8006cac:	e008      	b.n	8006cc0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cae:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <xTimerGenericCommand+0x98>)
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	f107 0110 	add.w	r1, r7, #16
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	f7fe fa63 	bl	8005184 <xQueueGenericSendFromISR>
 8006cbe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3728      	adds	r7, #40	; 0x28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	2000108c 	.word	0x2000108c

08006cd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <prvProcessExpiredTimer+0x7c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd ff79 	bl	8004be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d122      	bne.n	8006d3c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	18d1      	adds	r1, r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	6978      	ldr	r0, [r7, #20]
 8006d04:	f000 f8c8 	bl	8006e98 <prvInsertTimerInActiveList>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d016      	beq.n	8006d3c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	2300      	movs	r3, #0
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	2100      	movs	r1, #0
 8006d18:	6978      	ldr	r0, [r7, #20]
 8006d1a:	f7ff ff8b 	bl	8006c34 <xTimerGenericCommand>
 8006d1e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60fb      	str	r3, [r7, #12]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	6978      	ldr	r0, [r7, #20]
 8006d42:	4798      	blx	r3
}
 8006d44:	bf00      	nop
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20001084 	.word	0x20001084

08006d50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d58:	f107 0308 	add.w	r3, r7, #8
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f857 	bl	8006e10 <prvGetNextExpireTime>
 8006d62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4619      	mov	r1, r3
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f803 	bl	8006d74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d6e:	f000 f8d5 	bl	8006f1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d72:	e7f1      	b.n	8006d58 <prvTimerTask+0x8>

08006d74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d7e:	f7ff f937 	bl	8005ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f866 	bl	8006e58 <prvSampleTimeNow>
 8006d8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d130      	bne.n	8006df6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <prvProcessTimerOrBlockTask+0x3c>
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d806      	bhi.n	8006db0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006da2:	f7ff f933 	bl	800600c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff ff91 	bl	8006cd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006dae:	e024      	b.n	8006dfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d008      	beq.n	8006dc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006db6:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <prvProcessTimerOrBlockTask+0x90>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <prvProcessTimerOrBlockTask+0x94>)
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f7fe fe83 	bl	8005ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dda:	f7ff f917 	bl	800600c <xTaskResumeAll>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006de4:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <prvProcessTimerOrBlockTask+0x98>)
 8006de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	f3bf 8f6f 	isb	sy
}
 8006df4:	e001      	b.n	8006dfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006df6:	f7ff f909 	bl	800600c <xTaskResumeAll>
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20001088 	.word	0x20001088
 8006e08:	2000108c 	.word	0x2000108c
 8006e0c:	e000ed04 	.word	0xe000ed04

08006e10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <prvGetNextExpireTime+0x44>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bf0c      	ite	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	2300      	movne	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <prvGetNextExpireTime+0x44>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e001      	b.n	8006e46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e46:	68fb      	ldr	r3, [r7, #12]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20001084 	.word	0x20001084

08006e58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e60:	f7ff f972 	bl	8006148 <xTaskGetTickCount>
 8006e64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <prvSampleTimeNow+0x3c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d205      	bcs.n	8006e7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e70:	f000 f908 	bl	8007084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e82:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <prvSampleTimeNow+0x3c>)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e88:	68fb      	ldr	r3, [r7, #12]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20001094 	.word	0x20001094

08006e98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d812      	bhi.n	8006ee4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d302      	bcc.n	8006ed2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	e01b      	b.n	8006f0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ed2:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <prvInsertTimerInActiveList+0x7c>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7fd fe47 	bl	8004b70 <vListInsert>
 8006ee2:	e012      	b.n	8006f0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d206      	bcs.n	8006efa <prvInsertTimerInActiveList+0x62>
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d302      	bcc.n	8006efa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e007      	b.n	8006f0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006efa:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <prvInsertTimerInActiveList+0x80>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7fd fe33 	bl	8004b70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f0a:	697b      	ldr	r3, [r7, #20]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20001088 	.word	0x20001088
 8006f18:	20001084 	.word	0x20001084

08006f1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08e      	sub	sp, #56	; 0x38
 8006f20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f22:	e09d      	b.n	8007060 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da18      	bge.n	8006f5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61fb      	str	r3, [r7, #28]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f52:	6850      	ldr	r0, [r2, #4]
 8006f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f56:	6892      	ldr	r2, [r2, #8]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	db7d      	blt.n	800705e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd fe34 	bl	8004be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f78:	463b      	mov	r3, r7
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff ff6c 	bl	8006e58 <prvSampleTimeNow>
 8006f80:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	d86b      	bhi.n	8007060 <prvProcessReceivedCommands+0x144>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <prvProcessReceivedCommands+0x74>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fb9 	.word	0x08006fb9
 8006f9c:	08007061 	.word	0x08007061
 8006fa0:	08007015 	.word	0x08007015
 8006fa4:	0800704d 	.word	0x0800704d
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fb9 	.word	0x08006fb9
 8006fb0:	08007061 	.word	0x08007061
 8006fb4:	08007015 	.word	0x08007015
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	18d1      	adds	r1, r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc6:	f7ff ff67 	bl	8006e98 <prvInsertTimerInActiveList>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d047      	beq.n	8007060 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d13f      	bne.n	8007060 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	441a      	add	r2, r3
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2300      	movs	r3, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff2:	f7ff fe1f 	bl	8006c34 <xTimerGenericCommand>
 8006ff6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d130      	bne.n	8007060 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61bb      	str	r3, [r7, #24]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	617b      	str	r3, [r7, #20]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	18d1      	adds	r1, r2, r3
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007046:	f7ff ff27 	bl	8006e98 <prvInsertTimerInActiveList>
					break;
 800704a:	e009      	b.n	8007060 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007058:	f000 fb6c 	bl	8007734 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800705c:	e000      	b.n	8007060 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800705e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <prvProcessReceivedCommands+0x164>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	1d39      	adds	r1, r7, #4
 8007066:	2200      	movs	r2, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe f9b1 	bl	80053d0 <xQueueReceive>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	f47f af57 	bne.w	8006f24 <prvProcessReceivedCommands+0x8>
	}
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	2000108c 	.word	0x2000108c

08007084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800708a:	e045      	b.n	8007118 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800708c:	4b2c      	ldr	r3, [pc, #176]	; (8007140 <prvSwitchTimerLists+0xbc>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007096:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <prvSwitchTimerLists+0xbc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fd fd9b 	bl	8004be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d12e      	bne.n	8007118 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4413      	add	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d90e      	bls.n	80070ea <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070d8:	4b19      	ldr	r3, [pc, #100]	; (8007140 <prvSwitchTimerLists+0xbc>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fd fd44 	bl	8004b70 <vListInsert>
 80070e8:	e016      	b.n	8007118 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070ea:	2300      	movs	r3, #0
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2300      	movs	r3, #0
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	2100      	movs	r1, #0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f7ff fd9d 	bl	8006c34 <xTimerGenericCommand>
 80070fa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	603b      	str	r3, [r7, #0]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <prvSwitchTimerLists+0xbc>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1b4      	bne.n	800708c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007122:	4b07      	ldr	r3, [pc, #28]	; (8007140 <prvSwitchTimerLists+0xbc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <prvSwitchTimerLists+0xc0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <prvSwitchTimerLists+0xbc>)
 800712e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007130:	4a04      	ldr	r2, [pc, #16]	; (8007144 <prvSwitchTimerLists+0xc0>)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6013      	str	r3, [r2, #0]
}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20001084 	.word	0x20001084
 8007144:	20001088 	.word	0x20001088

08007148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800714e:	f000 f92d 	bl	80073ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007152:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d120      	bne.n	800719c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800715a:	4814      	ldr	r0, [pc, #80]	; (80071ac <prvCheckForValidListAndQueue+0x64>)
 800715c:	f7fd fcba 	bl	8004ad4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007160:	4813      	ldr	r0, [pc, #76]	; (80071b0 <prvCheckForValidListAndQueue+0x68>)
 8007162:	f7fd fcb7 	bl	8004ad4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <prvCheckForValidListAndQueue+0x6c>)
 8007168:	4a10      	ldr	r2, [pc, #64]	; (80071ac <prvCheckForValidListAndQueue+0x64>)
 800716a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800716c:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <prvCheckForValidListAndQueue+0x70>)
 800716e:	4a10      	ldr	r2, [pc, #64]	; (80071b0 <prvCheckForValidListAndQueue+0x68>)
 8007170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007172:	2300      	movs	r3, #0
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4b11      	ldr	r3, [pc, #68]	; (80071bc <prvCheckForValidListAndQueue+0x74>)
 8007178:	4a11      	ldr	r2, [pc, #68]	; (80071c0 <prvCheckForValidListAndQueue+0x78>)
 800717a:	2110      	movs	r1, #16
 800717c:	200a      	movs	r0, #10
 800717e:	f7fd fdc1 	bl	8004d04 <xQueueGenericCreateStatic>
 8007182:	4603      	mov	r3, r0
 8007184:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007188:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <prvCheckForValidListAndQueue+0x60>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007190:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	490b      	ldr	r1, [pc, #44]	; (80071c4 <prvCheckForValidListAndQueue+0x7c>)
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fc50 	bl	8005a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800719c:	f000 f936 	bl	800740c <vPortExitCritical>
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	2000108c 	.word	0x2000108c
 80071ac:	2000105c 	.word	0x2000105c
 80071b0:	20001070 	.word	0x20001070
 80071b4:	20001084 	.word	0x20001084
 80071b8:	20001088 	.word	0x20001088
 80071bc:	20001138 	.word	0x20001138
 80071c0:	20001098 	.word	0x20001098
 80071c4:	0800c3a8 	.word	0x0800c3a8

080071c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3b04      	subs	r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071f8:	4a08      	ldr	r2, [pc, #32]	; (800721c <pxPortInitialiseStack+0x54>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3b14      	subs	r3, #20
 8007202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3b20      	subs	r3, #32
 800720e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007210:	68fb      	ldr	r3, [r7, #12]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	08007221 	.word	0x08007221

08007220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800722a:	4b12      	ldr	r3, [pc, #72]	; (8007274 <prvTaskExitError+0x54>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d00a      	beq.n	800724a <prvTaskExitError+0x2a>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <prvTaskExitError+0x28>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	60bb      	str	r3, [r7, #8]
}
 800725c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800725e:	bf00      	nop
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0fc      	beq.n	8007260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c
	...

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	f04e 0e0d 	orr.w	lr, lr, #13
 800729e:	4770      	bx	lr

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80072a8:	4806      	ldr	r0, [pc, #24]	; (80072c4 <prvPortStartFirstTask+0x1c>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	b662      	cpsie	i
 80072b4:	b661      	cpsie	f
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	df00      	svc	0
 80072c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072c2:	bf00      	nop
 80072c4:	e000ed08 	.word	0xe000ed08

080072c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072ce:	4b32      	ldr	r3, [pc, #200]	; (8007398 <xPortStartScheduler+0xd0>)
 80072d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22ff      	movs	r2, #255	; 0xff
 80072de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4b2a      	ldr	r3, [pc, #168]	; (800739c <xPortStartScheduler+0xd4>)
 80072f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072f6:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <xPortStartScheduler+0xd8>)
 80072f8:	2207      	movs	r2, #7
 80072fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072fc:	e009      	b.n	8007312 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80072fe:	4b28      	ldr	r3, [pc, #160]	; (80073a0 <xPortStartScheduler+0xd8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3b01      	subs	r3, #1
 8007304:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <xPortStartScheduler+0xd8>)
 8007306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	b2db      	uxtb	r3, r3
 8007310:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b80      	cmp	r3, #128	; 0x80
 800731c:	d0ef      	beq.n	80072fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800731e:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <xPortStartScheduler+0xd8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1c3 0307 	rsb	r3, r3, #7
 8007326:	2b04      	cmp	r3, #4
 8007328:	d00a      	beq.n	8007340 <xPortStartScheduler+0x78>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	60bb      	str	r3, [r7, #8]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <xPortStartScheduler+0xd8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <xPortStartScheduler+0xd8>)
 8007348:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <xPortStartScheduler+0xd8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007352:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <xPortStartScheduler+0xd8>)
 8007354:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <xPortStartScheduler+0xdc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <xPortStartScheduler+0xdc>)
 8007364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007368:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <xPortStartScheduler+0xdc>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a0d      	ldr	r2, [pc, #52]	; (80073a4 <xPortStartScheduler+0xdc>)
 8007370:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007374:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007376:	f000 f8b9 	bl	80074ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <xPortStartScheduler+0xe0>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007380:	f7ff ff92 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007384:	f7fe ffac 	bl	80062e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007388:	f7ff ff4a 	bl	8007220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	e000e400 	.word	0xe000e400
 800739c:	20001188 	.word	0x20001188
 80073a0:	2000118c 	.word	0x2000118c
 80073a4:	e000ed20 	.word	0xe000ed20
 80073a8:	2000000c 	.word	0x2000000c

080073ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	607b      	str	r3, [r7, #4]
}
 80073c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <vPortEnterCritical+0x58>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <vPortEnterCritical+0x58>)
 80073ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073d0:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <vPortEnterCritical+0x58>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d10f      	bne.n	80073f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <vPortEnterCritical+0x5c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	603b      	str	r3, [r7, #0]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <vPortEnterCritical+0x4a>
	}
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	2000000c 	.word	0x2000000c
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <vPortExitCritical+0x4c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <vPortExitCritical+0x24>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007430:	4b09      	ldr	r3, [pc, #36]	; (8007458 <vPortExitCritical+0x4c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3b01      	subs	r3, #1
 8007436:	4a08      	ldr	r2, [pc, #32]	; (8007458 <vPortExitCritical+0x4c>)
 8007438:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <vPortExitCritical+0x4c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <vPortExitCritical+0x42>
 8007442:	2300      	movs	r3, #0
 8007444:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f383 8811 	msr	BASEPRI, r3
}
 800744c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr
 8007458:	2000000c 	.word	0x2000000c
 800745c:	00000000 	.word	0x00000000

08007460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007460:	f3ef 8009 	mrs	r0, PSP
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <pxCurrentTCBConst>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007470:	6010      	str	r0, [r2, #0]
 8007472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800747a:	f380 8811 	msr	BASEPRI, r0
 800747e:	f7fe ff2f 	bl	80062e0 <vTaskSwitchContext>
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007496:	f380 8809 	msr	PSP, r0
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	4770      	bx	lr

080074a0 <pxCurrentTCBConst>:
 80074a0:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074c2:	f7fe fe4f 	bl	8006164 <xTaskIncrementTick>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <SysTick_Handler+0x40>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f383 8811 	msr	BASEPRI, r3
}
 80074de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <vPortSetupTimerInterrupt+0x30>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074f6:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074fc:	4b09      	ldr	r3, [pc, #36]	; (8007524 <vPortSetupTimerInterrupt+0x38>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a09      	ldr	r2, [pc, #36]	; (8007528 <vPortSetupTimerInterrupt+0x3c>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	4a08      	ldr	r2, [pc, #32]	; (800752c <vPortSetupTimerInterrupt+0x40>)
 800750a:	3b01      	subs	r3, #1
 800750c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <vPortSetupTimerInterrupt+0x30>)
 8007510:	2207      	movs	r2, #7
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	e000e010 	.word	0xe000e010
 8007520:	e000e018 	.word	0xe000e018
 8007524:	20000000 	.word	0x20000000
 8007528:	10624dd3 	.word	0x10624dd3
 800752c:	e000e014 	.word	0xe000e014

08007530 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007536:	f3ef 8305 	mrs	r3, IPSR
 800753a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b0f      	cmp	r3, #15
 8007540:	d914      	bls.n	800756c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007542:	4a16      	ldr	r2, [pc, #88]	; (800759c <vPortValidateInterruptPriority+0x6c>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <vPortValidateInterruptPriority+0x70>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	7afa      	ldrb	r2, [r7, #11]
 8007552:	429a      	cmp	r2, r3
 8007554:	d20a      	bcs.n	800756c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	607b      	str	r3, [r7, #4]
}
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <vPortValidateInterruptPriority+0x74>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <vPortValidateInterruptPriority+0x78>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d90a      	bls.n	8007592 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	603b      	str	r3, [r7, #0]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <vPortValidateInterruptPriority+0x60>
	}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	e000e3f0 	.word	0xe000e3f0
 80075a0:	20001188 	.word	0x20001188
 80075a4:	e000ed0c 	.word	0xe000ed0c
 80075a8:	2000118c 	.word	0x2000118c

080075ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	; 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075b8:	f7fe fd1a 	bl	8005ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075bc:	4b58      	ldr	r3, [pc, #352]	; (8007720 <pvPortMalloc+0x174>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075c4:	f000 f910 	bl	80077e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075c8:	4b56      	ldr	r3, [pc, #344]	; (8007724 <pvPortMalloc+0x178>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4013      	ands	r3, r2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 808e 	bne.w	80076f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01d      	beq.n	8007618 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075dc:	2208      	movs	r2, #8
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4413      	add	r3, r2
 80075e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f023 0307 	bic.w	r3, r3, #7
 80075f4:	3308      	adds	r3, #8
 80075f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <pvPortMalloc+0x6c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	617b      	str	r3, [r7, #20]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d069      	beq.n	80076f2 <pvPortMalloc+0x146>
 800761e:	4b42      	ldr	r3, [pc, #264]	; (8007728 <pvPortMalloc+0x17c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d864      	bhi.n	80076f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007628:	4b40      	ldr	r3, [pc, #256]	; (800772c <pvPortMalloc+0x180>)
 800762a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800762c:	4b3f      	ldr	r3, [pc, #252]	; (800772c <pvPortMalloc+0x180>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007632:	e004      	b.n	800763e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d903      	bls.n	8007650 <pvPortMalloc+0xa4>
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f1      	bne.n	8007634 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007650:	4b33      	ldr	r3, [pc, #204]	; (8007720 <pvPortMalloc+0x174>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	429a      	cmp	r2, r3
 8007658:	d04b      	beq.n	80076f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2208      	movs	r2, #8
 8007660:	4413      	add	r3, r2
 8007662:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	1ad2      	subs	r2, r2, r3
 8007674:	2308      	movs	r3, #8
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	429a      	cmp	r2, r3
 800767a:	d91f      	bls.n	80076bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800767c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <pvPortMalloc+0xf8>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	613b      	str	r3, [r7, #16]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	1ad2      	subs	r2, r2, r3
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076b6:	69b8      	ldr	r0, [r7, #24]
 80076b8:	f000 f8f8 	bl	80078ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076bc:	4b1a      	ldr	r3, [pc, #104]	; (8007728 <pvPortMalloc+0x17c>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <pvPortMalloc+0x17c>)
 80076c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076ca:	4b17      	ldr	r3, [pc, #92]	; (8007728 <pvPortMalloc+0x17c>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b18      	ldr	r3, [pc, #96]	; (8007730 <pvPortMalloc+0x184>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d203      	bcs.n	80076de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076d6:	4b14      	ldr	r3, [pc, #80]	; (8007728 <pvPortMalloc+0x17c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a15      	ldr	r2, [pc, #84]	; (8007730 <pvPortMalloc+0x184>)
 80076dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <pvPortMalloc+0x178>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	431a      	orrs	r2, r3
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	2200      	movs	r2, #0
 80076f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076f2:	f7fe fc8b 	bl	800600c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <pvPortMalloc+0x16a>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	60fb      	str	r3, [r7, #12]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <pvPortMalloc+0x168>
	return pvReturn;
 8007716:	69fb      	ldr	r3, [r7, #28]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3728      	adds	r7, #40	; 0x28
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20003198 	.word	0x20003198
 8007724:	200031a4 	.word	0x200031a4
 8007728:	2000319c 	.word	0x2000319c
 800772c:	20003190 	.word	0x20003190
 8007730:	200031a0 	.word	0x200031a0

08007734 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d048      	beq.n	80077d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007746:	2308      	movs	r3, #8
 8007748:	425b      	negs	r3, r3
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4413      	add	r3, r2
 800774e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <vPortFree+0xac>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4013      	ands	r3, r2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <vPortFree+0x44>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60fb      	str	r3, [r7, #12]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <vPortFree+0x62>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60bb      	str	r3, [r7, #8]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <vPortFree+0xac>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d019      	beq.n	80077d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d115      	bne.n	80077d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortFree+0xac>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077bc:	f7fe fc18 	bl	8005ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <vPortFree+0xb0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4413      	add	r3, r2
 80077ca:	4a06      	ldr	r2, [pc, #24]	; (80077e4 <vPortFree+0xb0>)
 80077cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ce:	6938      	ldr	r0, [r7, #16]
 80077d0:	f000 f86c 	bl	80078ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80077d4:	f7fe fc1a 	bl	800600c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077d8:	bf00      	nop
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	200031a4 	.word	0x200031a4
 80077e4:	2000319c 	.word	0x2000319c

080077e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077f4:	4b27      	ldr	r3, [pc, #156]	; (8007894 <prvHeapInit+0xac>)
 80077f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3307      	adds	r3, #7
 8007806:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <prvHeapInit+0xac>)
 8007818:	4413      	add	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007820:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <prvHeapInit+0xb0>)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007826:	4b1c      	ldr	r3, [pc, #112]	; (8007898 <prvHeapInit+0xb0>)
 8007828:	2200      	movs	r2, #0
 800782a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4413      	add	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007834:	2208      	movs	r2, #8
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0307 	bic.w	r3, r3, #7
 8007842:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4a15      	ldr	r2, [pc, #84]	; (800789c <prvHeapInit+0xb4>)
 8007848:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800784a:	4b14      	ldr	r3, [pc, #80]	; (800789c <prvHeapInit+0xb4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2200      	movs	r2, #0
 8007850:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007852:	4b12      	ldr	r3, [pc, #72]	; (800789c <prvHeapInit+0xb4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <prvHeapInit+0xb4>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <prvHeapInit+0xb8>)
 8007876:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <prvHeapInit+0xbc>)
 800787e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007880:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <prvHeapInit+0xc0>)
 8007882:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007886:	601a      	str	r2, [r3, #0]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20001190 	.word	0x20001190
 8007898:	20003190 	.word	0x20003190
 800789c:	20003198 	.word	0x20003198
 80078a0:	200031a0 	.word	0x200031a0
 80078a4:	2000319c 	.word	0x2000319c
 80078a8:	200031a4 	.word	0x200031a4

080078ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078b4:	4b27      	ldr	r3, [pc, #156]	; (8007954 <prvInsertBlockIntoFreeList+0xa8>)
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e002      	b.n	80078c0 <prvInsertBlockIntoFreeList+0x14>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d8f7      	bhi.n	80078ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	4413      	add	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d108      	bne.n	80078ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	441a      	add	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	441a      	add	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d118      	bne.n	8007934 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b14      	ldr	r3, [pc, #80]	; (8007958 <prvInsertBlockIntoFreeList+0xac>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d00d      	beq.n	800792a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	441a      	add	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e008      	b.n	800793c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <prvInsertBlockIntoFreeList+0xac>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	e003      	b.n	800793c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d002      	beq.n	800794a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr
 8007954:	20003190 	.word	0x20003190
 8007958:	20003198 	.word	0x20003198

0800795c <__errno>:
 800795c:	4b01      	ldr	r3, [pc, #4]	; (8007964 <__errno+0x8>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000010 	.word	0x20000010

08007968 <std>:
 8007968:	2300      	movs	r3, #0
 800796a:	b510      	push	{r4, lr}
 800796c:	4604      	mov	r4, r0
 800796e:	e9c0 3300 	strd	r3, r3, [r0]
 8007972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007976:	6083      	str	r3, [r0, #8]
 8007978:	8181      	strh	r1, [r0, #12]
 800797a:	6643      	str	r3, [r0, #100]	; 0x64
 800797c:	81c2      	strh	r2, [r0, #14]
 800797e:	6183      	str	r3, [r0, #24]
 8007980:	4619      	mov	r1, r3
 8007982:	2208      	movs	r2, #8
 8007984:	305c      	adds	r0, #92	; 0x5c
 8007986:	f000 f91a 	bl	8007bbe <memset>
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <std+0x38>)
 800798c:	6224      	str	r4, [r4, #32]
 800798e:	6263      	str	r3, [r4, #36]	; 0x24
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <std+0x3c>)
 8007992:	62a3      	str	r3, [r4, #40]	; 0x28
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <std+0x40>)
 8007996:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <std+0x44>)
 800799a:	6323      	str	r3, [r4, #48]	; 0x30
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	08008b11 	.word	0x08008b11
 80079a4:	08008b33 	.word	0x08008b33
 80079a8:	08008b6b 	.word	0x08008b6b
 80079ac:	08008b8f 	.word	0x08008b8f

080079b0 <_cleanup_r>:
 80079b0:	4901      	ldr	r1, [pc, #4]	; (80079b8 <_cleanup_r+0x8>)
 80079b2:	f000 b8af 	b.w	8007b14 <_fwalk_reent>
 80079b6:	bf00      	nop
 80079b8:	0800a6f1 	.word	0x0800a6f1

080079bc <__sfmoreglue>:
 80079bc:	2268      	movs	r2, #104	; 0x68
 80079be:	b570      	push	{r4, r5, r6, lr}
 80079c0:	1e4d      	subs	r5, r1, #1
 80079c2:	4355      	muls	r5, r2
 80079c4:	460e      	mov	r6, r1
 80079c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079ca:	f000 f921 	bl	8007c10 <_malloc_r>
 80079ce:	4604      	mov	r4, r0
 80079d0:	b140      	cbz	r0, 80079e4 <__sfmoreglue+0x28>
 80079d2:	2100      	movs	r1, #0
 80079d4:	e9c0 1600 	strd	r1, r6, [r0]
 80079d8:	300c      	adds	r0, #12
 80079da:	60a0      	str	r0, [r4, #8]
 80079dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079e0:	f000 f8ed 	bl	8007bbe <memset>
 80079e4:	4620      	mov	r0, r4
 80079e6:	bd70      	pop	{r4, r5, r6, pc}

080079e8 <__sfp_lock_acquire>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sfp_lock_acquire+0x8>)
 80079ea:	f000 b8d8 	b.w	8007b9e <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	200031a9 	.word	0x200031a9

080079f4 <__sfp_lock_release>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__sfp_lock_release+0x8>)
 80079f6:	f000 b8d3 	b.w	8007ba0 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	200031a9 	.word	0x200031a9

08007a00 <__sinit_lock_acquire>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__sinit_lock_acquire+0x8>)
 8007a02:	f000 b8cc 	b.w	8007b9e <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	200031aa 	.word	0x200031aa

08007a0c <__sinit_lock_release>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__sinit_lock_release+0x8>)
 8007a0e:	f000 b8c7 	b.w	8007ba0 <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	200031aa 	.word	0x200031aa

08007a18 <__sinit>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	f7ff fff0 	bl	8007a00 <__sinit_lock_acquire>
 8007a20:	69a3      	ldr	r3, [r4, #24]
 8007a22:	b11b      	cbz	r3, 8007a2c <__sinit+0x14>
 8007a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a28:	f7ff bff0 	b.w	8007a0c <__sinit_lock_release>
 8007a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a30:	6523      	str	r3, [r4, #80]	; 0x50
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <__sinit+0x68>)
 8007a34:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <__sinit+0x6c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	bf08      	it	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	4620      	mov	r0, r4
 8007a42:	bf08      	it	eq
 8007a44:	61a3      	streq	r3, [r4, #24]
 8007a46:	f000 f81f 	bl	8007a88 <__sfp>
 8007a4a:	6060      	str	r0, [r4, #4]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 f81b 	bl	8007a88 <__sfp>
 8007a52:	60a0      	str	r0, [r4, #8]
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 f817 	bl	8007a88 <__sfp>
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	60e0      	str	r0, [r4, #12]
 8007a60:	6860      	ldr	r0, [r4, #4]
 8007a62:	f7ff ff81 	bl	8007968 <std>
 8007a66:	2201      	movs	r2, #1
 8007a68:	2109      	movs	r1, #9
 8007a6a:	68a0      	ldr	r0, [r4, #8]
 8007a6c:	f7ff ff7c 	bl	8007968 <std>
 8007a70:	2202      	movs	r2, #2
 8007a72:	2112      	movs	r1, #18
 8007a74:	68e0      	ldr	r0, [r4, #12]
 8007a76:	f7ff ff77 	bl	8007968 <std>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61a3      	str	r3, [r4, #24]
 8007a7e:	e7d1      	b.n	8007a24 <__sinit+0xc>
 8007a80:	0800c684 	.word	0x0800c684
 8007a84:	080079b1 	.word	0x080079b1

08007a88 <__sfp>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	f7ff ffac 	bl	80079e8 <__sfp_lock_acquire>
 8007a90:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <__sfp+0x84>)
 8007a92:	681e      	ldr	r6, [r3, #0]
 8007a94:	69b3      	ldr	r3, [r6, #24]
 8007a96:	b913      	cbnz	r3, 8007a9e <__sfp+0x16>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff ffbd 	bl	8007a18 <__sinit>
 8007a9e:	3648      	adds	r6, #72	; 0x48
 8007aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	d503      	bpl.n	8007ab0 <__sfp+0x28>
 8007aa8:	6833      	ldr	r3, [r6, #0]
 8007aaa:	b30b      	cbz	r3, 8007af0 <__sfp+0x68>
 8007aac:	6836      	ldr	r6, [r6, #0]
 8007aae:	e7f7      	b.n	8007aa0 <__sfp+0x18>
 8007ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ab4:	b9d5      	cbnz	r5, 8007aec <__sfp+0x64>
 8007ab6:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <__sfp+0x88>)
 8007ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007abc:	60e3      	str	r3, [r4, #12]
 8007abe:	6665      	str	r5, [r4, #100]	; 0x64
 8007ac0:	f000 f86c 	bl	8007b9c <__retarget_lock_init_recursive>
 8007ac4:	f7ff ff96 	bl	80079f4 <__sfp_lock_release>
 8007ac8:	2208      	movs	r2, #8
 8007aca:	4629      	mov	r1, r5
 8007acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ad4:	6025      	str	r5, [r4, #0]
 8007ad6:	61a5      	str	r5, [r4, #24]
 8007ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007adc:	f000 f86f 	bl	8007bbe <memset>
 8007ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ae8:	4620      	mov	r0, r4
 8007aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aec:	3468      	adds	r4, #104	; 0x68
 8007aee:	e7d9      	b.n	8007aa4 <__sfp+0x1c>
 8007af0:	2104      	movs	r1, #4
 8007af2:	4638      	mov	r0, r7
 8007af4:	f7ff ff62 	bl	80079bc <__sfmoreglue>
 8007af8:	4604      	mov	r4, r0
 8007afa:	6030      	str	r0, [r6, #0]
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1d5      	bne.n	8007aac <__sfp+0x24>
 8007b00:	f7ff ff78 	bl	80079f4 <__sfp_lock_release>
 8007b04:	230c      	movs	r3, #12
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	e7ee      	b.n	8007ae8 <__sfp+0x60>
 8007b0a:	bf00      	nop
 8007b0c:	0800c684 	.word	0x0800c684
 8007b10:	ffff0001 	.word	0xffff0001

08007b14 <_fwalk_reent>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	4606      	mov	r6, r0
 8007b1a:	4688      	mov	r8, r1
 8007b1c:	2700      	movs	r7, #0
 8007b1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b26:	f1b9 0901 	subs.w	r9, r9, #1
 8007b2a:	d505      	bpl.n	8007b38 <_fwalk_reent+0x24>
 8007b2c:	6824      	ldr	r4, [r4, #0]
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d1f7      	bne.n	8007b22 <_fwalk_reent+0xe>
 8007b32:	4638      	mov	r0, r7
 8007b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b38:	89ab      	ldrh	r3, [r5, #12]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d907      	bls.n	8007b4e <_fwalk_reent+0x3a>
 8007b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b42:	3301      	adds	r3, #1
 8007b44:	d003      	beq.n	8007b4e <_fwalk_reent+0x3a>
 8007b46:	4629      	mov	r1, r5
 8007b48:	4630      	mov	r0, r6
 8007b4a:	47c0      	blx	r8
 8007b4c:	4307      	orrs	r7, r0
 8007b4e:	3568      	adds	r5, #104	; 0x68
 8007b50:	e7e9      	b.n	8007b26 <_fwalk_reent+0x12>
	...

08007b54 <__libc_init_array>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	2600      	movs	r6, #0
 8007b58:	4d0c      	ldr	r5, [pc, #48]	; (8007b8c <__libc_init_array+0x38>)
 8007b5a:	4c0d      	ldr	r4, [pc, #52]	; (8007b90 <__libc_init_array+0x3c>)
 8007b5c:	1b64      	subs	r4, r4, r5
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	42a6      	cmp	r6, r4
 8007b62:	d109      	bne.n	8007b78 <__libc_init_array+0x24>
 8007b64:	f004 fbc4 	bl	800c2f0 <_init>
 8007b68:	2600      	movs	r6, #0
 8007b6a:	4d0a      	ldr	r5, [pc, #40]	; (8007b94 <__libc_init_array+0x40>)
 8007b6c:	4c0a      	ldr	r4, [pc, #40]	; (8007b98 <__libc_init_array+0x44>)
 8007b6e:	1b64      	subs	r4, r4, r5
 8007b70:	10a4      	asrs	r4, r4, #2
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d105      	bne.n	8007b82 <__libc_init_array+0x2e>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7c:	4798      	blx	r3
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7ee      	b.n	8007b60 <__libc_init_array+0xc>
 8007b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b86:	4798      	blx	r3
 8007b88:	3601      	adds	r6, #1
 8007b8a:	e7f2      	b.n	8007b72 <__libc_init_array+0x1e>
 8007b8c:	0800cacc 	.word	0x0800cacc
 8007b90:	0800cacc 	.word	0x0800cacc
 8007b94:	0800cacc 	.word	0x0800cacc
 8007b98:	0800cad0 	.word	0x0800cad0

08007b9c <__retarget_lock_init_recursive>:
 8007b9c:	4770      	bx	lr

08007b9e <__retarget_lock_acquire_recursive>:
 8007b9e:	4770      	bx	lr

08007ba0 <__retarget_lock_release_recursive>:
 8007ba0:	4770      	bx	lr

08007ba2 <memcpy>:
 8007ba2:	440a      	add	r2, r1
 8007ba4:	4291      	cmp	r1, r2
 8007ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007baa:	d100      	bne.n	8007bae <memcpy+0xc>
 8007bac:	4770      	bx	lr
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb4:	4291      	cmp	r1, r2
 8007bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bba:	d1f9      	bne.n	8007bb0 <memcpy+0xe>
 8007bbc:	bd10      	pop	{r4, pc}

08007bbe <memset>:
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d100      	bne.n	8007bc8 <memset+0xa>
 8007bc6:	4770      	bx	lr
 8007bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bcc:	e7f9      	b.n	8007bc2 <memset+0x4>
	...

08007bd0 <sbrk_aligned>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	4e0e      	ldr	r6, [pc, #56]	; (8007c0c <sbrk_aligned+0x3c>)
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	6831      	ldr	r1, [r6, #0]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	b911      	cbnz	r1, 8007be2 <sbrk_aligned+0x12>
 8007bdc:	f000 ff64 	bl	8008aa8 <_sbrk_r>
 8007be0:	6030      	str	r0, [r6, #0]
 8007be2:	4621      	mov	r1, r4
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 ff5f 	bl	8008aa8 <_sbrk_r>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d00a      	beq.n	8007c04 <sbrk_aligned+0x34>
 8007bee:	1cc4      	adds	r4, r0, #3
 8007bf0:	f024 0403 	bic.w	r4, r4, #3
 8007bf4:	42a0      	cmp	r0, r4
 8007bf6:	d007      	beq.n	8007c08 <sbrk_aligned+0x38>
 8007bf8:	1a21      	subs	r1, r4, r0
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 ff54 	bl	8008aa8 <_sbrk_r>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d101      	bne.n	8007c08 <sbrk_aligned+0x38>
 8007c04:	f04f 34ff 	mov.w	r4, #4294967295
 8007c08:	4620      	mov	r0, r4
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	200031b0 	.word	0x200031b0

08007c10 <_malloc_r>:
 8007c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	1ccd      	adds	r5, r1, #3
 8007c16:	f025 0503 	bic.w	r5, r5, #3
 8007c1a:	3508      	adds	r5, #8
 8007c1c:	2d0c      	cmp	r5, #12
 8007c1e:	bf38      	it	cc
 8007c20:	250c      	movcc	r5, #12
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	4607      	mov	r7, r0
 8007c26:	db01      	blt.n	8007c2c <_malloc_r+0x1c>
 8007c28:	42a9      	cmp	r1, r5
 8007c2a:	d905      	bls.n	8007c38 <_malloc_r+0x28>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	2600      	movs	r6, #0
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	4630      	mov	r0, r6
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	4e2e      	ldr	r6, [pc, #184]	; (8007cf4 <_malloc_r+0xe4>)
 8007c3a:	f003 f939 	bl	800aeb0 <__malloc_lock>
 8007c3e:	6833      	ldr	r3, [r6, #0]
 8007c40:	461c      	mov	r4, r3
 8007c42:	bb34      	cbnz	r4, 8007c92 <_malloc_r+0x82>
 8007c44:	4629      	mov	r1, r5
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7ff ffc2 	bl	8007bd0 <sbrk_aligned>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	4604      	mov	r4, r0
 8007c50:	d14d      	bne.n	8007cee <_malloc_r+0xde>
 8007c52:	6834      	ldr	r4, [r6, #0]
 8007c54:	4626      	mov	r6, r4
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	d140      	bne.n	8007cdc <_malloc_r+0xcc>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4638      	mov	r0, r7
 8007c60:	eb04 0803 	add.w	r8, r4, r3
 8007c64:	f000 ff20 	bl	8008aa8 <_sbrk_r>
 8007c68:	4580      	cmp	r8, r0
 8007c6a:	d13a      	bne.n	8007ce2 <_malloc_r+0xd2>
 8007c6c:	6821      	ldr	r1, [r4, #0]
 8007c6e:	3503      	adds	r5, #3
 8007c70:	1a6d      	subs	r5, r5, r1
 8007c72:	f025 0503 	bic.w	r5, r5, #3
 8007c76:	3508      	adds	r5, #8
 8007c78:	2d0c      	cmp	r5, #12
 8007c7a:	bf38      	it	cc
 8007c7c:	250c      	movcc	r5, #12
 8007c7e:	4638      	mov	r0, r7
 8007c80:	4629      	mov	r1, r5
 8007c82:	f7ff ffa5 	bl	8007bd0 <sbrk_aligned>
 8007c86:	3001      	adds	r0, #1
 8007c88:	d02b      	beq.n	8007ce2 <_malloc_r+0xd2>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	442b      	add	r3, r5
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	e00e      	b.n	8007cb0 <_malloc_r+0xa0>
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	1b52      	subs	r2, r2, r5
 8007c96:	d41e      	bmi.n	8007cd6 <_malloc_r+0xc6>
 8007c98:	2a0b      	cmp	r2, #11
 8007c9a:	d916      	bls.n	8007cca <_malloc_r+0xba>
 8007c9c:	1961      	adds	r1, r4, r5
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	6025      	str	r5, [r4, #0]
 8007ca2:	bf18      	it	ne
 8007ca4:	6059      	strne	r1, [r3, #4]
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	bf08      	it	eq
 8007caa:	6031      	streq	r1, [r6, #0]
 8007cac:	5162      	str	r2, [r4, r5]
 8007cae:	604b      	str	r3, [r1, #4]
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f104 060b 	add.w	r6, r4, #11
 8007cb6:	f003 f901 	bl	800aebc <__malloc_unlock>
 8007cba:	f026 0607 	bic.w	r6, r6, #7
 8007cbe:	1d23      	adds	r3, r4, #4
 8007cc0:	1af2      	subs	r2, r6, r3
 8007cc2:	d0b6      	beq.n	8007c32 <_malloc_r+0x22>
 8007cc4:	1b9b      	subs	r3, r3, r6
 8007cc6:	50a3      	str	r3, [r4, r2]
 8007cc8:	e7b3      	b.n	8007c32 <_malloc_r+0x22>
 8007cca:	6862      	ldr	r2, [r4, #4]
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	bf0c      	ite	eq
 8007cd0:	6032      	streq	r2, [r6, #0]
 8007cd2:	605a      	strne	r2, [r3, #4]
 8007cd4:	e7ec      	b.n	8007cb0 <_malloc_r+0xa0>
 8007cd6:	4623      	mov	r3, r4
 8007cd8:	6864      	ldr	r4, [r4, #4]
 8007cda:	e7b2      	b.n	8007c42 <_malloc_r+0x32>
 8007cdc:	4634      	mov	r4, r6
 8007cde:	6876      	ldr	r6, [r6, #4]
 8007ce0:	e7b9      	b.n	8007c56 <_malloc_r+0x46>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	f003 f8e8 	bl	800aebc <__malloc_unlock>
 8007cec:	e7a1      	b.n	8007c32 <_malloc_r+0x22>
 8007cee:	6025      	str	r5, [r4, #0]
 8007cf0:	e7de      	b.n	8007cb0 <_malloc_r+0xa0>
 8007cf2:	bf00      	nop
 8007cf4:	200031ac 	.word	0x200031ac

08007cf8 <__cvt>:
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfe:	461f      	mov	r7, r3
 8007d00:	bfbb      	ittet	lt
 8007d02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007d06:	461f      	movlt	r7, r3
 8007d08:	2300      	movge	r3, #0
 8007d0a:	232d      	movlt	r3, #45	; 0x2d
 8007d0c:	b088      	sub	sp, #32
 8007d0e:	4614      	mov	r4, r2
 8007d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007d14:	7013      	strb	r3, [r2, #0]
 8007d16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d18:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007d1c:	f023 0820 	bic.w	r8, r3, #32
 8007d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d24:	d005      	beq.n	8007d32 <__cvt+0x3a>
 8007d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d2a:	d100      	bne.n	8007d2e <__cvt+0x36>
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e000      	b.n	8007d34 <__cvt+0x3c>
 8007d32:	2303      	movs	r3, #3
 8007d34:	aa07      	add	r2, sp, #28
 8007d36:	9204      	str	r2, [sp, #16]
 8007d38:	aa06      	add	r2, sp, #24
 8007d3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007d3e:	e9cd 3500 	strd	r3, r5, [sp]
 8007d42:	4622      	mov	r2, r4
 8007d44:	463b      	mov	r3, r7
 8007d46:	f001 fe63 	bl	8009a10 <_dtoa_r>
 8007d4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d4e:	4606      	mov	r6, r0
 8007d50:	d102      	bne.n	8007d58 <__cvt+0x60>
 8007d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d54:	07db      	lsls	r3, r3, #31
 8007d56:	d522      	bpl.n	8007d9e <__cvt+0xa6>
 8007d58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d5c:	eb06 0905 	add.w	r9, r6, r5
 8007d60:	d110      	bne.n	8007d84 <__cvt+0x8c>
 8007d62:	7833      	ldrb	r3, [r6, #0]
 8007d64:	2b30      	cmp	r3, #48	; 0x30
 8007d66:	d10a      	bne.n	8007d7e <__cvt+0x86>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4639      	mov	r1, r7
 8007d70:	f7f8 fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007d74:	b918      	cbnz	r0, 8007d7e <__cvt+0x86>
 8007d76:	f1c5 0501 	rsb	r5, r5, #1
 8007d7a:	f8ca 5000 	str.w	r5, [sl]
 8007d7e:	f8da 3000 	ldr.w	r3, [sl]
 8007d82:	4499      	add	r9, r3
 8007d84:	2200      	movs	r2, #0
 8007d86:	2300      	movs	r3, #0
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007d90:	b108      	cbz	r0, 8007d96 <__cvt+0x9e>
 8007d92:	f8cd 901c 	str.w	r9, [sp, #28]
 8007d96:	2230      	movs	r2, #48	; 0x30
 8007d98:	9b07      	ldr	r3, [sp, #28]
 8007d9a:	454b      	cmp	r3, r9
 8007d9c:	d307      	bcc.n	8007dae <__cvt+0xb6>
 8007d9e:	4630      	mov	r0, r6
 8007da0:	9b07      	ldr	r3, [sp, #28]
 8007da2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007da4:	1b9b      	subs	r3, r3, r6
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	b008      	add	sp, #32
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	9107      	str	r1, [sp, #28]
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e7f0      	b.n	8007d98 <__cvt+0xa0>

08007db6 <__exponent>:
 8007db6:	4603      	mov	r3, r0
 8007db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	f803 2b02 	strb.w	r2, [r3], #2
 8007dc0:	bfb6      	itet	lt
 8007dc2:	222d      	movlt	r2, #45	; 0x2d
 8007dc4:	222b      	movge	r2, #43	; 0x2b
 8007dc6:	4249      	neglt	r1, r1
 8007dc8:	2909      	cmp	r1, #9
 8007dca:	7042      	strb	r2, [r0, #1]
 8007dcc:	dd2b      	ble.n	8007e26 <__exponent+0x70>
 8007dce:	f10d 0407 	add.w	r4, sp, #7
 8007dd2:	46a4      	mov	ip, r4
 8007dd4:	270a      	movs	r7, #10
 8007dd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dda:	460a      	mov	r2, r1
 8007ddc:	46a6      	mov	lr, r4
 8007dde:	fb07 1516 	mls	r5, r7, r6, r1
 8007de2:	2a63      	cmp	r2, #99	; 0x63
 8007de4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007de8:	4631      	mov	r1, r6
 8007dea:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007df2:	dcf0      	bgt.n	8007dd6 <__exponent+0x20>
 8007df4:	3130      	adds	r1, #48	; 0x30
 8007df6:	f1ae 0502 	sub.w	r5, lr, #2
 8007dfa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007dfe:	4629      	mov	r1, r5
 8007e00:	1c44      	adds	r4, r0, #1
 8007e02:	4561      	cmp	r1, ip
 8007e04:	d30a      	bcc.n	8007e1c <__exponent+0x66>
 8007e06:	f10d 0209 	add.w	r2, sp, #9
 8007e0a:	eba2 020e 	sub.w	r2, r2, lr
 8007e0e:	4565      	cmp	r5, ip
 8007e10:	bf88      	it	hi
 8007e12:	2200      	movhi	r2, #0
 8007e14:	4413      	add	r3, r2
 8007e16:	1a18      	subs	r0, r3, r0
 8007e18:	b003      	add	sp, #12
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e24:	e7ed      	b.n	8007e02 <__exponent+0x4c>
 8007e26:	2330      	movs	r3, #48	; 0x30
 8007e28:	3130      	adds	r1, #48	; 0x30
 8007e2a:	7083      	strb	r3, [r0, #2]
 8007e2c:	70c1      	strb	r1, [r0, #3]
 8007e2e:	1d03      	adds	r3, r0, #4
 8007e30:	e7f1      	b.n	8007e16 <__exponent+0x60>
	...

08007e34 <_printf_float>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	b091      	sub	sp, #68	; 0x44
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007e40:	4616      	mov	r6, r2
 8007e42:	461f      	mov	r7, r3
 8007e44:	4605      	mov	r5, r0
 8007e46:	f002 fff5 	bl	800ae34 <_localeconv_r>
 8007e4a:	6803      	ldr	r3, [r0, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	f7f8 f97e 	bl	8000150 <strlen>
 8007e54:	2300      	movs	r3, #0
 8007e56:	930e      	str	r3, [sp, #56]	; 0x38
 8007e58:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5c:	900a      	str	r0, [sp, #40]	; 0x28
 8007e5e:	3307      	adds	r3, #7
 8007e60:	f023 0307 	bic.w	r3, r3, #7
 8007e64:	f103 0208 	add.w	r2, r3, #8
 8007e68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007e6c:	f8d4 b000 	ldr.w	fp, [r4]
 8007e70:	f8c8 2000 	str.w	r2, [r8]
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007e80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	4b9c      	ldr	r3, [pc, #624]	; (8008100 <_printf_float+0x2cc>)
 8007e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e90:	f7f8 fdbc 	bl	8000a0c <__aeabi_dcmpun>
 8007e94:	bb70      	cbnz	r0, 8007ef4 <_printf_float+0xc0>
 8007e96:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4b98      	ldr	r3, [pc, #608]	; (8008100 <_printf_float+0x2cc>)
 8007e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ea0:	f7f8 fd96 	bl	80009d0 <__aeabi_dcmple>
 8007ea4:	bb30      	cbnz	r0, 8007ef4 <_printf_float+0xc0>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4651      	mov	r1, sl
 8007eae:	f7f8 fd85 	bl	80009bc <__aeabi_dcmplt>
 8007eb2:	b110      	cbz	r0, 8007eba <_printf_float+0x86>
 8007eb4:	232d      	movs	r3, #45	; 0x2d
 8007eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eba:	4b92      	ldr	r3, [pc, #584]	; (8008104 <_printf_float+0x2d0>)
 8007ebc:	4892      	ldr	r0, [pc, #584]	; (8008108 <_printf_float+0x2d4>)
 8007ebe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ec2:	bf94      	ite	ls
 8007ec4:	4698      	movls	r8, r3
 8007ec6:	4680      	movhi	r8, r0
 8007ec8:	2303      	movs	r3, #3
 8007eca:	f04f 0a00 	mov.w	sl, #0
 8007ece:	6123      	str	r3, [r4, #16]
 8007ed0:	f02b 0304 	bic.w	r3, fp, #4
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	4633      	mov	r3, r6
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4628      	mov	r0, r5
 8007edc:	9700      	str	r7, [sp, #0]
 8007ede:	aa0f      	add	r2, sp, #60	; 0x3c
 8007ee0:	f000 f9d4 	bl	800828c <_printf_common>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f040 8090 	bne.w	800800a <_printf_float+0x1d6>
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b011      	add	sp, #68	; 0x44
 8007ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	4653      	mov	r3, sl
 8007ef8:	4640      	mov	r0, r8
 8007efa:	4651      	mov	r1, sl
 8007efc:	f7f8 fd86 	bl	8000a0c <__aeabi_dcmpun>
 8007f00:	b148      	cbz	r0, 8007f16 <_printf_float+0xe2>
 8007f02:	f1ba 0f00 	cmp.w	sl, #0
 8007f06:	bfb8      	it	lt
 8007f08:	232d      	movlt	r3, #45	; 0x2d
 8007f0a:	4880      	ldr	r0, [pc, #512]	; (800810c <_printf_float+0x2d8>)
 8007f0c:	bfb8      	it	lt
 8007f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f12:	4b7f      	ldr	r3, [pc, #508]	; (8008110 <_printf_float+0x2dc>)
 8007f14:	e7d3      	b.n	8007ebe <_printf_float+0x8a>
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	d142      	bne.n	8007fa6 <_printf_float+0x172>
 8007f20:	2306      	movs	r3, #6
 8007f22:	6063      	str	r3, [r4, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	9206      	str	r2, [sp, #24]
 8007f28:	aa0e      	add	r2, sp, #56	; 0x38
 8007f2a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007f2e:	aa0d      	add	r2, sp, #52	; 0x34
 8007f30:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007f34:	9203      	str	r2, [sp, #12]
 8007f36:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007f3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	6863      	ldr	r3, [r4, #4]
 8007f42:	4642      	mov	r2, r8
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4628      	mov	r0, r5
 8007f48:	4653      	mov	r3, sl
 8007f4a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f4c:	f7ff fed4 	bl	8007cf8 <__cvt>
 8007f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f52:	4680      	mov	r8, r0
 8007f54:	2947      	cmp	r1, #71	; 0x47
 8007f56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f58:	d108      	bne.n	8007f6c <_printf_float+0x138>
 8007f5a:	1cc8      	adds	r0, r1, #3
 8007f5c:	db02      	blt.n	8007f64 <_printf_float+0x130>
 8007f5e:	6863      	ldr	r3, [r4, #4]
 8007f60:	4299      	cmp	r1, r3
 8007f62:	dd40      	ble.n	8007fe6 <_printf_float+0x1b2>
 8007f64:	f1a9 0902 	sub.w	r9, r9, #2
 8007f68:	fa5f f989 	uxtb.w	r9, r9
 8007f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f70:	d81f      	bhi.n	8007fb2 <_printf_float+0x17e>
 8007f72:	464a      	mov	r2, r9
 8007f74:	3901      	subs	r1, #1
 8007f76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f7a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f7c:	f7ff ff1b 	bl	8007db6 <__exponent>
 8007f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f82:	4682      	mov	sl, r0
 8007f84:	1813      	adds	r3, r2, r0
 8007f86:	2a01      	cmp	r2, #1
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	dc02      	bgt.n	8007f92 <_printf_float+0x15e>
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	07d2      	lsls	r2, r2, #31
 8007f90:	d501      	bpl.n	8007f96 <_printf_float+0x162>
 8007f92:	3301      	adds	r3, #1
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d09b      	beq.n	8007ed6 <_printf_float+0xa2>
 8007f9e:	232d      	movs	r3, #45	; 0x2d
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	e797      	b.n	8007ed6 <_printf_float+0xa2>
 8007fa6:	2947      	cmp	r1, #71	; 0x47
 8007fa8:	d1bc      	bne.n	8007f24 <_printf_float+0xf0>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1ba      	bne.n	8007f24 <_printf_float+0xf0>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e7b7      	b.n	8007f22 <_printf_float+0xee>
 8007fb2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007fb6:	d118      	bne.n	8007fea <_printf_float+0x1b6>
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	6863      	ldr	r3, [r4, #4]
 8007fbc:	dd0b      	ble.n	8007fd6 <_printf_float+0x1a2>
 8007fbe:	6121      	str	r1, [r4, #16]
 8007fc0:	b913      	cbnz	r3, 8007fc8 <_printf_float+0x194>
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	07d0      	lsls	r0, r2, #31
 8007fc6:	d502      	bpl.n	8007fce <_printf_float+0x19a>
 8007fc8:	3301      	adds	r3, #1
 8007fca:	440b      	add	r3, r1
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	f04f 0a00 	mov.w	sl, #0
 8007fd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fd4:	e7df      	b.n	8007f96 <_printf_float+0x162>
 8007fd6:	b913      	cbnz	r3, 8007fde <_printf_float+0x1aa>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	07d2      	lsls	r2, r2, #31
 8007fdc:	d501      	bpl.n	8007fe2 <_printf_float+0x1ae>
 8007fde:	3302      	adds	r3, #2
 8007fe0:	e7f4      	b.n	8007fcc <_printf_float+0x198>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7f2      	b.n	8007fcc <_printf_float+0x198>
 8007fe6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fec:	4299      	cmp	r1, r3
 8007fee:	db05      	blt.n	8007ffc <_printf_float+0x1c8>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	6121      	str	r1, [r4, #16]
 8007ff4:	07d8      	lsls	r0, r3, #31
 8007ff6:	d5ea      	bpl.n	8007fce <_printf_float+0x19a>
 8007ff8:	1c4b      	adds	r3, r1, #1
 8007ffa:	e7e7      	b.n	8007fcc <_printf_float+0x198>
 8007ffc:	2900      	cmp	r1, #0
 8007ffe:	bfcc      	ite	gt
 8008000:	2201      	movgt	r2, #1
 8008002:	f1c1 0202 	rsble	r2, r1, #2
 8008006:	4413      	add	r3, r2
 8008008:	e7e0      	b.n	8007fcc <_printf_float+0x198>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	055a      	lsls	r2, r3, #21
 800800e:	d407      	bmi.n	8008020 <_printf_float+0x1ec>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	4642      	mov	r2, r8
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	d12b      	bne.n	8008076 <_printf_float+0x242>
 800801e:	e764      	b.n	8007eea <_printf_float+0xb6>
 8008020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008024:	f240 80dd 	bls.w	80081e2 <_printf_float+0x3ae>
 8008028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	f7f8 fcba 	bl	80009a8 <__aeabi_dcmpeq>
 8008034:	2800      	cmp	r0, #0
 8008036:	d033      	beq.n	80080a0 <_printf_float+0x26c>
 8008038:	2301      	movs	r3, #1
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	4a35      	ldr	r2, [pc, #212]	; (8008114 <_printf_float+0x2e0>)
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f af51 	beq.w	8007eea <_printf_float+0xb6>
 8008048:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800804c:	429a      	cmp	r2, r3
 800804e:	db02      	blt.n	8008056 <_printf_float+0x222>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	07d8      	lsls	r0, r3, #31
 8008054:	d50f      	bpl.n	8008076 <_printf_float+0x242>
 8008056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	f43f af42 	beq.w	8007eea <_printf_float+0xb6>
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	f104 091a 	add.w	r9, r4, #26
 800806e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008070:	3b01      	subs	r3, #1
 8008072:	4543      	cmp	r3, r8
 8008074:	dc09      	bgt.n	800808a <_printf_float+0x256>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	079b      	lsls	r3, r3, #30
 800807a:	f100 8102 	bmi.w	8008282 <_printf_float+0x44e>
 800807e:	68e0      	ldr	r0, [r4, #12]
 8008080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008082:	4298      	cmp	r0, r3
 8008084:	bfb8      	it	lt
 8008086:	4618      	movlt	r0, r3
 8008088:	e731      	b.n	8007eee <_printf_float+0xba>
 800808a:	2301      	movs	r3, #1
 800808c:	464a      	mov	r2, r9
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	f43f af28 	beq.w	8007eea <_printf_float+0xb6>
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	e7e6      	b.n	800806e <_printf_float+0x23a>
 80080a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dc38      	bgt.n	8008118 <_printf_float+0x2e4>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	4a19      	ldr	r2, [pc, #100]	; (8008114 <_printf_float+0x2e0>)
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	f43f af1a 	beq.w	8007eea <_printf_float+0xb6>
 80080b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080ba:	4313      	orrs	r3, r2
 80080bc:	d102      	bne.n	80080c4 <_printf_float+0x290>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	07d9      	lsls	r1, r3, #31
 80080c2:	d5d8      	bpl.n	8008076 <_printf_float+0x242>
 80080c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b8      	blx	r7
 80080ce:	3001      	adds	r0, #1
 80080d0:	f43f af0b 	beq.w	8007eea <_printf_float+0xb6>
 80080d4:	f04f 0900 	mov.w	r9, #0
 80080d8:	f104 0a1a 	add.w	sl, r4, #26
 80080dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080de:	425b      	negs	r3, r3
 80080e0:	454b      	cmp	r3, r9
 80080e2:	dc01      	bgt.n	80080e8 <_printf_float+0x2b4>
 80080e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e6:	e794      	b.n	8008012 <_printf_float+0x1de>
 80080e8:	2301      	movs	r3, #1
 80080ea:	4652      	mov	r2, sl
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	f43f aef9 	beq.w	8007eea <_printf_float+0xb6>
 80080f8:	f109 0901 	add.w	r9, r9, #1
 80080fc:	e7ee      	b.n	80080dc <_printf_float+0x2a8>
 80080fe:	bf00      	nop
 8008100:	7fefffff 	.word	0x7fefffff
 8008104:	0800c688 	.word	0x0800c688
 8008108:	0800c68c 	.word	0x0800c68c
 800810c:	0800c694 	.word	0x0800c694
 8008110:	0800c690 	.word	0x0800c690
 8008114:	0800c698 	.word	0x0800c698
 8008118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800811a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800811c:	429a      	cmp	r2, r3
 800811e:	bfa8      	it	ge
 8008120:	461a      	movge	r2, r3
 8008122:	2a00      	cmp	r2, #0
 8008124:	4691      	mov	r9, r2
 8008126:	dc37      	bgt.n	8008198 <_printf_float+0x364>
 8008128:	f04f 0b00 	mov.w	fp, #0
 800812c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008130:	f104 021a 	add.w	r2, r4, #26
 8008134:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008138:	ebaa 0309 	sub.w	r3, sl, r9
 800813c:	455b      	cmp	r3, fp
 800813e:	dc33      	bgt.n	80081a8 <_printf_float+0x374>
 8008140:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008144:	429a      	cmp	r2, r3
 8008146:	db3b      	blt.n	80081c0 <_printf_float+0x38c>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	07da      	lsls	r2, r3, #31
 800814c:	d438      	bmi.n	80081c0 <_printf_float+0x38c>
 800814e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008150:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008152:	eba3 020a 	sub.w	r2, r3, sl
 8008156:	eba3 0901 	sub.w	r9, r3, r1
 800815a:	4591      	cmp	r9, r2
 800815c:	bfa8      	it	ge
 800815e:	4691      	movge	r9, r2
 8008160:	f1b9 0f00 	cmp.w	r9, #0
 8008164:	dc34      	bgt.n	80081d0 <_printf_float+0x39c>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800816e:	f104 0a1a 	add.w	sl, r4, #26
 8008172:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	eba3 0309 	sub.w	r3, r3, r9
 800817c:	4543      	cmp	r3, r8
 800817e:	f77f af7a 	ble.w	8008076 <_printf_float+0x242>
 8008182:	2301      	movs	r3, #1
 8008184:	4652      	mov	r2, sl
 8008186:	4631      	mov	r1, r6
 8008188:	4628      	mov	r0, r5
 800818a:	47b8      	blx	r7
 800818c:	3001      	adds	r0, #1
 800818e:	f43f aeac 	beq.w	8007eea <_printf_float+0xb6>
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	e7ec      	b.n	8008172 <_printf_float+0x33e>
 8008198:	4613      	mov	r3, r2
 800819a:	4631      	mov	r1, r6
 800819c:	4642      	mov	r2, r8
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	d1c0      	bne.n	8008128 <_printf_float+0x2f4>
 80081a6:	e6a0      	b.n	8007eea <_printf_float+0xb6>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f ae99 	beq.w	8007eea <_printf_float+0xb6>
 80081b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081ba:	f10b 0b01 	add.w	fp, fp, #1
 80081be:	e7b9      	b.n	8008134 <_printf_float+0x300>
 80081c0:	4631      	mov	r1, r6
 80081c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081c6:	4628      	mov	r0, r5
 80081c8:	47b8      	blx	r7
 80081ca:	3001      	adds	r0, #1
 80081cc:	d1bf      	bne.n	800814e <_printf_float+0x31a>
 80081ce:	e68c      	b.n	8007eea <_printf_float+0xb6>
 80081d0:	464b      	mov	r3, r9
 80081d2:	4631      	mov	r1, r6
 80081d4:	4628      	mov	r0, r5
 80081d6:	eb08 020a 	add.w	r2, r8, sl
 80081da:	47b8      	blx	r7
 80081dc:	3001      	adds	r0, #1
 80081de:	d1c2      	bne.n	8008166 <_printf_float+0x332>
 80081e0:	e683      	b.n	8007eea <_printf_float+0xb6>
 80081e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081e4:	2a01      	cmp	r2, #1
 80081e6:	dc01      	bgt.n	80081ec <_printf_float+0x3b8>
 80081e8:	07db      	lsls	r3, r3, #31
 80081ea:	d537      	bpl.n	800825c <_printf_float+0x428>
 80081ec:	2301      	movs	r3, #1
 80081ee:	4642      	mov	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f ae77 	beq.w	8007eea <_printf_float+0xb6>
 80081fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008200:	4631      	mov	r1, r6
 8008202:	4628      	mov	r0, r5
 8008204:	47b8      	blx	r7
 8008206:	3001      	adds	r0, #1
 8008208:	f43f ae6f 	beq.w	8007eea <_printf_float+0xb6>
 800820c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008210:	2200      	movs	r2, #0
 8008212:	2300      	movs	r3, #0
 8008214:	f7f8 fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8008218:	b9d8      	cbnz	r0, 8008252 <_printf_float+0x41e>
 800821a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800821c:	f108 0201 	add.w	r2, r8, #1
 8008220:	3b01      	subs	r3, #1
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	47b8      	blx	r7
 8008228:	3001      	adds	r0, #1
 800822a:	d10e      	bne.n	800824a <_printf_float+0x416>
 800822c:	e65d      	b.n	8007eea <_printf_float+0xb6>
 800822e:	2301      	movs	r3, #1
 8008230:	464a      	mov	r2, r9
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	f43f ae56 	beq.w	8007eea <_printf_float+0xb6>
 800823e:	f108 0801 	add.w	r8, r8, #1
 8008242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008244:	3b01      	subs	r3, #1
 8008246:	4543      	cmp	r3, r8
 8008248:	dcf1      	bgt.n	800822e <_printf_float+0x3fa>
 800824a:	4653      	mov	r3, sl
 800824c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008250:	e6e0      	b.n	8008014 <_printf_float+0x1e0>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	f104 091a 	add.w	r9, r4, #26
 800825a:	e7f2      	b.n	8008242 <_printf_float+0x40e>
 800825c:	2301      	movs	r3, #1
 800825e:	4642      	mov	r2, r8
 8008260:	e7df      	b.n	8008222 <_printf_float+0x3ee>
 8008262:	2301      	movs	r3, #1
 8008264:	464a      	mov	r2, r9
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	f43f ae3c 	beq.w	8007eea <_printf_float+0xb6>
 8008272:	f108 0801 	add.w	r8, r8, #1
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800827a:	1a5b      	subs	r3, r3, r1
 800827c:	4543      	cmp	r3, r8
 800827e:	dcf0      	bgt.n	8008262 <_printf_float+0x42e>
 8008280:	e6fd      	b.n	800807e <_printf_float+0x24a>
 8008282:	f04f 0800 	mov.w	r8, #0
 8008286:	f104 0919 	add.w	r9, r4, #25
 800828a:	e7f4      	b.n	8008276 <_printf_float+0x442>

0800828c <_printf_common>:
 800828c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008290:	4616      	mov	r6, r2
 8008292:	4699      	mov	r9, r3
 8008294:	688a      	ldr	r2, [r1, #8]
 8008296:	690b      	ldr	r3, [r1, #16]
 8008298:	4607      	mov	r7, r0
 800829a:	4293      	cmp	r3, r2
 800829c:	bfb8      	it	lt
 800829e:	4613      	movlt	r3, r2
 80082a0:	6033      	str	r3, [r6, #0]
 80082a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a6:	460c      	mov	r4, r1
 80082a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082ac:	b10a      	cbz	r2, 80082b2 <_printf_common+0x26>
 80082ae:	3301      	adds	r3, #1
 80082b0:	6033      	str	r3, [r6, #0]
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	0699      	lsls	r1, r3, #26
 80082b6:	bf42      	ittt	mi
 80082b8:	6833      	ldrmi	r3, [r6, #0]
 80082ba:	3302      	addmi	r3, #2
 80082bc:	6033      	strmi	r3, [r6, #0]
 80082be:	6825      	ldr	r5, [r4, #0]
 80082c0:	f015 0506 	ands.w	r5, r5, #6
 80082c4:	d106      	bne.n	80082d4 <_printf_common+0x48>
 80082c6:	f104 0a19 	add.w	sl, r4, #25
 80082ca:	68e3      	ldr	r3, [r4, #12]
 80082cc:	6832      	ldr	r2, [r6, #0]
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	42ab      	cmp	r3, r5
 80082d2:	dc28      	bgt.n	8008326 <_printf_common+0x9a>
 80082d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082d8:	1e13      	subs	r3, r2, #0
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	bf18      	it	ne
 80082de:	2301      	movne	r3, #1
 80082e0:	0692      	lsls	r2, r2, #26
 80082e2:	d42d      	bmi.n	8008340 <_printf_common+0xb4>
 80082e4:	4649      	mov	r1, r9
 80082e6:	4638      	mov	r0, r7
 80082e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ec:	47c0      	blx	r8
 80082ee:	3001      	adds	r0, #1
 80082f0:	d020      	beq.n	8008334 <_printf_common+0xa8>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	68e5      	ldr	r5, [r4, #12]
 80082f6:	f003 0306 	and.w	r3, r3, #6
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	bf18      	it	ne
 80082fe:	2500      	movne	r5, #0
 8008300:	6832      	ldr	r2, [r6, #0]
 8008302:	f04f 0600 	mov.w	r6, #0
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	bf08      	it	eq
 800830a:	1aad      	subeq	r5, r5, r2
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	bf08      	it	eq
 8008310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008314:	4293      	cmp	r3, r2
 8008316:	bfc4      	itt	gt
 8008318:	1a9b      	subgt	r3, r3, r2
 800831a:	18ed      	addgt	r5, r5, r3
 800831c:	341a      	adds	r4, #26
 800831e:	42b5      	cmp	r5, r6
 8008320:	d11a      	bne.n	8008358 <_printf_common+0xcc>
 8008322:	2000      	movs	r0, #0
 8008324:	e008      	b.n	8008338 <_printf_common+0xac>
 8008326:	2301      	movs	r3, #1
 8008328:	4652      	mov	r2, sl
 800832a:	4649      	mov	r1, r9
 800832c:	4638      	mov	r0, r7
 800832e:	47c0      	blx	r8
 8008330:	3001      	adds	r0, #1
 8008332:	d103      	bne.n	800833c <_printf_common+0xb0>
 8008334:	f04f 30ff 	mov.w	r0, #4294967295
 8008338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833c:	3501      	adds	r5, #1
 800833e:	e7c4      	b.n	80082ca <_printf_common+0x3e>
 8008340:	2030      	movs	r0, #48	; 0x30
 8008342:	18e1      	adds	r1, r4, r3
 8008344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800834e:	4422      	add	r2, r4
 8008350:	3302      	adds	r3, #2
 8008352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008356:	e7c5      	b.n	80082e4 <_printf_common+0x58>
 8008358:	2301      	movs	r3, #1
 800835a:	4622      	mov	r2, r4
 800835c:	4649      	mov	r1, r9
 800835e:	4638      	mov	r0, r7
 8008360:	47c0      	blx	r8
 8008362:	3001      	adds	r0, #1
 8008364:	d0e6      	beq.n	8008334 <_printf_common+0xa8>
 8008366:	3601      	adds	r6, #1
 8008368:	e7d9      	b.n	800831e <_printf_common+0x92>
	...

0800836c <_printf_i>:
 800836c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	7e0f      	ldrb	r7, [r1, #24]
 8008372:	4691      	mov	r9, r2
 8008374:	2f78      	cmp	r7, #120	; 0x78
 8008376:	4680      	mov	r8, r0
 8008378:	460c      	mov	r4, r1
 800837a:	469a      	mov	sl, r3
 800837c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800837e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008382:	d807      	bhi.n	8008394 <_printf_i+0x28>
 8008384:	2f62      	cmp	r7, #98	; 0x62
 8008386:	d80a      	bhi.n	800839e <_printf_i+0x32>
 8008388:	2f00      	cmp	r7, #0
 800838a:	f000 80d9 	beq.w	8008540 <_printf_i+0x1d4>
 800838e:	2f58      	cmp	r7, #88	; 0x58
 8008390:	f000 80a4 	beq.w	80084dc <_printf_i+0x170>
 8008394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800839c:	e03a      	b.n	8008414 <_printf_i+0xa8>
 800839e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083a2:	2b15      	cmp	r3, #21
 80083a4:	d8f6      	bhi.n	8008394 <_printf_i+0x28>
 80083a6:	a101      	add	r1, pc, #4	; (adr r1, 80083ac <_printf_i+0x40>)
 80083a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083ac:	08008405 	.word	0x08008405
 80083b0:	08008419 	.word	0x08008419
 80083b4:	08008395 	.word	0x08008395
 80083b8:	08008395 	.word	0x08008395
 80083bc:	08008395 	.word	0x08008395
 80083c0:	08008395 	.word	0x08008395
 80083c4:	08008419 	.word	0x08008419
 80083c8:	08008395 	.word	0x08008395
 80083cc:	08008395 	.word	0x08008395
 80083d0:	08008395 	.word	0x08008395
 80083d4:	08008395 	.word	0x08008395
 80083d8:	08008527 	.word	0x08008527
 80083dc:	08008449 	.word	0x08008449
 80083e0:	08008509 	.word	0x08008509
 80083e4:	08008395 	.word	0x08008395
 80083e8:	08008395 	.word	0x08008395
 80083ec:	08008549 	.word	0x08008549
 80083f0:	08008395 	.word	0x08008395
 80083f4:	08008449 	.word	0x08008449
 80083f8:	08008395 	.word	0x08008395
 80083fc:	08008395 	.word	0x08008395
 8008400:	08008511 	.word	0x08008511
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008414:	2301      	movs	r3, #1
 8008416:	e0a4      	b.n	8008562 <_printf_i+0x1f6>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	6829      	ldr	r1, [r5, #0]
 800841c:	0606      	lsls	r6, r0, #24
 800841e:	f101 0304 	add.w	r3, r1, #4
 8008422:	d50a      	bpl.n	800843a <_printf_i+0xce>
 8008424:	680e      	ldr	r6, [r1, #0]
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	2e00      	cmp	r6, #0
 800842a:	da03      	bge.n	8008434 <_printf_i+0xc8>
 800842c:	232d      	movs	r3, #45	; 0x2d
 800842e:	4276      	negs	r6, r6
 8008430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008434:	230a      	movs	r3, #10
 8008436:	485e      	ldr	r0, [pc, #376]	; (80085b0 <_printf_i+0x244>)
 8008438:	e019      	b.n	800846e <_printf_i+0x102>
 800843a:	680e      	ldr	r6, [r1, #0]
 800843c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	bf18      	it	ne
 8008444:	b236      	sxthne	r6, r6
 8008446:	e7ef      	b.n	8008428 <_printf_i+0xbc>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	6820      	ldr	r0, [r4, #0]
 800844c:	1d19      	adds	r1, r3, #4
 800844e:	6029      	str	r1, [r5, #0]
 8008450:	0601      	lsls	r1, r0, #24
 8008452:	d501      	bpl.n	8008458 <_printf_i+0xec>
 8008454:	681e      	ldr	r6, [r3, #0]
 8008456:	e002      	b.n	800845e <_printf_i+0xf2>
 8008458:	0646      	lsls	r6, r0, #25
 800845a:	d5fb      	bpl.n	8008454 <_printf_i+0xe8>
 800845c:	881e      	ldrh	r6, [r3, #0]
 800845e:	2f6f      	cmp	r7, #111	; 0x6f
 8008460:	bf0c      	ite	eq
 8008462:	2308      	moveq	r3, #8
 8008464:	230a      	movne	r3, #10
 8008466:	4852      	ldr	r0, [pc, #328]	; (80085b0 <_printf_i+0x244>)
 8008468:	2100      	movs	r1, #0
 800846a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800846e:	6865      	ldr	r5, [r4, #4]
 8008470:	2d00      	cmp	r5, #0
 8008472:	bfa8      	it	ge
 8008474:	6821      	ldrge	r1, [r4, #0]
 8008476:	60a5      	str	r5, [r4, #8]
 8008478:	bfa4      	itt	ge
 800847a:	f021 0104 	bicge.w	r1, r1, #4
 800847e:	6021      	strge	r1, [r4, #0]
 8008480:	b90e      	cbnz	r6, 8008486 <_printf_i+0x11a>
 8008482:	2d00      	cmp	r5, #0
 8008484:	d04d      	beq.n	8008522 <_printf_i+0x1b6>
 8008486:	4615      	mov	r5, r2
 8008488:	fbb6 f1f3 	udiv	r1, r6, r3
 800848c:	fb03 6711 	mls	r7, r3, r1, r6
 8008490:	5dc7      	ldrb	r7, [r0, r7]
 8008492:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008496:	4637      	mov	r7, r6
 8008498:	42bb      	cmp	r3, r7
 800849a:	460e      	mov	r6, r1
 800849c:	d9f4      	bls.n	8008488 <_printf_i+0x11c>
 800849e:	2b08      	cmp	r3, #8
 80084a0:	d10b      	bne.n	80084ba <_printf_i+0x14e>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	07de      	lsls	r6, r3, #31
 80084a6:	d508      	bpl.n	80084ba <_printf_i+0x14e>
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	6861      	ldr	r1, [r4, #4]
 80084ac:	4299      	cmp	r1, r3
 80084ae:	bfde      	ittt	le
 80084b0:	2330      	movle	r3, #48	; 0x30
 80084b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084ba:	1b52      	subs	r2, r2, r5
 80084bc:	6122      	str	r2, [r4, #16]
 80084be:	464b      	mov	r3, r9
 80084c0:	4621      	mov	r1, r4
 80084c2:	4640      	mov	r0, r8
 80084c4:	f8cd a000 	str.w	sl, [sp]
 80084c8:	aa03      	add	r2, sp, #12
 80084ca:	f7ff fedf 	bl	800828c <_printf_common>
 80084ce:	3001      	adds	r0, #1
 80084d0:	d14c      	bne.n	800856c <_printf_i+0x200>
 80084d2:	f04f 30ff 	mov.w	r0, #4294967295
 80084d6:	b004      	add	sp, #16
 80084d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084dc:	4834      	ldr	r0, [pc, #208]	; (80085b0 <_printf_i+0x244>)
 80084de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084e2:	6829      	ldr	r1, [r5, #0]
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80084ea:	6029      	str	r1, [r5, #0]
 80084ec:	061d      	lsls	r5, r3, #24
 80084ee:	d514      	bpl.n	800851a <_printf_i+0x1ae>
 80084f0:	07df      	lsls	r7, r3, #31
 80084f2:	bf44      	itt	mi
 80084f4:	f043 0320 	orrmi.w	r3, r3, #32
 80084f8:	6023      	strmi	r3, [r4, #0]
 80084fa:	b91e      	cbnz	r6, 8008504 <_printf_i+0x198>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	f023 0320 	bic.w	r3, r3, #32
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	2310      	movs	r3, #16
 8008506:	e7af      	b.n	8008468 <_printf_i+0xfc>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	f043 0320 	orr.w	r3, r3, #32
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	2378      	movs	r3, #120	; 0x78
 8008512:	4828      	ldr	r0, [pc, #160]	; (80085b4 <_printf_i+0x248>)
 8008514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008518:	e7e3      	b.n	80084e2 <_printf_i+0x176>
 800851a:	0659      	lsls	r1, r3, #25
 800851c:	bf48      	it	mi
 800851e:	b2b6      	uxthmi	r6, r6
 8008520:	e7e6      	b.n	80084f0 <_printf_i+0x184>
 8008522:	4615      	mov	r5, r2
 8008524:	e7bb      	b.n	800849e <_printf_i+0x132>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	6826      	ldr	r6, [r4, #0]
 800852a:	1d18      	adds	r0, r3, #4
 800852c:	6961      	ldr	r1, [r4, #20]
 800852e:	6028      	str	r0, [r5, #0]
 8008530:	0635      	lsls	r5, r6, #24
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	d501      	bpl.n	800853a <_printf_i+0x1ce>
 8008536:	6019      	str	r1, [r3, #0]
 8008538:	e002      	b.n	8008540 <_printf_i+0x1d4>
 800853a:	0670      	lsls	r0, r6, #25
 800853c:	d5fb      	bpl.n	8008536 <_printf_i+0x1ca>
 800853e:	8019      	strh	r1, [r3, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	4615      	mov	r5, r2
 8008544:	6123      	str	r3, [r4, #16]
 8008546:	e7ba      	b.n	80084be <_printf_i+0x152>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	2100      	movs	r1, #0
 800854c:	1d1a      	adds	r2, r3, #4
 800854e:	602a      	str	r2, [r5, #0]
 8008550:	681d      	ldr	r5, [r3, #0]
 8008552:	6862      	ldr	r2, [r4, #4]
 8008554:	4628      	mov	r0, r5
 8008556:	f002 fc9d 	bl	800ae94 <memchr>
 800855a:	b108      	cbz	r0, 8008560 <_printf_i+0x1f4>
 800855c:	1b40      	subs	r0, r0, r5
 800855e:	6060      	str	r0, [r4, #4]
 8008560:	6863      	ldr	r3, [r4, #4]
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	2300      	movs	r3, #0
 8008566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800856a:	e7a8      	b.n	80084be <_printf_i+0x152>
 800856c:	462a      	mov	r2, r5
 800856e:	4649      	mov	r1, r9
 8008570:	4640      	mov	r0, r8
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	47d0      	blx	sl
 8008576:	3001      	adds	r0, #1
 8008578:	d0ab      	beq.n	80084d2 <_printf_i+0x166>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	079b      	lsls	r3, r3, #30
 800857e:	d413      	bmi.n	80085a8 <_printf_i+0x23c>
 8008580:	68e0      	ldr	r0, [r4, #12]
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	4298      	cmp	r0, r3
 8008586:	bfb8      	it	lt
 8008588:	4618      	movlt	r0, r3
 800858a:	e7a4      	b.n	80084d6 <_printf_i+0x16a>
 800858c:	2301      	movs	r3, #1
 800858e:	4632      	mov	r2, r6
 8008590:	4649      	mov	r1, r9
 8008592:	4640      	mov	r0, r8
 8008594:	47d0      	blx	sl
 8008596:	3001      	adds	r0, #1
 8008598:	d09b      	beq.n	80084d2 <_printf_i+0x166>
 800859a:	3501      	adds	r5, #1
 800859c:	68e3      	ldr	r3, [r4, #12]
 800859e:	9903      	ldr	r1, [sp, #12]
 80085a0:	1a5b      	subs	r3, r3, r1
 80085a2:	42ab      	cmp	r3, r5
 80085a4:	dcf2      	bgt.n	800858c <_printf_i+0x220>
 80085a6:	e7eb      	b.n	8008580 <_printf_i+0x214>
 80085a8:	2500      	movs	r5, #0
 80085aa:	f104 0619 	add.w	r6, r4, #25
 80085ae:	e7f5      	b.n	800859c <_printf_i+0x230>
 80085b0:	0800c69a 	.word	0x0800c69a
 80085b4:	0800c6ab 	.word	0x0800c6ab

080085b8 <_scanf_float>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	b087      	sub	sp, #28
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	688b      	ldr	r3, [r1, #8]
 80085c2:	4617      	mov	r7, r2
 80085c4:	1e5a      	subs	r2, r3, #1
 80085c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085ca:	bf85      	ittet	hi
 80085cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085d0:	195b      	addhi	r3, r3, r5
 80085d2:	2300      	movls	r3, #0
 80085d4:	9302      	strhi	r3, [sp, #8]
 80085d6:	bf88      	it	hi
 80085d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80085dc:	468b      	mov	fp, r1
 80085de:	f04f 0500 	mov.w	r5, #0
 80085e2:	bf8c      	ite	hi
 80085e4:	608b      	strhi	r3, [r1, #8]
 80085e6:	9302      	strls	r3, [sp, #8]
 80085e8:	680b      	ldr	r3, [r1, #0]
 80085ea:	4680      	mov	r8, r0
 80085ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80085f0:	f84b 3b1c 	str.w	r3, [fp], #28
 80085f4:	460c      	mov	r4, r1
 80085f6:	465e      	mov	r6, fp
 80085f8:	46aa      	mov	sl, r5
 80085fa:	46a9      	mov	r9, r5
 80085fc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008600:	9501      	str	r5, [sp, #4]
 8008602:	68a2      	ldr	r2, [r4, #8]
 8008604:	b152      	cbz	r2, 800861c <_scanf_float+0x64>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b4e      	cmp	r3, #78	; 0x4e
 800860c:	d864      	bhi.n	80086d8 <_scanf_float+0x120>
 800860e:	2b40      	cmp	r3, #64	; 0x40
 8008610:	d83c      	bhi.n	800868c <_scanf_float+0xd4>
 8008612:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008616:	b2c8      	uxtb	r0, r1
 8008618:	280e      	cmp	r0, #14
 800861a:	d93a      	bls.n	8008692 <_scanf_float+0xda>
 800861c:	f1b9 0f00 	cmp.w	r9, #0
 8008620:	d003      	beq.n	800862a <_scanf_float+0x72>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800862e:	f1ba 0f01 	cmp.w	sl, #1
 8008632:	f200 8113 	bhi.w	800885c <_scanf_float+0x2a4>
 8008636:	455e      	cmp	r6, fp
 8008638:	f200 8105 	bhi.w	8008846 <_scanf_float+0x28e>
 800863c:	2501      	movs	r5, #1
 800863e:	4628      	mov	r0, r5
 8008640:	b007      	add	sp, #28
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800864a:	2a0d      	cmp	r2, #13
 800864c:	d8e6      	bhi.n	800861c <_scanf_float+0x64>
 800864e:	a101      	add	r1, pc, #4	; (adr r1, 8008654 <_scanf_float+0x9c>)
 8008650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008654:	08008793 	.word	0x08008793
 8008658:	0800861d 	.word	0x0800861d
 800865c:	0800861d 	.word	0x0800861d
 8008660:	0800861d 	.word	0x0800861d
 8008664:	080087f3 	.word	0x080087f3
 8008668:	080087cb 	.word	0x080087cb
 800866c:	0800861d 	.word	0x0800861d
 8008670:	0800861d 	.word	0x0800861d
 8008674:	080087a1 	.word	0x080087a1
 8008678:	0800861d 	.word	0x0800861d
 800867c:	0800861d 	.word	0x0800861d
 8008680:	0800861d 	.word	0x0800861d
 8008684:	0800861d 	.word	0x0800861d
 8008688:	08008759 	.word	0x08008759
 800868c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008690:	e7db      	b.n	800864a <_scanf_float+0x92>
 8008692:	290e      	cmp	r1, #14
 8008694:	d8c2      	bhi.n	800861c <_scanf_float+0x64>
 8008696:	a001      	add	r0, pc, #4	; (adr r0, 800869c <_scanf_float+0xe4>)
 8008698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800869c:	0800874b 	.word	0x0800874b
 80086a0:	0800861d 	.word	0x0800861d
 80086a4:	0800874b 	.word	0x0800874b
 80086a8:	080087df 	.word	0x080087df
 80086ac:	0800861d 	.word	0x0800861d
 80086b0:	080086f9 	.word	0x080086f9
 80086b4:	08008735 	.word	0x08008735
 80086b8:	08008735 	.word	0x08008735
 80086bc:	08008735 	.word	0x08008735
 80086c0:	08008735 	.word	0x08008735
 80086c4:	08008735 	.word	0x08008735
 80086c8:	08008735 	.word	0x08008735
 80086cc:	08008735 	.word	0x08008735
 80086d0:	08008735 	.word	0x08008735
 80086d4:	08008735 	.word	0x08008735
 80086d8:	2b6e      	cmp	r3, #110	; 0x6e
 80086da:	d809      	bhi.n	80086f0 <_scanf_float+0x138>
 80086dc:	2b60      	cmp	r3, #96	; 0x60
 80086de:	d8b2      	bhi.n	8008646 <_scanf_float+0x8e>
 80086e0:	2b54      	cmp	r3, #84	; 0x54
 80086e2:	d077      	beq.n	80087d4 <_scanf_float+0x21c>
 80086e4:	2b59      	cmp	r3, #89	; 0x59
 80086e6:	d199      	bne.n	800861c <_scanf_float+0x64>
 80086e8:	2d07      	cmp	r5, #7
 80086ea:	d197      	bne.n	800861c <_scanf_float+0x64>
 80086ec:	2508      	movs	r5, #8
 80086ee:	e029      	b.n	8008744 <_scanf_float+0x18c>
 80086f0:	2b74      	cmp	r3, #116	; 0x74
 80086f2:	d06f      	beq.n	80087d4 <_scanf_float+0x21c>
 80086f4:	2b79      	cmp	r3, #121	; 0x79
 80086f6:	e7f6      	b.n	80086e6 <_scanf_float+0x12e>
 80086f8:	6821      	ldr	r1, [r4, #0]
 80086fa:	05c8      	lsls	r0, r1, #23
 80086fc:	d51a      	bpl.n	8008734 <_scanf_float+0x17c>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008704:	6021      	str	r1, [r4, #0]
 8008706:	f109 0901 	add.w	r9, r9, #1
 800870a:	b11b      	cbz	r3, 8008714 <_scanf_float+0x15c>
 800870c:	3b01      	subs	r3, #1
 800870e:	3201      	adds	r2, #1
 8008710:	9302      	str	r3, [sp, #8]
 8008712:	60a2      	str	r2, [r4, #8]
 8008714:	68a3      	ldr	r3, [r4, #8]
 8008716:	3b01      	subs	r3, #1
 8008718:	60a3      	str	r3, [r4, #8]
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	3301      	adds	r3, #1
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3b01      	subs	r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	f340 8084 	ble.w	8008834 <_scanf_float+0x27c>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	3301      	adds	r3, #1
 8008730:	603b      	str	r3, [r7, #0]
 8008732:	e766      	b.n	8008602 <_scanf_float+0x4a>
 8008734:	eb1a 0f05 	cmn.w	sl, r5
 8008738:	f47f af70 	bne.w	800861c <_scanf_float+0x64>
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008742:	6022      	str	r2, [r4, #0]
 8008744:	f806 3b01 	strb.w	r3, [r6], #1
 8008748:	e7e4      	b.n	8008714 <_scanf_float+0x15c>
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	0610      	lsls	r0, r2, #24
 800874e:	f57f af65 	bpl.w	800861c <_scanf_float+0x64>
 8008752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008756:	e7f4      	b.n	8008742 <_scanf_float+0x18a>
 8008758:	f1ba 0f00 	cmp.w	sl, #0
 800875c:	d10e      	bne.n	800877c <_scanf_float+0x1c4>
 800875e:	f1b9 0f00 	cmp.w	r9, #0
 8008762:	d10e      	bne.n	8008782 <_scanf_float+0x1ca>
 8008764:	6822      	ldr	r2, [r4, #0]
 8008766:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800876a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800876e:	d108      	bne.n	8008782 <_scanf_float+0x1ca>
 8008770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008774:	f04f 0a01 	mov.w	sl, #1
 8008778:	6022      	str	r2, [r4, #0]
 800877a:	e7e3      	b.n	8008744 <_scanf_float+0x18c>
 800877c:	f1ba 0f02 	cmp.w	sl, #2
 8008780:	d055      	beq.n	800882e <_scanf_float+0x276>
 8008782:	2d01      	cmp	r5, #1
 8008784:	d002      	beq.n	800878c <_scanf_float+0x1d4>
 8008786:	2d04      	cmp	r5, #4
 8008788:	f47f af48 	bne.w	800861c <_scanf_float+0x64>
 800878c:	3501      	adds	r5, #1
 800878e:	b2ed      	uxtb	r5, r5
 8008790:	e7d8      	b.n	8008744 <_scanf_float+0x18c>
 8008792:	f1ba 0f01 	cmp.w	sl, #1
 8008796:	f47f af41 	bne.w	800861c <_scanf_float+0x64>
 800879a:	f04f 0a02 	mov.w	sl, #2
 800879e:	e7d1      	b.n	8008744 <_scanf_float+0x18c>
 80087a0:	b97d      	cbnz	r5, 80087c2 <_scanf_float+0x20a>
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	f47f af3c 	bne.w	8008622 <_scanf_float+0x6a>
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087b4:	f47f af39 	bne.w	800862a <_scanf_float+0x72>
 80087b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087bc:	2501      	movs	r5, #1
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	e7c0      	b.n	8008744 <_scanf_float+0x18c>
 80087c2:	2d03      	cmp	r5, #3
 80087c4:	d0e2      	beq.n	800878c <_scanf_float+0x1d4>
 80087c6:	2d05      	cmp	r5, #5
 80087c8:	e7de      	b.n	8008788 <_scanf_float+0x1d0>
 80087ca:	2d02      	cmp	r5, #2
 80087cc:	f47f af26 	bne.w	800861c <_scanf_float+0x64>
 80087d0:	2503      	movs	r5, #3
 80087d2:	e7b7      	b.n	8008744 <_scanf_float+0x18c>
 80087d4:	2d06      	cmp	r5, #6
 80087d6:	f47f af21 	bne.w	800861c <_scanf_float+0x64>
 80087da:	2507      	movs	r5, #7
 80087dc:	e7b2      	b.n	8008744 <_scanf_float+0x18c>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	0591      	lsls	r1, r2, #22
 80087e2:	f57f af1b 	bpl.w	800861c <_scanf_float+0x64>
 80087e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80087ea:	6022      	str	r2, [r4, #0]
 80087ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80087f0:	e7a8      	b.n	8008744 <_scanf_float+0x18c>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80087f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80087fc:	d006      	beq.n	800880c <_scanf_float+0x254>
 80087fe:	0550      	lsls	r0, r2, #21
 8008800:	f57f af0c 	bpl.w	800861c <_scanf_float+0x64>
 8008804:	f1b9 0f00 	cmp.w	r9, #0
 8008808:	f43f af0f 	beq.w	800862a <_scanf_float+0x72>
 800880c:	0591      	lsls	r1, r2, #22
 800880e:	bf58      	it	pl
 8008810:	9901      	ldrpl	r1, [sp, #4]
 8008812:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008816:	bf58      	it	pl
 8008818:	eba9 0101 	subpl.w	r1, r9, r1
 800881c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008820:	f04f 0900 	mov.w	r9, #0
 8008824:	bf58      	it	pl
 8008826:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800882a:	6022      	str	r2, [r4, #0]
 800882c:	e78a      	b.n	8008744 <_scanf_float+0x18c>
 800882e:	f04f 0a03 	mov.w	sl, #3
 8008832:	e787      	b.n	8008744 <_scanf_float+0x18c>
 8008834:	4639      	mov	r1, r7
 8008836:	4640      	mov	r0, r8
 8008838:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800883c:	4798      	blx	r3
 800883e:	2800      	cmp	r0, #0
 8008840:	f43f aedf 	beq.w	8008602 <_scanf_float+0x4a>
 8008844:	e6ea      	b.n	800861c <_scanf_float+0x64>
 8008846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800884a:	463a      	mov	r2, r7
 800884c:	4640      	mov	r0, r8
 800884e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008852:	4798      	blx	r3
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	3b01      	subs	r3, #1
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	e6ec      	b.n	8008636 <_scanf_float+0x7e>
 800885c:	1e6b      	subs	r3, r5, #1
 800885e:	2b06      	cmp	r3, #6
 8008860:	d825      	bhi.n	80088ae <_scanf_float+0x2f6>
 8008862:	2d02      	cmp	r5, #2
 8008864:	d836      	bhi.n	80088d4 <_scanf_float+0x31c>
 8008866:	455e      	cmp	r6, fp
 8008868:	f67f aee8 	bls.w	800863c <_scanf_float+0x84>
 800886c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008870:	463a      	mov	r2, r7
 8008872:	4640      	mov	r0, r8
 8008874:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008878:	4798      	blx	r3
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	3b01      	subs	r3, #1
 800887e:	6123      	str	r3, [r4, #16]
 8008880:	e7f1      	b.n	8008866 <_scanf_float+0x2ae>
 8008882:	9802      	ldr	r0, [sp, #8]
 8008884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008888:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800888c:	463a      	mov	r2, r7
 800888e:	9002      	str	r0, [sp, #8]
 8008890:	4640      	mov	r0, r8
 8008892:	4798      	blx	r3
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	3b01      	subs	r3, #1
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800889e:	fa5f fa8a 	uxtb.w	sl, sl
 80088a2:	f1ba 0f02 	cmp.w	sl, #2
 80088a6:	d1ec      	bne.n	8008882 <_scanf_float+0x2ca>
 80088a8:	3d03      	subs	r5, #3
 80088aa:	b2ed      	uxtb	r5, r5
 80088ac:	1b76      	subs	r6, r6, r5
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	05da      	lsls	r2, r3, #23
 80088b2:	d52f      	bpl.n	8008914 <_scanf_float+0x35c>
 80088b4:	055b      	lsls	r3, r3, #21
 80088b6:	d510      	bpl.n	80088da <_scanf_float+0x322>
 80088b8:	455e      	cmp	r6, fp
 80088ba:	f67f aebf 	bls.w	800863c <_scanf_float+0x84>
 80088be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088c2:	463a      	mov	r2, r7
 80088c4:	4640      	mov	r0, r8
 80088c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ca:	4798      	blx	r3
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	6123      	str	r3, [r4, #16]
 80088d2:	e7f1      	b.n	80088b8 <_scanf_float+0x300>
 80088d4:	46aa      	mov	sl, r5
 80088d6:	9602      	str	r6, [sp, #8]
 80088d8:	e7df      	b.n	800889a <_scanf_float+0x2e2>
 80088da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	2965      	cmp	r1, #101	; 0x65
 80088e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80088e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80088ea:	6123      	str	r3, [r4, #16]
 80088ec:	d00c      	beq.n	8008908 <_scanf_float+0x350>
 80088ee:	2945      	cmp	r1, #69	; 0x45
 80088f0:	d00a      	beq.n	8008908 <_scanf_float+0x350>
 80088f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088f6:	463a      	mov	r2, r7
 80088f8:	4640      	mov	r0, r8
 80088fa:	4798      	blx	r3
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008902:	3b01      	subs	r3, #1
 8008904:	1eb5      	subs	r5, r6, #2
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	463a      	mov	r2, r7
 800890a:	4640      	mov	r0, r8
 800890c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008910:	4798      	blx	r3
 8008912:	462e      	mov	r6, r5
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	f015 0510 	ands.w	r5, r5, #16
 800891a:	d155      	bne.n	80089c8 <_scanf_float+0x410>
 800891c:	7035      	strb	r5, [r6, #0]
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008928:	d11b      	bne.n	8008962 <_scanf_float+0x3aa>
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	454b      	cmp	r3, r9
 800892e:	eba3 0209 	sub.w	r2, r3, r9
 8008932:	d123      	bne.n	800897c <_scanf_float+0x3c4>
 8008934:	2200      	movs	r2, #0
 8008936:	4659      	mov	r1, fp
 8008938:	4640      	mov	r0, r8
 800893a:	f000 ff35 	bl	80097a8 <_strtod_r>
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	f012 0f02 	tst.w	r2, #2
 8008946:	4606      	mov	r6, r0
 8008948:	460f      	mov	r7, r1
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	d021      	beq.n	8008992 <_scanf_float+0x3da>
 800894e:	1d1a      	adds	r2, r3, #4
 8008950:	9903      	ldr	r1, [sp, #12]
 8008952:	600a      	str	r2, [r1, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	e9c3 6700 	strd	r6, r7, [r3]
 800895a:	68e3      	ldr	r3, [r4, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60e3      	str	r3, [r4, #12]
 8008960:	e66d      	b.n	800863e <_scanf_float+0x86>
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0e5      	beq.n	8008934 <_scanf_float+0x37c>
 8008968:	9905      	ldr	r1, [sp, #20]
 800896a:	230a      	movs	r3, #10
 800896c:	462a      	mov	r2, r5
 800896e:	4640      	mov	r0, r8
 8008970:	3101      	adds	r1, #1
 8008972:	f000 ff9b 	bl	80098ac <_strtol_r>
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	9e05      	ldr	r6, [sp, #20]
 800897a:	1ac2      	subs	r2, r0, r3
 800897c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008980:	429e      	cmp	r6, r3
 8008982:	bf28      	it	cs
 8008984:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008988:	4630      	mov	r0, r6
 800898a:	4910      	ldr	r1, [pc, #64]	; (80089cc <_scanf_float+0x414>)
 800898c:	f000 f8a0 	bl	8008ad0 <siprintf>
 8008990:	e7d0      	b.n	8008934 <_scanf_float+0x37c>
 8008992:	f012 0f04 	tst.w	r2, #4
 8008996:	f103 0204 	add.w	r2, r3, #4
 800899a:	d1d9      	bne.n	8008950 <_scanf_float+0x398>
 800899c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80089a0:	f8cc 2000 	str.w	r2, [ip]
 80089a4:	f8d3 8000 	ldr.w	r8, [r3]
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	f7f8 f82e 	bl	8000a0c <__aeabi_dcmpun>
 80089b0:	b128      	cbz	r0, 80089be <_scanf_float+0x406>
 80089b2:	4807      	ldr	r0, [pc, #28]	; (80089d0 <_scanf_float+0x418>)
 80089b4:	f000 f888 	bl	8008ac8 <nanf>
 80089b8:	f8c8 0000 	str.w	r0, [r8]
 80089bc:	e7cd      	b.n	800895a <_scanf_float+0x3a2>
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f8 f881 	bl	8000ac8 <__aeabi_d2f>
 80089c6:	e7f7      	b.n	80089b8 <_scanf_float+0x400>
 80089c8:	2500      	movs	r5, #0
 80089ca:	e638      	b.n	800863e <_scanf_float+0x86>
 80089cc:	0800c6bc 	.word	0x0800c6bc
 80089d0:	0800cac8 	.word	0x0800cac8

080089d4 <cleanup_glue>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	460c      	mov	r4, r1
 80089d8:	6809      	ldr	r1, [r1, #0]
 80089da:	4605      	mov	r5, r0
 80089dc:	b109      	cbz	r1, 80089e2 <cleanup_glue+0xe>
 80089de:	f7ff fff9 	bl	80089d4 <cleanup_glue>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4628      	mov	r0, r5
 80089e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ea:	f002 bf39 	b.w	800b860 <_free_r>
	...

080089f0 <_reclaim_reent>:
 80089f0:	4b2c      	ldr	r3, [pc, #176]	; (8008aa4 <_reclaim_reent+0xb4>)
 80089f2:	b570      	push	{r4, r5, r6, lr}
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4604      	mov	r4, r0
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d051      	beq.n	8008aa0 <_reclaim_reent+0xb0>
 80089fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089fe:	b143      	cbz	r3, 8008a12 <_reclaim_reent+0x22>
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d14a      	bne.n	8008a9c <_reclaim_reent+0xac>
 8008a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a08:	6819      	ldr	r1, [r3, #0]
 8008a0a:	b111      	cbz	r1, 8008a12 <_reclaim_reent+0x22>
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f002 ff27 	bl	800b860 <_free_r>
 8008a12:	6961      	ldr	r1, [r4, #20]
 8008a14:	b111      	cbz	r1, 8008a1c <_reclaim_reent+0x2c>
 8008a16:	4620      	mov	r0, r4
 8008a18:	f002 ff22 	bl	800b860 <_free_r>
 8008a1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a1e:	b111      	cbz	r1, 8008a26 <_reclaim_reent+0x36>
 8008a20:	4620      	mov	r0, r4
 8008a22:	f002 ff1d 	bl	800b860 <_free_r>
 8008a26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a28:	b111      	cbz	r1, 8008a30 <_reclaim_reent+0x40>
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f002 ff18 	bl	800b860 <_free_r>
 8008a30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a32:	b111      	cbz	r1, 8008a3a <_reclaim_reent+0x4a>
 8008a34:	4620      	mov	r0, r4
 8008a36:	f002 ff13 	bl	800b860 <_free_r>
 8008a3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008a3c:	b111      	cbz	r1, 8008a44 <_reclaim_reent+0x54>
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f002 ff0e 	bl	800b860 <_free_r>
 8008a44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008a46:	b111      	cbz	r1, 8008a4e <_reclaim_reent+0x5e>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f002 ff09 	bl	800b860 <_free_r>
 8008a4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a50:	b111      	cbz	r1, 8008a58 <_reclaim_reent+0x68>
 8008a52:	4620      	mov	r0, r4
 8008a54:	f002 ff04 	bl	800b860 <_free_r>
 8008a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a5a:	b111      	cbz	r1, 8008a62 <_reclaim_reent+0x72>
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f002 feff 	bl	800b860 <_free_r>
 8008a62:	69a3      	ldr	r3, [r4, #24]
 8008a64:	b1e3      	cbz	r3, 8008aa0 <_reclaim_reent+0xb0>
 8008a66:	4620      	mov	r0, r4
 8008a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a6a:	4798      	blx	r3
 8008a6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a6e:	b1b9      	cbz	r1, 8008aa0 <_reclaim_reent+0xb0>
 8008a70:	4620      	mov	r0, r4
 8008a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a76:	f7ff bfad 	b.w	80089d4 <cleanup_glue>
 8008a7a:	5949      	ldr	r1, [r1, r5]
 8008a7c:	b941      	cbnz	r1, 8008a90 <_reclaim_reent+0xa0>
 8008a7e:	3504      	adds	r5, #4
 8008a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a82:	2d80      	cmp	r5, #128	; 0x80
 8008a84:	68d9      	ldr	r1, [r3, #12]
 8008a86:	d1f8      	bne.n	8008a7a <_reclaim_reent+0x8a>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f002 fee9 	bl	800b860 <_free_r>
 8008a8e:	e7ba      	b.n	8008a06 <_reclaim_reent+0x16>
 8008a90:	680e      	ldr	r6, [r1, #0]
 8008a92:	4620      	mov	r0, r4
 8008a94:	f002 fee4 	bl	800b860 <_free_r>
 8008a98:	4631      	mov	r1, r6
 8008a9a:	e7ef      	b.n	8008a7c <_reclaim_reent+0x8c>
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	e7ef      	b.n	8008a80 <_reclaim_reent+0x90>
 8008aa0:	bd70      	pop	{r4, r5, r6, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000010 	.word	0x20000010

08008aa8 <_sbrk_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4d05      	ldr	r5, [pc, #20]	; (8008ac4 <_sbrk_r+0x1c>)
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7f8 fe50 	bl	8001758 <_sbrk>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_sbrk_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_sbrk_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	200031b4 	.word	0x200031b4

08008ac8 <nanf>:
 8008ac8:	4800      	ldr	r0, [pc, #0]	; (8008acc <nanf+0x4>)
 8008aca:	4770      	bx	lr
 8008acc:	7fc00000 	.word	0x7fc00000

08008ad0 <siprintf>:
 8008ad0:	b40e      	push	{r1, r2, r3}
 8008ad2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ad6:	b500      	push	{lr}
 8008ad8:	b09c      	sub	sp, #112	; 0x70
 8008ada:	ab1d      	add	r3, sp, #116	; 0x74
 8008adc:	9002      	str	r0, [sp, #8]
 8008ade:	9006      	str	r0, [sp, #24]
 8008ae0:	9107      	str	r1, [sp, #28]
 8008ae2:	9104      	str	r1, [sp, #16]
 8008ae4:	4808      	ldr	r0, [pc, #32]	; (8008b08 <siprintf+0x38>)
 8008ae6:	4909      	ldr	r1, [pc, #36]	; (8008b0c <siprintf+0x3c>)
 8008ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aec:	9105      	str	r1, [sp, #20]
 8008aee:	6800      	ldr	r0, [r0, #0]
 8008af0:	a902      	add	r1, sp, #8
 8008af2:	9301      	str	r3, [sp, #4]
 8008af4:	f002 ff58 	bl	800b9a8 <_svfiprintf_r>
 8008af8:	2200      	movs	r2, #0
 8008afa:	9b02      	ldr	r3, [sp, #8]
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	b01c      	add	sp, #112	; 0x70
 8008b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b04:	b003      	add	sp, #12
 8008b06:	4770      	bx	lr
 8008b08:	20000010 	.word	0x20000010
 8008b0c:	ffff0208 	.word	0xffff0208

08008b10 <__sread>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	460c      	mov	r4, r1
 8008b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b18:	f003 f846 	bl	800bba8 <_read_r>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	bfab      	itete	ge
 8008b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b22:	89a3      	ldrhlt	r3, [r4, #12]
 8008b24:	181b      	addge	r3, r3, r0
 8008b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b2a:	bfac      	ite	ge
 8008b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b2e:	81a3      	strhlt	r3, [r4, #12]
 8008b30:	bd10      	pop	{r4, pc}

08008b32 <__swrite>:
 8008b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b36:	461f      	mov	r7, r3
 8008b38:	898b      	ldrh	r3, [r1, #12]
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	05db      	lsls	r3, r3, #23
 8008b3e:	460c      	mov	r4, r1
 8008b40:	4616      	mov	r6, r2
 8008b42:	d505      	bpl.n	8008b50 <__swrite+0x1e>
 8008b44:	2302      	movs	r3, #2
 8008b46:	2200      	movs	r2, #0
 8008b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4c:	f002 f976 	bl	800ae3c <_lseek_r>
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	4632      	mov	r2, r6
 8008b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b66:	f000 bea3 	b.w	80098b0 <_write_r>

08008b6a <__sseek>:
 8008b6a:	b510      	push	{r4, lr}
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b72:	f002 f963 	bl	800ae3c <_lseek_r>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	bf15      	itete	ne
 8008b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b86:	81a3      	strheq	r3, [r4, #12]
 8008b88:	bf18      	it	ne
 8008b8a:	81a3      	strhne	r3, [r4, #12]
 8008b8c:	bd10      	pop	{r4, pc}

08008b8e <__sclose>:
 8008b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b92:	f000 be9f 	b.w	80098d4 <_close_r>

08008b96 <sulp>:
 8008b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	4690      	mov	r8, r2
 8008b9e:	f002 fd03 	bl	800b5a8 <__ulp>
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	f1b8 0f00 	cmp.w	r8, #0
 8008baa:	d011      	beq.n	8008bd0 <sulp+0x3a>
 8008bac:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd0b      	ble.n	8008bd0 <sulp+0x3a>
 8008bb8:	2400      	movs	r4, #0
 8008bba:	051b      	lsls	r3, r3, #20
 8008bbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	f7f7 fc86 	bl	80004d8 <__aeabi_dmul>
 8008bcc:	4604      	mov	r4, r0
 8008bce:	460d      	mov	r5, r1
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bd8 <_strtod_l>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	469b      	mov	fp, r3
 8008bde:	2300      	movs	r3, #0
 8008be0:	b09f      	sub	sp, #124	; 0x7c
 8008be2:	931a      	str	r3, [sp, #104]	; 0x68
 8008be4:	4b9e      	ldr	r3, [pc, #632]	; (8008e60 <_strtod_l+0x288>)
 8008be6:	4682      	mov	sl, r0
 8008be8:	681f      	ldr	r7, [r3, #0]
 8008bea:	460e      	mov	r6, r1
 8008bec:	4638      	mov	r0, r7
 8008bee:	9215      	str	r2, [sp, #84]	; 0x54
 8008bf0:	f7f7 faae 	bl	8000150 <strlen>
 8008bf4:	f04f 0800 	mov.w	r8, #0
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	9619      	str	r6, [sp, #100]	; 0x64
 8008c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	2a2b      	cmp	r2, #43	; 0x2b
 8008c06:	d04c      	beq.n	8008ca2 <_strtod_l+0xca>
 8008c08:	d83a      	bhi.n	8008c80 <_strtod_l+0xa8>
 8008c0a:	2a0d      	cmp	r2, #13
 8008c0c:	d833      	bhi.n	8008c76 <_strtod_l+0x9e>
 8008c0e:	2a08      	cmp	r2, #8
 8008c10:	d833      	bhi.n	8008c7a <_strtod_l+0xa2>
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	d03d      	beq.n	8008c92 <_strtod_l+0xba>
 8008c16:	2300      	movs	r3, #0
 8008c18:	930a      	str	r3, [sp, #40]	; 0x28
 8008c1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008c1c:	782b      	ldrb	r3, [r5, #0]
 8008c1e:	2b30      	cmp	r3, #48	; 0x30
 8008c20:	f040 80aa 	bne.w	8008d78 <_strtod_l+0x1a0>
 8008c24:	786b      	ldrb	r3, [r5, #1]
 8008c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c2a:	2b58      	cmp	r3, #88	; 0x58
 8008c2c:	d166      	bne.n	8008cfc <_strtod_l+0x124>
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c30:	4650      	mov	r0, sl
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	ab1a      	add	r3, sp, #104	; 0x68
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	4a8a      	ldr	r2, [pc, #552]	; (8008e64 <_strtod_l+0x28c>)
 8008c3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008c3e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008c40:	a919      	add	r1, sp, #100	; 0x64
 8008c42:	f001 fdf9 	bl	800a838 <__gethex>
 8008c46:	f010 0607 	ands.w	r6, r0, #7
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	d005      	beq.n	8008c5a <_strtod_l+0x82>
 8008c4e:	2e06      	cmp	r6, #6
 8008c50:	d129      	bne.n	8008ca6 <_strtod_l+0xce>
 8008c52:	2300      	movs	r3, #0
 8008c54:	3501      	adds	r5, #1
 8008c56:	9519      	str	r5, [sp, #100]	; 0x64
 8008c58:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 858a 	bne.w	8009776 <_strtod_l+0xb9e>
 8008c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c64:	b1d3      	cbz	r3, 8008c9c <_strtod_l+0xc4>
 8008c66:	4642      	mov	r2, r8
 8008c68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	b01f      	add	sp, #124	; 0x7c
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	2a20      	cmp	r2, #32
 8008c78:	d1cd      	bne.n	8008c16 <_strtod_l+0x3e>
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	9319      	str	r3, [sp, #100]	; 0x64
 8008c7e:	e7bf      	b.n	8008c00 <_strtod_l+0x28>
 8008c80:	2a2d      	cmp	r2, #45	; 0x2d
 8008c82:	d1c8      	bne.n	8008c16 <_strtod_l+0x3e>
 8008c84:	2201      	movs	r2, #1
 8008c86:	920a      	str	r2, [sp, #40]	; 0x28
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	9219      	str	r2, [sp, #100]	; 0x64
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1c3      	bne.n	8008c1a <_strtod_l+0x42>
 8008c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c94:	9619      	str	r6, [sp, #100]	; 0x64
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f040 856b 	bne.w	8009772 <_strtod_l+0xb9a>
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	e7e4      	b.n	8008c6c <_strtod_l+0x94>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	e7ef      	b.n	8008c86 <_strtod_l+0xae>
 8008ca6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ca8:	b13a      	cbz	r2, 8008cba <_strtod_l+0xe2>
 8008caa:	2135      	movs	r1, #53	; 0x35
 8008cac:	a81c      	add	r0, sp, #112	; 0x70
 8008cae:	f002 fd7f 	bl	800b7b0 <__copybits>
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008cb6:	f002 f947 	bl	800af48 <_Bfree>
 8008cba:	3e01      	subs	r6, #1
 8008cbc:	2e04      	cmp	r6, #4
 8008cbe:	d806      	bhi.n	8008cce <_strtod_l+0xf6>
 8008cc0:	e8df f006 	tbb	[pc, r6]
 8008cc4:	1714030a 	.word	0x1714030a
 8008cc8:	0a          	.byte	0x0a
 8008cc9:	00          	.byte	0x00
 8008cca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008cce:	0721      	lsls	r1, r4, #28
 8008cd0:	d5c3      	bpl.n	8008c5a <_strtod_l+0x82>
 8008cd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008cd6:	e7c0      	b.n	8008c5a <_strtod_l+0x82>
 8008cd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008cda:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008cde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ce6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008cea:	e7f0      	b.n	8008cce <_strtod_l+0xf6>
 8008cec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008e68 <_strtod_l+0x290>
 8008cf0:	e7ed      	b.n	8008cce <_strtod_l+0xf6>
 8008cf2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008cf6:	f04f 38ff 	mov.w	r8, #4294967295
 8008cfa:	e7e8      	b.n	8008cce <_strtod_l+0xf6>
 8008cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	9219      	str	r2, [sp, #100]	; 0x64
 8008d02:	785b      	ldrb	r3, [r3, #1]
 8008d04:	2b30      	cmp	r3, #48	; 0x30
 8008d06:	d0f9      	beq.n	8008cfc <_strtod_l+0x124>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0a6      	beq.n	8008c5a <_strtod_l+0x82>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d12:	220a      	movs	r2, #10
 8008d14:	9308      	str	r3, [sp, #32]
 8008d16:	2300      	movs	r3, #0
 8008d18:	469b      	mov	fp, r3
 8008d1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008d1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008d20:	7805      	ldrb	r5, [r0, #0]
 8008d22:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008d26:	b2d9      	uxtb	r1, r3
 8008d28:	2909      	cmp	r1, #9
 8008d2a:	d927      	bls.n	8008d7c <_strtod_l+0x1a4>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f002 ff52 	bl	800bbd8 <strncmp>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d033      	beq.n	8008da0 <_strtod_l+0x1c8>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	465c      	mov	r4, fp
 8008d3e:	4603      	mov	r3, r0
 8008d40:	9004      	str	r0, [sp, #16]
 8008d42:	2a65      	cmp	r2, #101	; 0x65
 8008d44:	d001      	beq.n	8008d4a <_strtod_l+0x172>
 8008d46:	2a45      	cmp	r2, #69	; 0x45
 8008d48:	d114      	bne.n	8008d74 <_strtod_l+0x19c>
 8008d4a:	b91c      	cbnz	r4, 8008d54 <_strtod_l+0x17c>
 8008d4c:	9a07      	ldr	r2, [sp, #28]
 8008d4e:	4302      	orrs	r2, r0
 8008d50:	d09f      	beq.n	8008c92 <_strtod_l+0xba>
 8008d52:	2400      	movs	r4, #0
 8008d54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008d56:	1c72      	adds	r2, r6, #1
 8008d58:	9219      	str	r2, [sp, #100]	; 0x64
 8008d5a:	7872      	ldrb	r2, [r6, #1]
 8008d5c:	2a2b      	cmp	r2, #43	; 0x2b
 8008d5e:	d079      	beq.n	8008e54 <_strtod_l+0x27c>
 8008d60:	2a2d      	cmp	r2, #45	; 0x2d
 8008d62:	f000 8083 	beq.w	8008e6c <_strtod_l+0x294>
 8008d66:	2700      	movs	r7, #0
 8008d68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d6c:	2909      	cmp	r1, #9
 8008d6e:	f240 8083 	bls.w	8008e78 <_strtod_l+0x2a0>
 8008d72:	9619      	str	r6, [sp, #100]	; 0x64
 8008d74:	2500      	movs	r5, #0
 8008d76:	e09f      	b.n	8008eb8 <_strtod_l+0x2e0>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e7c8      	b.n	8008d0e <_strtod_l+0x136>
 8008d7c:	f1bb 0f08 	cmp.w	fp, #8
 8008d80:	bfd5      	itete	le
 8008d82:	9906      	ldrle	r1, [sp, #24]
 8008d84:	9905      	ldrgt	r1, [sp, #20]
 8008d86:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d8a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008d8e:	f100 0001 	add.w	r0, r0, #1
 8008d92:	bfd4      	ite	le
 8008d94:	9306      	strle	r3, [sp, #24]
 8008d96:	9305      	strgt	r3, [sp, #20]
 8008d98:	f10b 0b01 	add.w	fp, fp, #1
 8008d9c:	9019      	str	r0, [sp, #100]	; 0x64
 8008d9e:	e7be      	b.n	8008d1e <_strtod_l+0x146>
 8008da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008da2:	191a      	adds	r2, r3, r4
 8008da4:	9219      	str	r2, [sp, #100]	; 0x64
 8008da6:	5d1a      	ldrb	r2, [r3, r4]
 8008da8:	f1bb 0f00 	cmp.w	fp, #0
 8008dac:	d036      	beq.n	8008e1c <_strtod_l+0x244>
 8008dae:	465c      	mov	r4, fp
 8008db0:	9004      	str	r0, [sp, #16]
 8008db2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008db6:	2b09      	cmp	r3, #9
 8008db8:	d912      	bls.n	8008de0 <_strtod_l+0x208>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7c1      	b.n	8008d42 <_strtod_l+0x16a>
 8008dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	9219      	str	r2, [sp, #100]	; 0x64
 8008dc6:	785a      	ldrb	r2, [r3, #1]
 8008dc8:	2a30      	cmp	r2, #48	; 0x30
 8008dca:	d0f8      	beq.n	8008dbe <_strtod_l+0x1e6>
 8008dcc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	f200 84d5 	bhi.w	8009780 <_strtod_l+0xba8>
 8008dd6:	9004      	str	r0, [sp, #16]
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dde:	9308      	str	r3, [sp, #32]
 8008de0:	3a30      	subs	r2, #48	; 0x30
 8008de2:	f100 0301 	add.w	r3, r0, #1
 8008de6:	d013      	beq.n	8008e10 <_strtod_l+0x238>
 8008de8:	9904      	ldr	r1, [sp, #16]
 8008dea:	1905      	adds	r5, r0, r4
 8008dec:	4419      	add	r1, r3
 8008dee:	9104      	str	r1, [sp, #16]
 8008df0:	4623      	mov	r3, r4
 8008df2:	210a      	movs	r1, #10
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	d113      	bne.n	8008e20 <_strtod_l+0x248>
 8008df8:	1823      	adds	r3, r4, r0
 8008dfa:	2b08      	cmp	r3, #8
 8008dfc:	f104 0401 	add.w	r4, r4, #1
 8008e00:	4404      	add	r4, r0
 8008e02:	dc1b      	bgt.n	8008e3c <_strtod_l+0x264>
 8008e04:	230a      	movs	r3, #10
 8008e06:	9906      	ldr	r1, [sp, #24]
 8008e08:	fb03 2301 	mla	r3, r3, r1, r2
 8008e0c:	9306      	str	r3, [sp, #24]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e12:	4618      	mov	r0, r3
 8008e14:	1c51      	adds	r1, r2, #1
 8008e16:	9119      	str	r1, [sp, #100]	; 0x64
 8008e18:	7852      	ldrb	r2, [r2, #1]
 8008e1a:	e7ca      	b.n	8008db2 <_strtod_l+0x1da>
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	e7d3      	b.n	8008dc8 <_strtod_l+0x1f0>
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	dc04      	bgt.n	8008e2e <_strtod_l+0x256>
 8008e24:	9f06      	ldr	r7, [sp, #24]
 8008e26:	434f      	muls	r7, r1
 8008e28:	9706      	str	r7, [sp, #24]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	e7e2      	b.n	8008df4 <_strtod_l+0x21c>
 8008e2e:	1c5f      	adds	r7, r3, #1
 8008e30:	2f10      	cmp	r7, #16
 8008e32:	bfde      	ittt	le
 8008e34:	9f05      	ldrle	r7, [sp, #20]
 8008e36:	434f      	mulle	r7, r1
 8008e38:	9705      	strle	r7, [sp, #20]
 8008e3a:	e7f6      	b.n	8008e2a <_strtod_l+0x252>
 8008e3c:	2c10      	cmp	r4, #16
 8008e3e:	bfdf      	itttt	le
 8008e40:	230a      	movle	r3, #10
 8008e42:	9905      	ldrle	r1, [sp, #20]
 8008e44:	fb03 2301 	mlale	r3, r3, r1, r2
 8008e48:	9305      	strle	r3, [sp, #20]
 8008e4a:	e7e0      	b.n	8008e0e <_strtod_l+0x236>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	2301      	movs	r3, #1
 8008e52:	e77b      	b.n	8008d4c <_strtod_l+0x174>
 8008e54:	2700      	movs	r7, #0
 8008e56:	1cb2      	adds	r2, r6, #2
 8008e58:	9219      	str	r2, [sp, #100]	; 0x64
 8008e5a:	78b2      	ldrb	r2, [r6, #2]
 8008e5c:	e784      	b.n	8008d68 <_strtod_l+0x190>
 8008e5e:	bf00      	nop
 8008e60:	0800c910 	.word	0x0800c910
 8008e64:	0800c6c4 	.word	0x0800c6c4
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	2701      	movs	r7, #1
 8008e6e:	e7f2      	b.n	8008e56 <_strtod_l+0x27e>
 8008e70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e72:	1c51      	adds	r1, r2, #1
 8008e74:	9119      	str	r1, [sp, #100]	; 0x64
 8008e76:	7852      	ldrb	r2, [r2, #1]
 8008e78:	2a30      	cmp	r2, #48	; 0x30
 8008e7a:	d0f9      	beq.n	8008e70 <_strtod_l+0x298>
 8008e7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008e80:	2908      	cmp	r1, #8
 8008e82:	f63f af77 	bhi.w	8008d74 <_strtod_l+0x19c>
 8008e86:	f04f 0e0a 	mov.w	lr, #10
 8008e8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008e8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e90:	9209      	str	r2, [sp, #36]	; 0x24
 8008e92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e94:	1c51      	adds	r1, r2, #1
 8008e96:	9119      	str	r1, [sp, #100]	; 0x64
 8008e98:	7852      	ldrb	r2, [r2, #1]
 8008e9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008e9e:	2d09      	cmp	r5, #9
 8008ea0:	d935      	bls.n	8008f0e <_strtod_l+0x336>
 8008ea2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ea4:	1b49      	subs	r1, r1, r5
 8008ea6:	2908      	cmp	r1, #8
 8008ea8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008eac:	dc02      	bgt.n	8008eb4 <_strtod_l+0x2dc>
 8008eae:	4565      	cmp	r5, ip
 8008eb0:	bfa8      	it	ge
 8008eb2:	4665      	movge	r5, ip
 8008eb4:	b107      	cbz	r7, 8008eb8 <_strtod_l+0x2e0>
 8008eb6:	426d      	negs	r5, r5
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d14c      	bne.n	8008f56 <_strtod_l+0x37e>
 8008ebc:	9907      	ldr	r1, [sp, #28]
 8008ebe:	4301      	orrs	r1, r0
 8008ec0:	f47f aecb 	bne.w	8008c5a <_strtod_l+0x82>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f47f aee4 	bne.w	8008c92 <_strtod_l+0xba>
 8008eca:	2a69      	cmp	r2, #105	; 0x69
 8008ecc:	d026      	beq.n	8008f1c <_strtod_l+0x344>
 8008ece:	dc23      	bgt.n	8008f18 <_strtod_l+0x340>
 8008ed0:	2a49      	cmp	r2, #73	; 0x49
 8008ed2:	d023      	beq.n	8008f1c <_strtod_l+0x344>
 8008ed4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ed6:	f47f aedc 	bne.w	8008c92 <_strtod_l+0xba>
 8008eda:	499d      	ldr	r1, [pc, #628]	; (8009150 <_strtod_l+0x578>)
 8008edc:	a819      	add	r0, sp, #100	; 0x64
 8008ede:	f001 fef9 	bl	800acd4 <__match>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f43f aed5 	beq.w	8008c92 <_strtod_l+0xba>
 8008ee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b28      	cmp	r3, #40	; 0x28
 8008eee:	d12c      	bne.n	8008f4a <_strtod_l+0x372>
 8008ef0:	4998      	ldr	r1, [pc, #608]	; (8009154 <_strtod_l+0x57c>)
 8008ef2:	aa1c      	add	r2, sp, #112	; 0x70
 8008ef4:	a819      	add	r0, sp, #100	; 0x64
 8008ef6:	f001 ff01 	bl	800acfc <__hexnan>
 8008efa:	2805      	cmp	r0, #5
 8008efc:	d125      	bne.n	8008f4a <_strtod_l+0x372>
 8008efe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f00:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008f04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f0c:	e6a5      	b.n	8008c5a <_strtod_l+0x82>
 8008f0e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008f12:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008f16:	e7bc      	b.n	8008e92 <_strtod_l+0x2ba>
 8008f18:	2a6e      	cmp	r2, #110	; 0x6e
 8008f1a:	e7dc      	b.n	8008ed6 <_strtod_l+0x2fe>
 8008f1c:	498e      	ldr	r1, [pc, #568]	; (8009158 <_strtod_l+0x580>)
 8008f1e:	a819      	add	r0, sp, #100	; 0x64
 8008f20:	f001 fed8 	bl	800acd4 <__match>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f43f aeb4 	beq.w	8008c92 <_strtod_l+0xba>
 8008f2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f2c:	498b      	ldr	r1, [pc, #556]	; (800915c <_strtod_l+0x584>)
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	a819      	add	r0, sp, #100	; 0x64
 8008f32:	9319      	str	r3, [sp, #100]	; 0x64
 8008f34:	f001 fece 	bl	800acd4 <__match>
 8008f38:	b910      	cbnz	r0, 8008f40 <_strtod_l+0x368>
 8008f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	9319      	str	r3, [sp, #100]	; 0x64
 8008f40:	f04f 0800 	mov.w	r8, #0
 8008f44:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009160 <_strtod_l+0x588>
 8008f48:	e687      	b.n	8008c5a <_strtod_l+0x82>
 8008f4a:	4886      	ldr	r0, [pc, #536]	; (8009164 <_strtod_l+0x58c>)
 8008f4c:	f002 fe3e 	bl	800bbcc <nan>
 8008f50:	4680      	mov	r8, r0
 8008f52:	4689      	mov	r9, r1
 8008f54:	e681      	b.n	8008c5a <_strtod_l+0x82>
 8008f56:	9b04      	ldr	r3, [sp, #16]
 8008f58:	f1bb 0f00 	cmp.w	fp, #0
 8008f5c:	bf08      	it	eq
 8008f5e:	46a3      	moveq	fp, r4
 8008f60:	1aeb      	subs	r3, r5, r3
 8008f62:	2c10      	cmp	r4, #16
 8008f64:	9806      	ldr	r0, [sp, #24]
 8008f66:	4626      	mov	r6, r4
 8008f68:	9307      	str	r3, [sp, #28]
 8008f6a:	bfa8      	it	ge
 8008f6c:	2610      	movge	r6, #16
 8008f6e:	f7f7 fa39 	bl	80003e4 <__aeabi_ui2d>
 8008f72:	2c09      	cmp	r4, #9
 8008f74:	4680      	mov	r8, r0
 8008f76:	4689      	mov	r9, r1
 8008f78:	dd13      	ble.n	8008fa2 <_strtod_l+0x3ca>
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <_strtod_l+0x590>)
 8008f7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f80:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f84:	f7f7 faa8 	bl	80004d8 <__aeabi_dmul>
 8008f88:	4680      	mov	r8, r0
 8008f8a:	9805      	ldr	r0, [sp, #20]
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	f7f7 fa29 	bl	80003e4 <__aeabi_ui2d>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4640      	mov	r0, r8
 8008f98:	4649      	mov	r1, r9
 8008f9a:	f7f7 f8e7 	bl	800016c <__adddf3>
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4689      	mov	r9, r1
 8008fa2:	2c0f      	cmp	r4, #15
 8008fa4:	dc36      	bgt.n	8009014 <_strtod_l+0x43c>
 8008fa6:	9b07      	ldr	r3, [sp, #28]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f43f ae56 	beq.w	8008c5a <_strtod_l+0x82>
 8008fae:	dd22      	ble.n	8008ff6 <_strtod_l+0x41e>
 8008fb0:	2b16      	cmp	r3, #22
 8008fb2:	dc09      	bgt.n	8008fc8 <_strtod_l+0x3f0>
 8008fb4:	496c      	ldr	r1, [pc, #432]	; (8009168 <_strtod_l+0x590>)
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc2:	f7f7 fa89 	bl	80004d8 <__aeabi_dmul>
 8008fc6:	e7c3      	b.n	8008f50 <_strtod_l+0x378>
 8008fc8:	9a07      	ldr	r2, [sp, #28]
 8008fca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	db20      	blt.n	8009014 <_strtod_l+0x43c>
 8008fd2:	4d65      	ldr	r5, [pc, #404]	; (8009168 <_strtod_l+0x590>)
 8008fd4:	f1c4 040f 	rsb	r4, r4, #15
 8008fd8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008fdc:	4642      	mov	r2, r8
 8008fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	f7f7 fa78 	bl	80004d8 <__aeabi_dmul>
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	1b1c      	subs	r4, r3, r4
 8008fec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ff4:	e7e5      	b.n	8008fc2 <_strtod_l+0x3ea>
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	3316      	adds	r3, #22
 8008ffa:	db0b      	blt.n	8009014 <_strtod_l+0x43c>
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	4640      	mov	r0, r8
 8009000:	1b5d      	subs	r5, r3, r5
 8009002:	4b59      	ldr	r3, [pc, #356]	; (8009168 <_strtod_l+0x590>)
 8009004:	4649      	mov	r1, r9
 8009006:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800900a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800900e:	f7f7 fb8d 	bl	800072c <__aeabi_ddiv>
 8009012:	e79d      	b.n	8008f50 <_strtod_l+0x378>
 8009014:	9b07      	ldr	r3, [sp, #28]
 8009016:	1ba6      	subs	r6, r4, r6
 8009018:	441e      	add	r6, r3
 800901a:	2e00      	cmp	r6, #0
 800901c:	dd74      	ble.n	8009108 <_strtod_l+0x530>
 800901e:	f016 030f 	ands.w	r3, r6, #15
 8009022:	d00a      	beq.n	800903a <_strtod_l+0x462>
 8009024:	4950      	ldr	r1, [pc, #320]	; (8009168 <_strtod_l+0x590>)
 8009026:	4642      	mov	r2, r8
 8009028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800902c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009030:	464b      	mov	r3, r9
 8009032:	f7f7 fa51 	bl	80004d8 <__aeabi_dmul>
 8009036:	4680      	mov	r8, r0
 8009038:	4689      	mov	r9, r1
 800903a:	f036 060f 	bics.w	r6, r6, #15
 800903e:	d052      	beq.n	80090e6 <_strtod_l+0x50e>
 8009040:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009044:	dd27      	ble.n	8009096 <_strtod_l+0x4be>
 8009046:	f04f 0b00 	mov.w	fp, #0
 800904a:	f8cd b010 	str.w	fp, [sp, #16]
 800904e:	f8cd b020 	str.w	fp, [sp, #32]
 8009052:	f8cd b018 	str.w	fp, [sp, #24]
 8009056:	2322      	movs	r3, #34	; 0x22
 8009058:	f04f 0800 	mov.w	r8, #0
 800905c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009160 <_strtod_l+0x588>
 8009060:	f8ca 3000 	str.w	r3, [sl]
 8009064:	9b08      	ldr	r3, [sp, #32]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f adf7 	beq.w	8008c5a <_strtod_l+0x82>
 800906c:	4650      	mov	r0, sl
 800906e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009070:	f001 ff6a 	bl	800af48 <_Bfree>
 8009074:	4650      	mov	r0, sl
 8009076:	9906      	ldr	r1, [sp, #24]
 8009078:	f001 ff66 	bl	800af48 <_Bfree>
 800907c:	4650      	mov	r0, sl
 800907e:	9904      	ldr	r1, [sp, #16]
 8009080:	f001 ff62 	bl	800af48 <_Bfree>
 8009084:	4650      	mov	r0, sl
 8009086:	9908      	ldr	r1, [sp, #32]
 8009088:	f001 ff5e 	bl	800af48 <_Bfree>
 800908c:	4659      	mov	r1, fp
 800908e:	4650      	mov	r0, sl
 8009090:	f001 ff5a 	bl	800af48 <_Bfree>
 8009094:	e5e1      	b.n	8008c5a <_strtod_l+0x82>
 8009096:	4b35      	ldr	r3, [pc, #212]	; (800916c <_strtod_l+0x594>)
 8009098:	4640      	mov	r0, r8
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	2300      	movs	r3, #0
 800909e:	4649      	mov	r1, r9
 80090a0:	461f      	mov	r7, r3
 80090a2:	1136      	asrs	r6, r6, #4
 80090a4:	2e01      	cmp	r6, #1
 80090a6:	dc21      	bgt.n	80090ec <_strtod_l+0x514>
 80090a8:	b10b      	cbz	r3, 80090ae <_strtod_l+0x4d6>
 80090aa:	4680      	mov	r8, r0
 80090ac:	4689      	mov	r9, r1
 80090ae:	4b2f      	ldr	r3, [pc, #188]	; (800916c <_strtod_l+0x594>)
 80090b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80090b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80090b8:	4642      	mov	r2, r8
 80090ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090be:	464b      	mov	r3, r9
 80090c0:	f7f7 fa0a 	bl	80004d8 <__aeabi_dmul>
 80090c4:	4b26      	ldr	r3, [pc, #152]	; (8009160 <_strtod_l+0x588>)
 80090c6:	460a      	mov	r2, r1
 80090c8:	400b      	ands	r3, r1
 80090ca:	4929      	ldr	r1, [pc, #164]	; (8009170 <_strtod_l+0x598>)
 80090cc:	4680      	mov	r8, r0
 80090ce:	428b      	cmp	r3, r1
 80090d0:	d8b9      	bhi.n	8009046 <_strtod_l+0x46e>
 80090d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090d6:	428b      	cmp	r3, r1
 80090d8:	bf86      	itte	hi
 80090da:	f04f 38ff 	movhi.w	r8, #4294967295
 80090de:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009174 <_strtod_l+0x59c>
 80090e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80090e6:	2300      	movs	r3, #0
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	e07f      	b.n	80091ec <_strtod_l+0x614>
 80090ec:	07f2      	lsls	r2, r6, #31
 80090ee:	d505      	bpl.n	80090fc <_strtod_l+0x524>
 80090f0:	9b05      	ldr	r3, [sp, #20]
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f7f7 f9ef 	bl	80004d8 <__aeabi_dmul>
 80090fa:	2301      	movs	r3, #1
 80090fc:	9a05      	ldr	r2, [sp, #20]
 80090fe:	3701      	adds	r7, #1
 8009100:	3208      	adds	r2, #8
 8009102:	1076      	asrs	r6, r6, #1
 8009104:	9205      	str	r2, [sp, #20]
 8009106:	e7cd      	b.n	80090a4 <_strtod_l+0x4cc>
 8009108:	d0ed      	beq.n	80090e6 <_strtod_l+0x50e>
 800910a:	4276      	negs	r6, r6
 800910c:	f016 020f 	ands.w	r2, r6, #15
 8009110:	d00a      	beq.n	8009128 <_strtod_l+0x550>
 8009112:	4b15      	ldr	r3, [pc, #84]	; (8009168 <_strtod_l+0x590>)
 8009114:	4640      	mov	r0, r8
 8009116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800911a:	4649      	mov	r1, r9
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 fb04 	bl	800072c <__aeabi_ddiv>
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	1136      	asrs	r6, r6, #4
 800912a:	d0dc      	beq.n	80090e6 <_strtod_l+0x50e>
 800912c:	2e1f      	cmp	r6, #31
 800912e:	dd23      	ble.n	8009178 <_strtod_l+0x5a0>
 8009130:	f04f 0b00 	mov.w	fp, #0
 8009134:	f8cd b010 	str.w	fp, [sp, #16]
 8009138:	f8cd b020 	str.w	fp, [sp, #32]
 800913c:	f8cd b018 	str.w	fp, [sp, #24]
 8009140:	2322      	movs	r3, #34	; 0x22
 8009142:	f04f 0800 	mov.w	r8, #0
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	f8ca 3000 	str.w	r3, [sl]
 800914e:	e789      	b.n	8009064 <_strtod_l+0x48c>
 8009150:	0800c695 	.word	0x0800c695
 8009154:	0800c6d8 	.word	0x0800c6d8
 8009158:	0800c68d 	.word	0x0800c68d
 800915c:	0800c81c 	.word	0x0800c81c
 8009160:	7ff00000 	.word	0x7ff00000
 8009164:	0800cac8 	.word	0x0800cac8
 8009168:	0800c9a8 	.word	0x0800c9a8
 800916c:	0800c980 	.word	0x0800c980
 8009170:	7ca00000 	.word	0x7ca00000
 8009174:	7fefffff 	.word	0x7fefffff
 8009178:	f016 0310 	ands.w	r3, r6, #16
 800917c:	bf18      	it	ne
 800917e:	236a      	movne	r3, #106	; 0x6a
 8009180:	4640      	mov	r0, r8
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	4649      	mov	r1, r9
 8009186:	2300      	movs	r3, #0
 8009188:	4fb0      	ldr	r7, [pc, #704]	; (800944c <_strtod_l+0x874>)
 800918a:	07f2      	lsls	r2, r6, #31
 800918c:	d504      	bpl.n	8009198 <_strtod_l+0x5c0>
 800918e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009192:	f7f7 f9a1 	bl	80004d8 <__aeabi_dmul>
 8009196:	2301      	movs	r3, #1
 8009198:	1076      	asrs	r6, r6, #1
 800919a:	f107 0708 	add.w	r7, r7, #8
 800919e:	d1f4      	bne.n	800918a <_strtod_l+0x5b2>
 80091a0:	b10b      	cbz	r3, 80091a6 <_strtod_l+0x5ce>
 80091a2:	4680      	mov	r8, r0
 80091a4:	4689      	mov	r9, r1
 80091a6:	9b05      	ldr	r3, [sp, #20]
 80091a8:	b1c3      	cbz	r3, 80091dc <_strtod_l+0x604>
 80091aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80091ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	4649      	mov	r1, r9
 80091b6:	dd11      	ble.n	80091dc <_strtod_l+0x604>
 80091b8:	2b1f      	cmp	r3, #31
 80091ba:	f340 8127 	ble.w	800940c <_strtod_l+0x834>
 80091be:	2b34      	cmp	r3, #52	; 0x34
 80091c0:	bfd8      	it	le
 80091c2:	f04f 33ff 	movle.w	r3, #4294967295
 80091c6:	f04f 0800 	mov.w	r8, #0
 80091ca:	bfcf      	iteee	gt
 80091cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80091d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80091d4:	fa03 f202 	lslle.w	r2, r3, r2
 80091d8:	ea02 0901 	andle.w	r9, r2, r1
 80091dc:	2200      	movs	r2, #0
 80091de:	2300      	movs	r3, #0
 80091e0:	4640      	mov	r0, r8
 80091e2:	4649      	mov	r1, r9
 80091e4:	f7f7 fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1a1      	bne.n	8009130 <_strtod_l+0x558>
 80091ec:	9b06      	ldr	r3, [sp, #24]
 80091ee:	465a      	mov	r2, fp
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	4650      	mov	r0, sl
 80091f4:	4623      	mov	r3, r4
 80091f6:	9908      	ldr	r1, [sp, #32]
 80091f8:	f001 ff0e 	bl	800b018 <__s2b>
 80091fc:	9008      	str	r0, [sp, #32]
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f af21 	beq.w	8009046 <_strtod_l+0x46e>
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	f04f 0b00 	mov.w	fp, #0
 800920a:	1b5d      	subs	r5, r3, r5
 800920c:	9b07      	ldr	r3, [sp, #28]
 800920e:	f8cd b010 	str.w	fp, [sp, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfb4      	ite	lt
 8009216:	462b      	movlt	r3, r5
 8009218:	2300      	movge	r3, #0
 800921a:	930e      	str	r3, [sp, #56]	; 0x38
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009222:	9314      	str	r3, [sp, #80]	; 0x50
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	4650      	mov	r0, sl
 8009228:	6859      	ldr	r1, [r3, #4]
 800922a:	f001 fe4d 	bl	800aec8 <_Balloc>
 800922e:	9006      	str	r0, [sp, #24]
 8009230:	2800      	cmp	r0, #0
 8009232:	f43f af10 	beq.w	8009056 <_strtod_l+0x47e>
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	300c      	adds	r0, #12
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	f103 010c 	add.w	r1, r3, #12
 8009240:	3202      	adds	r2, #2
 8009242:	0092      	lsls	r2, r2, #2
 8009244:	f7fe fcad 	bl	8007ba2 <memcpy>
 8009248:	ab1c      	add	r3, sp, #112	; 0x70
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	ab1b      	add	r3, sp, #108	; 0x6c
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	4650      	mov	r0, sl
 8009256:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800925a:	f002 fa1f 	bl	800b69c <__d2b>
 800925e:	901a      	str	r0, [sp, #104]	; 0x68
 8009260:	2800      	cmp	r0, #0
 8009262:	f43f aef8 	beq.w	8009056 <_strtod_l+0x47e>
 8009266:	2101      	movs	r1, #1
 8009268:	4650      	mov	r0, sl
 800926a:	f001 ff6d 	bl	800b148 <__i2b>
 800926e:	4603      	mov	r3, r0
 8009270:	9004      	str	r0, [sp, #16]
 8009272:	2800      	cmp	r0, #0
 8009274:	f43f aeef 	beq.w	8009056 <_strtod_l+0x47e>
 8009278:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800927a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800927c:	2d00      	cmp	r5, #0
 800927e:	bfab      	itete	ge
 8009280:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009282:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009284:	18ee      	addge	r6, r5, r3
 8009286:	1b5c      	sublt	r4, r3, r5
 8009288:	9b05      	ldr	r3, [sp, #20]
 800928a:	bfa8      	it	ge
 800928c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800928e:	eba5 0503 	sub.w	r5, r5, r3
 8009292:	4415      	add	r5, r2
 8009294:	4b6e      	ldr	r3, [pc, #440]	; (8009450 <_strtod_l+0x878>)
 8009296:	f105 35ff 	add.w	r5, r5, #4294967295
 800929a:	bfb8      	it	lt
 800929c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800929e:	429d      	cmp	r5, r3
 80092a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092a4:	f280 80c4 	bge.w	8009430 <_strtod_l+0x858>
 80092a8:	1b5b      	subs	r3, r3, r5
 80092aa:	2b1f      	cmp	r3, #31
 80092ac:	f04f 0701 	mov.w	r7, #1
 80092b0:	eba2 0203 	sub.w	r2, r2, r3
 80092b4:	f300 80b1 	bgt.w	800941a <_strtod_l+0x842>
 80092b8:	2500      	movs	r5, #0
 80092ba:	fa07 f303 	lsl.w	r3, r7, r3
 80092be:	930f      	str	r3, [sp, #60]	; 0x3c
 80092c0:	18b7      	adds	r7, r6, r2
 80092c2:	9b05      	ldr	r3, [sp, #20]
 80092c4:	42be      	cmp	r6, r7
 80092c6:	4414      	add	r4, r2
 80092c8:	441c      	add	r4, r3
 80092ca:	4633      	mov	r3, r6
 80092cc:	bfa8      	it	ge
 80092ce:	463b      	movge	r3, r7
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	bfa8      	it	ge
 80092d4:	4623      	movge	r3, r4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfc2      	ittt	gt
 80092da:	1aff      	subgt	r7, r7, r3
 80092dc:	1ae4      	subgt	r4, r4, r3
 80092de:	1af6      	subgt	r6, r6, r3
 80092e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dd17      	ble.n	8009316 <_strtod_l+0x73e>
 80092e6:	461a      	mov	r2, r3
 80092e8:	4650      	mov	r0, sl
 80092ea:	9904      	ldr	r1, [sp, #16]
 80092ec:	f001 ffea 	bl	800b2c4 <__pow5mult>
 80092f0:	9004      	str	r0, [sp, #16]
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f aeaf 	beq.w	8009056 <_strtod_l+0x47e>
 80092f8:	4601      	mov	r1, r0
 80092fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092fc:	4650      	mov	r0, sl
 80092fe:	f001 ff39 	bl	800b174 <__multiply>
 8009302:	9009      	str	r0, [sp, #36]	; 0x24
 8009304:	2800      	cmp	r0, #0
 8009306:	f43f aea6 	beq.w	8009056 <_strtod_l+0x47e>
 800930a:	4650      	mov	r0, sl
 800930c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800930e:	f001 fe1b 	bl	800af48 <_Bfree>
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	931a      	str	r3, [sp, #104]	; 0x68
 8009316:	2f00      	cmp	r7, #0
 8009318:	f300 808e 	bgt.w	8009438 <_strtod_l+0x860>
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dd08      	ble.n	8009334 <_strtod_l+0x75c>
 8009322:	4650      	mov	r0, sl
 8009324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009326:	9906      	ldr	r1, [sp, #24]
 8009328:	f001 ffcc 	bl	800b2c4 <__pow5mult>
 800932c:	9006      	str	r0, [sp, #24]
 800932e:	2800      	cmp	r0, #0
 8009330:	f43f ae91 	beq.w	8009056 <_strtod_l+0x47e>
 8009334:	2c00      	cmp	r4, #0
 8009336:	dd08      	ble.n	800934a <_strtod_l+0x772>
 8009338:	4622      	mov	r2, r4
 800933a:	4650      	mov	r0, sl
 800933c:	9906      	ldr	r1, [sp, #24]
 800933e:	f002 f81b 	bl	800b378 <__lshift>
 8009342:	9006      	str	r0, [sp, #24]
 8009344:	2800      	cmp	r0, #0
 8009346:	f43f ae86 	beq.w	8009056 <_strtod_l+0x47e>
 800934a:	2e00      	cmp	r6, #0
 800934c:	dd08      	ble.n	8009360 <_strtod_l+0x788>
 800934e:	4632      	mov	r2, r6
 8009350:	4650      	mov	r0, sl
 8009352:	9904      	ldr	r1, [sp, #16]
 8009354:	f002 f810 	bl	800b378 <__lshift>
 8009358:	9004      	str	r0, [sp, #16]
 800935a:	2800      	cmp	r0, #0
 800935c:	f43f ae7b 	beq.w	8009056 <_strtod_l+0x47e>
 8009360:	4650      	mov	r0, sl
 8009362:	9a06      	ldr	r2, [sp, #24]
 8009364:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009366:	f002 f893 	bl	800b490 <__mdiff>
 800936a:	4683      	mov	fp, r0
 800936c:	2800      	cmp	r0, #0
 800936e:	f43f ae72 	beq.w	8009056 <_strtod_l+0x47e>
 8009372:	2400      	movs	r4, #0
 8009374:	68c3      	ldr	r3, [r0, #12]
 8009376:	9904      	ldr	r1, [sp, #16]
 8009378:	60c4      	str	r4, [r0, #12]
 800937a:	930b      	str	r3, [sp, #44]	; 0x2c
 800937c:	f002 f86c 	bl	800b458 <__mcmp>
 8009380:	42a0      	cmp	r0, r4
 8009382:	da6b      	bge.n	800945c <_strtod_l+0x884>
 8009384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009386:	ea53 0308 	orrs.w	r3, r3, r8
 800938a:	f040 8091 	bne.w	80094b0 <_strtod_l+0x8d8>
 800938e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009392:	2b00      	cmp	r3, #0
 8009394:	f040 808c 	bne.w	80094b0 <_strtod_l+0x8d8>
 8009398:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800939c:	0d1b      	lsrs	r3, r3, #20
 800939e:	051b      	lsls	r3, r3, #20
 80093a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093a4:	f240 8084 	bls.w	80094b0 <_strtod_l+0x8d8>
 80093a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80093ac:	b91b      	cbnz	r3, 80093b6 <_strtod_l+0x7de>
 80093ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	dd7c      	ble.n	80094b0 <_strtod_l+0x8d8>
 80093b6:	4659      	mov	r1, fp
 80093b8:	2201      	movs	r2, #1
 80093ba:	4650      	mov	r0, sl
 80093bc:	f001 ffdc 	bl	800b378 <__lshift>
 80093c0:	9904      	ldr	r1, [sp, #16]
 80093c2:	4683      	mov	fp, r0
 80093c4:	f002 f848 	bl	800b458 <__mcmp>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	dd71      	ble.n	80094b0 <_strtod_l+0x8d8>
 80093cc:	9905      	ldr	r1, [sp, #20]
 80093ce:	464b      	mov	r3, r9
 80093d0:	4a20      	ldr	r2, [pc, #128]	; (8009454 <_strtod_l+0x87c>)
 80093d2:	2900      	cmp	r1, #0
 80093d4:	f000 808c 	beq.w	80094f0 <_strtod_l+0x918>
 80093d8:	ea02 0109 	and.w	r1, r2, r9
 80093dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093e0:	f300 8086 	bgt.w	80094f0 <_strtod_l+0x918>
 80093e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80093e8:	f77f aeaa 	ble.w	8009140 <_strtod_l+0x568>
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	4b19      	ldr	r3, [pc, #100]	; (8009458 <_strtod_l+0x880>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	f7f7 f870 	bl	80004d8 <__aeabi_dmul>
 80093f8:	460b      	mov	r3, r1
 80093fa:	4303      	orrs	r3, r0
 80093fc:	bf08      	it	eq
 80093fe:	2322      	moveq	r3, #34	; 0x22
 8009400:	4680      	mov	r8, r0
 8009402:	4689      	mov	r9, r1
 8009404:	bf08      	it	eq
 8009406:	f8ca 3000 	streq.w	r3, [sl]
 800940a:	e62f      	b.n	800906c <_strtod_l+0x494>
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	ea03 0808 	and.w	r8, r3, r8
 8009418:	e6e0      	b.n	80091dc <_strtod_l+0x604>
 800941a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800941e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009422:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009426:	35e2      	adds	r5, #226	; 0xe2
 8009428:	fa07 f505 	lsl.w	r5, r7, r5
 800942c:	970f      	str	r7, [sp, #60]	; 0x3c
 800942e:	e747      	b.n	80092c0 <_strtod_l+0x6e8>
 8009430:	2301      	movs	r3, #1
 8009432:	2500      	movs	r5, #0
 8009434:	930f      	str	r3, [sp, #60]	; 0x3c
 8009436:	e743      	b.n	80092c0 <_strtod_l+0x6e8>
 8009438:	463a      	mov	r2, r7
 800943a:	4650      	mov	r0, sl
 800943c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800943e:	f001 ff9b 	bl	800b378 <__lshift>
 8009442:	901a      	str	r0, [sp, #104]	; 0x68
 8009444:	2800      	cmp	r0, #0
 8009446:	f47f af69 	bne.w	800931c <_strtod_l+0x744>
 800944a:	e604      	b.n	8009056 <_strtod_l+0x47e>
 800944c:	0800c6f0 	.word	0x0800c6f0
 8009450:	fffffc02 	.word	0xfffffc02
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	39500000 	.word	0x39500000
 800945c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009460:	d165      	bne.n	800952e <_strtod_l+0x956>
 8009462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009468:	b35a      	cbz	r2, 80094c2 <_strtod_l+0x8ea>
 800946a:	4a99      	ldr	r2, [pc, #612]	; (80096d0 <_strtod_l+0xaf8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d12b      	bne.n	80094c8 <_strtod_l+0x8f0>
 8009470:	9b05      	ldr	r3, [sp, #20]
 8009472:	4641      	mov	r1, r8
 8009474:	b303      	cbz	r3, 80094b8 <_strtod_l+0x8e0>
 8009476:	464a      	mov	r2, r9
 8009478:	4b96      	ldr	r3, [pc, #600]	; (80096d4 <_strtod_l+0xafc>)
 800947a:	4013      	ands	r3, r2
 800947c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	d81b      	bhi.n	80094be <_strtod_l+0x8e6>
 8009486:	0d1b      	lsrs	r3, r3, #20
 8009488:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800948c:	fa02 f303 	lsl.w	r3, r2, r3
 8009490:	4299      	cmp	r1, r3
 8009492:	d119      	bne.n	80094c8 <_strtod_l+0x8f0>
 8009494:	4b90      	ldr	r3, [pc, #576]	; (80096d8 <_strtod_l+0xb00>)
 8009496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009498:	429a      	cmp	r2, r3
 800949a:	d102      	bne.n	80094a2 <_strtod_l+0x8ca>
 800949c:	3101      	adds	r1, #1
 800949e:	f43f adda 	beq.w	8009056 <_strtod_l+0x47e>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	4b8b      	ldr	r3, [pc, #556]	; (80096d4 <_strtod_l+0xafc>)
 80094a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094aa:	401a      	ands	r2, r3
 80094ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80094b0:	9b05      	ldr	r3, [sp, #20]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d19a      	bne.n	80093ec <_strtod_l+0x814>
 80094b6:	e5d9      	b.n	800906c <_strtod_l+0x494>
 80094b8:	f04f 33ff 	mov.w	r3, #4294967295
 80094bc:	e7e8      	b.n	8009490 <_strtod_l+0x8b8>
 80094be:	4613      	mov	r3, r2
 80094c0:	e7e6      	b.n	8009490 <_strtod_l+0x8b8>
 80094c2:	ea53 0308 	orrs.w	r3, r3, r8
 80094c6:	d081      	beq.n	80093cc <_strtod_l+0x7f4>
 80094c8:	b1e5      	cbz	r5, 8009504 <_strtod_l+0x92c>
 80094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094cc:	421d      	tst	r5, r3
 80094ce:	d0ef      	beq.n	80094b0 <_strtod_l+0x8d8>
 80094d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	9a05      	ldr	r2, [sp, #20]
 80094d8:	b1c3      	cbz	r3, 800950c <_strtod_l+0x934>
 80094da:	f7ff fb5c 	bl	8008b96 <sulp>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094e6:	f7f6 fe41 	bl	800016c <__adddf3>
 80094ea:	4680      	mov	r8, r0
 80094ec:	4689      	mov	r9, r1
 80094ee:	e7df      	b.n	80094b0 <_strtod_l+0x8d8>
 80094f0:	4013      	ands	r3, r2
 80094f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80094fa:	f04f 38ff 	mov.w	r8, #4294967295
 80094fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009502:	e7d5      	b.n	80094b0 <_strtod_l+0x8d8>
 8009504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009506:	ea13 0f08 	tst.w	r3, r8
 800950a:	e7e0      	b.n	80094ce <_strtod_l+0x8f6>
 800950c:	f7ff fb43 	bl	8008b96 <sulp>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009518:	f7f6 fe26 	bl	8000168 <__aeabi_dsub>
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	4680      	mov	r8, r0
 8009522:	4689      	mov	r9, r1
 8009524:	f7f7 fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8009528:	2800      	cmp	r0, #0
 800952a:	d0c1      	beq.n	80094b0 <_strtod_l+0x8d8>
 800952c:	e608      	b.n	8009140 <_strtod_l+0x568>
 800952e:	4658      	mov	r0, fp
 8009530:	9904      	ldr	r1, [sp, #16]
 8009532:	f002 f90f 	bl	800b754 <__ratio>
 8009536:	2200      	movs	r2, #0
 8009538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	f7f7 fa46 	bl	80009d0 <__aeabi_dcmple>
 8009544:	2800      	cmp	r0, #0
 8009546:	d070      	beq.n	800962a <_strtod_l+0xa52>
 8009548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d042      	beq.n	80095d4 <_strtod_l+0x9fc>
 800954e:	2600      	movs	r6, #0
 8009550:	4f62      	ldr	r7, [pc, #392]	; (80096dc <_strtod_l+0xb04>)
 8009552:	4d62      	ldr	r5, [pc, #392]	; (80096dc <_strtod_l+0xb04>)
 8009554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800955a:	0d1b      	lsrs	r3, r3, #20
 800955c:	051b      	lsls	r3, r3, #20
 800955e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009562:	4b5f      	ldr	r3, [pc, #380]	; (80096e0 <_strtod_l+0xb08>)
 8009564:	429a      	cmp	r2, r3
 8009566:	f040 80c3 	bne.w	80096f0 <_strtod_l+0xb18>
 800956a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956c:	4640      	mov	r0, r8
 800956e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009572:	4649      	mov	r1, r9
 8009574:	f002 f818 	bl	800b5a8 <__ulp>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f7f6 ffaa 	bl	80004d8 <__aeabi_dmul>
 8009584:	4642      	mov	r2, r8
 8009586:	464b      	mov	r3, r9
 8009588:	f7f6 fdf0 	bl	800016c <__adddf3>
 800958c:	460b      	mov	r3, r1
 800958e:	4951      	ldr	r1, [pc, #324]	; (80096d4 <_strtod_l+0xafc>)
 8009590:	4a54      	ldr	r2, [pc, #336]	; (80096e4 <_strtod_l+0xb0c>)
 8009592:	4019      	ands	r1, r3
 8009594:	4291      	cmp	r1, r2
 8009596:	4680      	mov	r8, r0
 8009598:	d95d      	bls.n	8009656 <_strtod_l+0xa7e>
 800959a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800959c:	4b4e      	ldr	r3, [pc, #312]	; (80096d8 <_strtod_l+0xb00>)
 800959e:	429a      	cmp	r2, r3
 80095a0:	d103      	bne.n	80095aa <_strtod_l+0x9d2>
 80095a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095a4:	3301      	adds	r3, #1
 80095a6:	f43f ad56 	beq.w	8009056 <_strtod_l+0x47e>
 80095aa:	f04f 38ff 	mov.w	r8, #4294967295
 80095ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80096d8 <_strtod_l+0xb00>
 80095b2:	4650      	mov	r0, sl
 80095b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80095b6:	f001 fcc7 	bl	800af48 <_Bfree>
 80095ba:	4650      	mov	r0, sl
 80095bc:	9906      	ldr	r1, [sp, #24]
 80095be:	f001 fcc3 	bl	800af48 <_Bfree>
 80095c2:	4650      	mov	r0, sl
 80095c4:	9904      	ldr	r1, [sp, #16]
 80095c6:	f001 fcbf 	bl	800af48 <_Bfree>
 80095ca:	4659      	mov	r1, fp
 80095cc:	4650      	mov	r0, sl
 80095ce:	f001 fcbb 	bl	800af48 <_Bfree>
 80095d2:	e627      	b.n	8009224 <_strtod_l+0x64c>
 80095d4:	f1b8 0f00 	cmp.w	r8, #0
 80095d8:	d119      	bne.n	800960e <_strtod_l+0xa36>
 80095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e0:	b9e3      	cbnz	r3, 800961c <_strtod_l+0xa44>
 80095e2:	2200      	movs	r2, #0
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	4b3c      	ldr	r3, [pc, #240]	; (80096dc <_strtod_l+0xb04>)
 80095ea:	f7f7 f9e7 	bl	80009bc <__aeabi_dcmplt>
 80095ee:	b9c8      	cbnz	r0, 8009624 <_strtod_l+0xa4c>
 80095f0:	2200      	movs	r2, #0
 80095f2:	4630      	mov	r0, r6
 80095f4:	4639      	mov	r1, r7
 80095f6:	4b3c      	ldr	r3, [pc, #240]	; (80096e8 <_strtod_l+0xb10>)
 80095f8:	f7f6 ff6e 	bl	80004d8 <__aeabi_dmul>
 80095fc:	4604      	mov	r4, r0
 80095fe:	460d      	mov	r5, r1
 8009600:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009604:	9416      	str	r4, [sp, #88]	; 0x58
 8009606:	9317      	str	r3, [sp, #92]	; 0x5c
 8009608:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800960c:	e7a2      	b.n	8009554 <_strtod_l+0x97c>
 800960e:	f1b8 0f01 	cmp.w	r8, #1
 8009612:	d103      	bne.n	800961c <_strtod_l+0xa44>
 8009614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009616:	2b00      	cmp	r3, #0
 8009618:	f43f ad92 	beq.w	8009140 <_strtod_l+0x568>
 800961c:	2600      	movs	r6, #0
 800961e:	2400      	movs	r4, #0
 8009620:	4f32      	ldr	r7, [pc, #200]	; (80096ec <_strtod_l+0xb14>)
 8009622:	e796      	b.n	8009552 <_strtod_l+0x97a>
 8009624:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009626:	4d30      	ldr	r5, [pc, #192]	; (80096e8 <_strtod_l+0xb10>)
 8009628:	e7ea      	b.n	8009600 <_strtod_l+0xa28>
 800962a:	4b2f      	ldr	r3, [pc, #188]	; (80096e8 <_strtod_l+0xb10>)
 800962c:	2200      	movs	r2, #0
 800962e:	4630      	mov	r0, r6
 8009630:	4639      	mov	r1, r7
 8009632:	f7f6 ff51 	bl	80004d8 <__aeabi_dmul>
 8009636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	b933      	cbnz	r3, 800964c <_strtod_l+0xa74>
 800963e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009642:	9010      	str	r0, [sp, #64]	; 0x40
 8009644:	9311      	str	r3, [sp, #68]	; 0x44
 8009646:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800964a:	e783      	b.n	8009554 <_strtod_l+0x97c>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009654:	e7f7      	b.n	8009646 <_strtod_l+0xa6e>
 8009656:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1a8      	bne.n	80095b2 <_strtod_l+0x9da>
 8009660:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009666:	0d1b      	lsrs	r3, r3, #20
 8009668:	051b      	lsls	r3, r3, #20
 800966a:	429a      	cmp	r2, r3
 800966c:	d1a1      	bne.n	80095b2 <_strtod_l+0x9da>
 800966e:	4620      	mov	r0, r4
 8009670:	4629      	mov	r1, r5
 8009672:	f7f7 fa79 	bl	8000b68 <__aeabi_d2lz>
 8009676:	f7f6 ff01 	bl	800047c <__aeabi_l2d>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4620      	mov	r0, r4
 8009680:	4629      	mov	r1, r5
 8009682:	f7f6 fd71 	bl	8000168 <__aeabi_dsub>
 8009686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009688:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800968c:	ea43 0308 	orr.w	r3, r3, r8
 8009690:	4313      	orrs	r3, r2
 8009692:	4604      	mov	r4, r0
 8009694:	460d      	mov	r5, r1
 8009696:	d066      	beq.n	8009766 <_strtod_l+0xb8e>
 8009698:	a309      	add	r3, pc, #36	; (adr r3, 80096c0 <_strtod_l+0xae8>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f7 f98d 	bl	80009bc <__aeabi_dcmplt>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f47f ace2 	bne.w	800906c <_strtod_l+0x494>
 80096a8:	a307      	add	r3, pc, #28	; (adr r3, 80096c8 <_strtod_l+0xaf0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f7 f9a1 	bl	80009f8 <__aeabi_dcmpgt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f af7b 	beq.w	80095b2 <_strtod_l+0x9da>
 80096bc:	e4d6      	b.n	800906c <_strtod_l+0x494>
 80096be:	bf00      	nop
 80096c0:	94a03595 	.word	0x94a03595
 80096c4:	3fdfffff 	.word	0x3fdfffff
 80096c8:	35afe535 	.word	0x35afe535
 80096cc:	3fe00000 	.word	0x3fe00000
 80096d0:	000fffff 	.word	0x000fffff
 80096d4:	7ff00000 	.word	0x7ff00000
 80096d8:	7fefffff 	.word	0x7fefffff
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	7fe00000 	.word	0x7fe00000
 80096e4:	7c9fffff 	.word	0x7c9fffff
 80096e8:	3fe00000 	.word	0x3fe00000
 80096ec:	bff00000 	.word	0xbff00000
 80096f0:	9b05      	ldr	r3, [sp, #20]
 80096f2:	b313      	cbz	r3, 800973a <_strtod_l+0xb62>
 80096f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096fa:	d81e      	bhi.n	800973a <_strtod_l+0xb62>
 80096fc:	a326      	add	r3, pc, #152	; (adr r3, 8009798 <_strtod_l+0xbc0>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f7 f963 	bl	80009d0 <__aeabi_dcmple>
 800970a:	b190      	cbz	r0, 8009732 <_strtod_l+0xb5a>
 800970c:	4629      	mov	r1, r5
 800970e:	4620      	mov	r0, r4
 8009710:	f7f7 f9ba 	bl	8000a88 <__aeabi_d2uiz>
 8009714:	2801      	cmp	r0, #1
 8009716:	bf38      	it	cc
 8009718:	2001      	movcc	r0, #1
 800971a:	f7f6 fe63 	bl	80003e4 <__aeabi_ui2d>
 800971e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009720:	4604      	mov	r4, r0
 8009722:	460d      	mov	r5, r1
 8009724:	b9d3      	cbnz	r3, 800975c <_strtod_l+0xb84>
 8009726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800972a:	9012      	str	r0, [sp, #72]	; 0x48
 800972c:	9313      	str	r3, [sp, #76]	; 0x4c
 800972e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009734:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009738:	1a9f      	subs	r7, r3, r2
 800973a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800973e:	f001 ff33 	bl	800b5a8 <__ulp>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f6 fec5 	bl	80004d8 <__aeabi_dmul>
 800974e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009752:	f7f6 fd0b 	bl	800016c <__adddf3>
 8009756:	4680      	mov	r8, r0
 8009758:	4689      	mov	r9, r1
 800975a:	e77e      	b.n	800965a <_strtod_l+0xa82>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009764:	e7e3      	b.n	800972e <_strtod_l+0xb56>
 8009766:	a30e      	add	r3, pc, #56	; (adr r3, 80097a0 <_strtod_l+0xbc8>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f7 f926 	bl	80009bc <__aeabi_dcmplt>
 8009770:	e7a1      	b.n	80096b6 <_strtod_l+0xade>
 8009772:	2300      	movs	r3, #0
 8009774:	930a      	str	r3, [sp, #40]	; 0x28
 8009776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009778:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	f7ff ba71 	b.w	8008c62 <_strtod_l+0x8a>
 8009780:	2a65      	cmp	r2, #101	; 0x65
 8009782:	f43f ab63 	beq.w	8008e4c <_strtod_l+0x274>
 8009786:	2a45      	cmp	r2, #69	; 0x45
 8009788:	f43f ab60 	beq.w	8008e4c <_strtod_l+0x274>
 800978c:	2301      	movs	r3, #1
 800978e:	f7ff bb95 	b.w	8008ebc <_strtod_l+0x2e4>
 8009792:	bf00      	nop
 8009794:	f3af 8000 	nop.w
 8009798:	ffc00000 	.word	0xffc00000
 800979c:	41dfffff 	.word	0x41dfffff
 80097a0:	94a03595 	.word	0x94a03595
 80097a4:	3fcfffff 	.word	0x3fcfffff

080097a8 <_strtod_r>:
 80097a8:	4b01      	ldr	r3, [pc, #4]	; (80097b0 <_strtod_r+0x8>)
 80097aa:	f7ff ba15 	b.w	8008bd8 <_strtod_l>
 80097ae:	bf00      	nop
 80097b0:	20000078 	.word	0x20000078

080097b4 <_strtol_l.constprop.0>:
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ba:	4680      	mov	r8, r0
 80097bc:	d001      	beq.n	80097c2 <_strtol_l.constprop.0+0xe>
 80097be:	2b24      	cmp	r3, #36	; 0x24
 80097c0:	d906      	bls.n	80097d0 <_strtol_l.constprop.0+0x1c>
 80097c2:	f7fe f8cb 	bl	800795c <__errno>
 80097c6:	2316      	movs	r3, #22
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	2000      	movs	r0, #0
 80097cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d0:	460d      	mov	r5, r1
 80097d2:	4f35      	ldr	r7, [pc, #212]	; (80098a8 <_strtol_l.constprop.0+0xf4>)
 80097d4:	4628      	mov	r0, r5
 80097d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097da:	5de6      	ldrb	r6, [r4, r7]
 80097dc:	f016 0608 	ands.w	r6, r6, #8
 80097e0:	d1f8      	bne.n	80097d4 <_strtol_l.constprop.0+0x20>
 80097e2:	2c2d      	cmp	r4, #45	; 0x2d
 80097e4:	d12f      	bne.n	8009846 <_strtol_l.constprop.0+0x92>
 80097e6:	2601      	movs	r6, #1
 80097e8:	782c      	ldrb	r4, [r5, #0]
 80097ea:	1c85      	adds	r5, r0, #2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d057      	beq.n	80098a0 <_strtol_l.constprop.0+0xec>
 80097f0:	2b10      	cmp	r3, #16
 80097f2:	d109      	bne.n	8009808 <_strtol_l.constprop.0+0x54>
 80097f4:	2c30      	cmp	r4, #48	; 0x30
 80097f6:	d107      	bne.n	8009808 <_strtol_l.constprop.0+0x54>
 80097f8:	7828      	ldrb	r0, [r5, #0]
 80097fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80097fe:	2858      	cmp	r0, #88	; 0x58
 8009800:	d149      	bne.n	8009896 <_strtol_l.constprop.0+0xe2>
 8009802:	2310      	movs	r3, #16
 8009804:	786c      	ldrb	r4, [r5, #1]
 8009806:	3502      	adds	r5, #2
 8009808:	2700      	movs	r7, #0
 800980a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800980e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009812:	fbbe f9f3 	udiv	r9, lr, r3
 8009816:	4638      	mov	r0, r7
 8009818:	fb03 ea19 	mls	sl, r3, r9, lr
 800981c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009820:	f1bc 0f09 	cmp.w	ip, #9
 8009824:	d814      	bhi.n	8009850 <_strtol_l.constprop.0+0x9c>
 8009826:	4664      	mov	r4, ip
 8009828:	42a3      	cmp	r3, r4
 800982a:	dd22      	ble.n	8009872 <_strtol_l.constprop.0+0xbe>
 800982c:	2f00      	cmp	r7, #0
 800982e:	db1d      	blt.n	800986c <_strtol_l.constprop.0+0xb8>
 8009830:	4581      	cmp	r9, r0
 8009832:	d31b      	bcc.n	800986c <_strtol_l.constprop.0+0xb8>
 8009834:	d101      	bne.n	800983a <_strtol_l.constprop.0+0x86>
 8009836:	45a2      	cmp	sl, r4
 8009838:	db18      	blt.n	800986c <_strtol_l.constprop.0+0xb8>
 800983a:	2701      	movs	r7, #1
 800983c:	fb00 4003 	mla	r0, r0, r3, r4
 8009840:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009844:	e7ea      	b.n	800981c <_strtol_l.constprop.0+0x68>
 8009846:	2c2b      	cmp	r4, #43	; 0x2b
 8009848:	bf04      	itt	eq
 800984a:	782c      	ldrbeq	r4, [r5, #0]
 800984c:	1c85      	addeq	r5, r0, #2
 800984e:	e7cd      	b.n	80097ec <_strtol_l.constprop.0+0x38>
 8009850:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009854:	f1bc 0f19 	cmp.w	ip, #25
 8009858:	d801      	bhi.n	800985e <_strtol_l.constprop.0+0xaa>
 800985a:	3c37      	subs	r4, #55	; 0x37
 800985c:	e7e4      	b.n	8009828 <_strtol_l.constprop.0+0x74>
 800985e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009862:	f1bc 0f19 	cmp.w	ip, #25
 8009866:	d804      	bhi.n	8009872 <_strtol_l.constprop.0+0xbe>
 8009868:	3c57      	subs	r4, #87	; 0x57
 800986a:	e7dd      	b.n	8009828 <_strtol_l.constprop.0+0x74>
 800986c:	f04f 37ff 	mov.w	r7, #4294967295
 8009870:	e7e6      	b.n	8009840 <_strtol_l.constprop.0+0x8c>
 8009872:	2f00      	cmp	r7, #0
 8009874:	da07      	bge.n	8009886 <_strtol_l.constprop.0+0xd2>
 8009876:	2322      	movs	r3, #34	; 0x22
 8009878:	4670      	mov	r0, lr
 800987a:	f8c8 3000 	str.w	r3, [r8]
 800987e:	2a00      	cmp	r2, #0
 8009880:	d0a4      	beq.n	80097cc <_strtol_l.constprop.0+0x18>
 8009882:	1e69      	subs	r1, r5, #1
 8009884:	e005      	b.n	8009892 <_strtol_l.constprop.0+0xde>
 8009886:	b106      	cbz	r6, 800988a <_strtol_l.constprop.0+0xd6>
 8009888:	4240      	negs	r0, r0
 800988a:	2a00      	cmp	r2, #0
 800988c:	d09e      	beq.n	80097cc <_strtol_l.constprop.0+0x18>
 800988e:	2f00      	cmp	r7, #0
 8009890:	d1f7      	bne.n	8009882 <_strtol_l.constprop.0+0xce>
 8009892:	6011      	str	r1, [r2, #0]
 8009894:	e79a      	b.n	80097cc <_strtol_l.constprop.0+0x18>
 8009896:	2430      	movs	r4, #48	; 0x30
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1b5      	bne.n	8009808 <_strtol_l.constprop.0+0x54>
 800989c:	2308      	movs	r3, #8
 800989e:	e7b3      	b.n	8009808 <_strtol_l.constprop.0+0x54>
 80098a0:	2c30      	cmp	r4, #48	; 0x30
 80098a2:	d0a9      	beq.n	80097f8 <_strtol_l.constprop.0+0x44>
 80098a4:	230a      	movs	r3, #10
 80098a6:	e7af      	b.n	8009808 <_strtol_l.constprop.0+0x54>
 80098a8:	0800c719 	.word	0x0800c719

080098ac <_strtol_r>:
 80098ac:	f7ff bf82 	b.w	80097b4 <_strtol_l.constprop.0>

080098b0 <_write_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	2200      	movs	r2, #0
 80098ba:	4d05      	ldr	r5, [pc, #20]	; (80098d0 <_write_r+0x20>)
 80098bc:	602a      	str	r2, [r5, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	f7f7 fefe 	bl	80016c0 <_write>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	d102      	bne.n	80098ce <_write_r+0x1e>
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	b103      	cbz	r3, 80098ce <_write_r+0x1e>
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	bd38      	pop	{r3, r4, r5, pc}
 80098d0:	200031b4 	.word	0x200031b4

080098d4 <_close_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	2300      	movs	r3, #0
 80098d8:	4d05      	ldr	r5, [pc, #20]	; (80098f0 <_close_r+0x1c>)
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	f7f7 ff0a 	bl	80016f8 <_close>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_close_r+0x1a>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_close_r+0x1a>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	200031b4 	.word	0x200031b4

080098f4 <quorem>:
 80098f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	6903      	ldr	r3, [r0, #16]
 80098fa:	690c      	ldr	r4, [r1, #16]
 80098fc:	4607      	mov	r7, r0
 80098fe:	42a3      	cmp	r3, r4
 8009900:	f2c0 8082 	blt.w	8009a08 <quorem+0x114>
 8009904:	3c01      	subs	r4, #1
 8009906:	f100 0514 	add.w	r5, r0, #20
 800990a:	f101 0814 	add.w	r8, r1, #20
 800990e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991c:	3301      	adds	r3, #1
 800991e:	429a      	cmp	r2, r3
 8009920:	fbb2 f6f3 	udiv	r6, r2, r3
 8009924:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800992c:	d331      	bcc.n	8009992 <quorem+0x9e>
 800992e:	f04f 0e00 	mov.w	lr, #0
 8009932:	4640      	mov	r0, r8
 8009934:	46ac      	mov	ip, r5
 8009936:	46f2      	mov	sl, lr
 8009938:	f850 2b04 	ldr.w	r2, [r0], #4
 800993c:	b293      	uxth	r3, r2
 800993e:	fb06 e303 	mla	r3, r6, r3, lr
 8009942:	0c12      	lsrs	r2, r2, #16
 8009944:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009948:	b29b      	uxth	r3, r3
 800994a:	fb06 e202 	mla	r2, r6, r2, lr
 800994e:	ebaa 0303 	sub.w	r3, sl, r3
 8009952:	f8dc a000 	ldr.w	sl, [ip]
 8009956:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800995a:	fa1f fa8a 	uxth.w	sl, sl
 800995e:	4453      	add	r3, sl
 8009960:	f8dc a000 	ldr.w	sl, [ip]
 8009964:	b292      	uxth	r2, r2
 8009966:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800996a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009974:	4581      	cmp	r9, r0
 8009976:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800997a:	f84c 3b04 	str.w	r3, [ip], #4
 800997e:	d2db      	bcs.n	8009938 <quorem+0x44>
 8009980:	f855 300b 	ldr.w	r3, [r5, fp]
 8009984:	b92b      	cbnz	r3, 8009992 <quorem+0x9e>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	3b04      	subs	r3, #4
 800998a:	429d      	cmp	r5, r3
 800998c:	461a      	mov	r2, r3
 800998e:	d32f      	bcc.n	80099f0 <quorem+0xfc>
 8009990:	613c      	str	r4, [r7, #16]
 8009992:	4638      	mov	r0, r7
 8009994:	f001 fd60 	bl	800b458 <__mcmp>
 8009998:	2800      	cmp	r0, #0
 800999a:	db25      	blt.n	80099e8 <quorem+0xf4>
 800999c:	4628      	mov	r0, r5
 800999e:	f04f 0c00 	mov.w	ip, #0
 80099a2:	3601      	adds	r6, #1
 80099a4:	f858 1b04 	ldr.w	r1, [r8], #4
 80099a8:	f8d0 e000 	ldr.w	lr, [r0]
 80099ac:	b28b      	uxth	r3, r1
 80099ae:	ebac 0303 	sub.w	r3, ip, r3
 80099b2:	fa1f f28e 	uxth.w	r2, lr
 80099b6:	4413      	add	r3, r2
 80099b8:	0c0a      	lsrs	r2, r1, #16
 80099ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c8:	45c1      	cmp	r9, r8
 80099ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099ce:	f840 3b04 	str.w	r3, [r0], #4
 80099d2:	d2e7      	bcs.n	80099a4 <quorem+0xb0>
 80099d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099dc:	b922      	cbnz	r2, 80099e8 <quorem+0xf4>
 80099de:	3b04      	subs	r3, #4
 80099e0:	429d      	cmp	r5, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	d30a      	bcc.n	80099fc <quorem+0x108>
 80099e6:	613c      	str	r4, [r7, #16]
 80099e8:	4630      	mov	r0, r6
 80099ea:	b003      	add	sp, #12
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	3b04      	subs	r3, #4
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	d1cb      	bne.n	8009990 <quorem+0x9c>
 80099f8:	3c01      	subs	r4, #1
 80099fa:	e7c6      	b.n	800998a <quorem+0x96>
 80099fc:	6812      	ldr	r2, [r2, #0]
 80099fe:	3b04      	subs	r3, #4
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	d1f0      	bne.n	80099e6 <quorem+0xf2>
 8009a04:	3c01      	subs	r4, #1
 8009a06:	e7eb      	b.n	80099e0 <quorem+0xec>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e7ee      	b.n	80099ea <quorem+0xf6>
 8009a0c:	0000      	movs	r0, r0
	...

08009a10 <_dtoa_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	461f      	mov	r7, r3
 8009a18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a1a:	b099      	sub	sp, #100	; 0x64
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009a26:	b974      	cbnz	r4, 8009a46 <_dtoa_r+0x36>
 8009a28:	2010      	movs	r0, #16
 8009a2a:	f001 fa19 	bl	800ae60 <malloc>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	6268      	str	r0, [r5, #36]	; 0x24
 8009a32:	b920      	cbnz	r0, 8009a3e <_dtoa_r+0x2e>
 8009a34:	21ea      	movs	r1, #234	; 0xea
 8009a36:	4ba8      	ldr	r3, [pc, #672]	; (8009cd8 <_dtoa_r+0x2c8>)
 8009a38:	48a8      	ldr	r0, [pc, #672]	; (8009cdc <_dtoa_r+0x2cc>)
 8009a3a:	f002 f8ef 	bl	800bc1c <__assert_func>
 8009a3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a42:	6004      	str	r4, [r0, #0]
 8009a44:	60c4      	str	r4, [r0, #12]
 8009a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a48:	6819      	ldr	r1, [r3, #0]
 8009a4a:	b151      	cbz	r1, 8009a62 <_dtoa_r+0x52>
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4093      	lsls	r3, r2
 8009a52:	604a      	str	r2, [r1, #4]
 8009a54:	608b      	str	r3, [r1, #8]
 8009a56:	4628      	mov	r0, r5
 8009a58:	f001 fa76 	bl	800af48 <_Bfree>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	1e3b      	subs	r3, r7, #0
 8009a64:	bfaf      	iteee	ge
 8009a66:	2300      	movge	r3, #0
 8009a68:	2201      	movlt	r2, #1
 8009a6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a6e:	9305      	strlt	r3, [sp, #20]
 8009a70:	bfa8      	it	ge
 8009a72:	f8c8 3000 	strge.w	r3, [r8]
 8009a76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009a7a:	4b99      	ldr	r3, [pc, #612]	; (8009ce0 <_dtoa_r+0x2d0>)
 8009a7c:	bfb8      	it	lt
 8009a7e:	f8c8 2000 	strlt.w	r2, [r8]
 8009a82:	ea33 0309 	bics.w	r3, r3, r9
 8009a86:	d119      	bne.n	8009abc <_dtoa_r+0xac>
 8009a88:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a94:	4333      	orrs	r3, r6
 8009a96:	f000 857f 	beq.w	800a598 <_dtoa_r+0xb88>
 8009a9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a9c:	b953      	cbnz	r3, 8009ab4 <_dtoa_r+0xa4>
 8009a9e:	4b91      	ldr	r3, [pc, #580]	; (8009ce4 <_dtoa_r+0x2d4>)
 8009aa0:	e022      	b.n	8009ae8 <_dtoa_r+0xd8>
 8009aa2:	4b91      	ldr	r3, [pc, #580]	; (8009ce8 <_dtoa_r+0x2d8>)
 8009aa4:	9303      	str	r3, [sp, #12]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	9803      	ldr	r0, [sp, #12]
 8009aae:	b019      	add	sp, #100	; 0x64
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	4b8b      	ldr	r3, [pc, #556]	; (8009ce4 <_dtoa_r+0x2d4>)
 8009ab6:	9303      	str	r3, [sp, #12]
 8009ab8:	3303      	adds	r3, #3
 8009aba:	e7f5      	b.n	8009aa8 <_dtoa_r+0x98>
 8009abc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009ac0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2300      	movs	r3, #0
 8009acc:	f7f6 ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	b158      	cbz	r0, 8009aec <_dtoa_r+0xdc>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8558 	beq.w	800a592 <_dtoa_r+0xb82>
 8009ae2:	4882      	ldr	r0, [pc, #520]	; (8009cec <_dtoa_r+0x2dc>)
 8009ae4:	6018      	str	r0, [r3, #0]
 8009ae6:	1e43      	subs	r3, r0, #1
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	e7df      	b.n	8009aac <_dtoa_r+0x9c>
 8009aec:	ab16      	add	r3, sp, #88	; 0x58
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	ab17      	add	r3, sp, #92	; 0x5c
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4628      	mov	r0, r5
 8009af6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009afa:	f001 fdcf 	bl	800b69c <__d2b>
 8009afe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b02:	4683      	mov	fp, r0
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	d07f      	beq.n	8009c08 <_dtoa_r+0x1f8>
 8009b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009b1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009b1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009b22:	2200      	movs	r2, #0
 8009b24:	4b72      	ldr	r3, [pc, #456]	; (8009cf0 <_dtoa_r+0x2e0>)
 8009b26:	f7f6 fb1f 	bl	8000168 <__aeabi_dsub>
 8009b2a:	a365      	add	r3, pc, #404	; (adr r3, 8009cc0 <_dtoa_r+0x2b0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fcd2 	bl	80004d8 <__aeabi_dmul>
 8009b34:	a364      	add	r3, pc, #400	; (adr r3, 8009cc8 <_dtoa_r+0x2b8>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fb17 	bl	800016c <__adddf3>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	4620      	mov	r0, r4
 8009b42:	460f      	mov	r7, r1
 8009b44:	f7f6 fc5e 	bl	8000404 <__aeabi_i2d>
 8009b48:	a361      	add	r3, pc, #388	; (adr r3, 8009cd0 <_dtoa_r+0x2c0>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 fcc3 	bl	80004d8 <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4630      	mov	r0, r6
 8009b58:	4639      	mov	r1, r7
 8009b5a:	f7f6 fb07 	bl	800016c <__adddf3>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	f7f6 ff69 	bl	8000a38 <__aeabi_d2iz>
 8009b66:	2200      	movs	r2, #0
 8009b68:	4682      	mov	sl, r0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 ff24 	bl	80009bc <__aeabi_dcmplt>
 8009b74:	b148      	cbz	r0, 8009b8a <_dtoa_r+0x17a>
 8009b76:	4650      	mov	r0, sl
 8009b78:	f7f6 fc44 	bl	8000404 <__aeabi_i2d>
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	463b      	mov	r3, r7
 8009b80:	f7f6 ff12 	bl	80009a8 <__aeabi_dcmpeq>
 8009b84:	b908      	cbnz	r0, 8009b8a <_dtoa_r+0x17a>
 8009b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b8a:	f1ba 0f16 	cmp.w	sl, #22
 8009b8e:	d858      	bhi.n	8009c42 <_dtoa_r+0x232>
 8009b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b94:	4b57      	ldr	r3, [pc, #348]	; (8009cf4 <_dtoa_r+0x2e4>)
 8009b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f7f6 ff0d 	bl	80009bc <__aeabi_dcmplt>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d04f      	beq.n	8009c46 <_dtoa_r+0x236>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bb0:	1b1c      	subs	r4, r3, r4
 8009bb2:	1e63      	subs	r3, r4, #1
 8009bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb6:	bf49      	itett	mi
 8009bb8:	f1c4 0301 	rsbmi	r3, r4, #1
 8009bbc:	2300      	movpl	r3, #0
 8009bbe:	9306      	strmi	r3, [sp, #24]
 8009bc0:	2300      	movmi	r3, #0
 8009bc2:	bf54      	ite	pl
 8009bc4:	9306      	strpl	r3, [sp, #24]
 8009bc6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009bc8:	f1ba 0f00 	cmp.w	sl, #0
 8009bcc:	db3d      	blt.n	8009c4a <_dtoa_r+0x23a>
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009bd4:	4453      	add	r3, sl
 8009bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd8:	2300      	movs	r3, #0
 8009bda:	930a      	str	r3, [sp, #40]	; 0x28
 8009bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	f200 808c 	bhi.w	8009cfc <_dtoa_r+0x2ec>
 8009be4:	2b05      	cmp	r3, #5
 8009be6:	bfc4      	itt	gt
 8009be8:	3b04      	subgt	r3, #4
 8009bea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bee:	bfc8      	it	gt
 8009bf0:	2400      	movgt	r4, #0
 8009bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8009bf6:	bfd8      	it	le
 8009bf8:	2401      	movle	r4, #1
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	f200 808a 	bhi.w	8009d14 <_dtoa_r+0x304>
 8009c00:	e8df f003 	tbb	[pc, r3]
 8009c04:	5b4d4f2d 	.word	0x5b4d4f2d
 8009c08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009c0c:	441c      	add	r4, r3
 8009c0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	bfc3      	ittte	gt
 8009c16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c1a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009c1e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009c22:	f1c3 0320 	rsble	r3, r3, #32
 8009c26:	bfc6      	itte	gt
 8009c28:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c2c:	4318      	orrgt	r0, r3
 8009c2e:	fa06 f003 	lslle.w	r0, r6, r3
 8009c32:	f7f6 fbd7 	bl	80003e4 <__aeabi_ui2d>
 8009c36:	2301      	movs	r3, #1
 8009c38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009c3c:	3c01      	subs	r4, #1
 8009c3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c40:	e76f      	b.n	8009b22 <_dtoa_r+0x112>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e7b2      	b.n	8009bac <_dtoa_r+0x19c>
 8009c46:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c48:	e7b1      	b.n	8009bae <_dtoa_r+0x19e>
 8009c4a:	9b06      	ldr	r3, [sp, #24]
 8009c4c:	eba3 030a 	sub.w	r3, r3, sl
 8009c50:	9306      	str	r3, [sp, #24]
 8009c52:	f1ca 0300 	rsb	r3, sl, #0
 8009c56:	930a      	str	r3, [sp, #40]	; 0x28
 8009c58:	2300      	movs	r3, #0
 8009c5a:	930e      	str	r3, [sp, #56]	; 0x38
 8009c5c:	e7be      	b.n	8009bdc <_dtoa_r+0x1cc>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dc58      	bgt.n	8009d1a <_dtoa_r+0x30a>
 8009c68:	f04f 0901 	mov.w	r9, #1
 8009c6c:	464b      	mov	r3, r9
 8009c6e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c72:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009c76:	2200      	movs	r2, #0
 8009c78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009c7a:	6042      	str	r2, [r0, #4]
 8009c7c:	2204      	movs	r2, #4
 8009c7e:	f102 0614 	add.w	r6, r2, #20
 8009c82:	429e      	cmp	r6, r3
 8009c84:	6841      	ldr	r1, [r0, #4]
 8009c86:	d94e      	bls.n	8009d26 <_dtoa_r+0x316>
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f001 f91d 	bl	800aec8 <_Balloc>
 8009c8e:	9003      	str	r0, [sp, #12]
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d14c      	bne.n	8009d2e <_dtoa_r+0x31e>
 8009c94:	4602      	mov	r2, r0
 8009c96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c9a:	4b17      	ldr	r3, [pc, #92]	; (8009cf8 <_dtoa_r+0x2e8>)
 8009c9c:	e6cc      	b.n	8009a38 <_dtoa_r+0x28>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e7de      	b.n	8009c60 <_dtoa_r+0x250>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ca8:	eb0a 0903 	add.w	r9, sl, r3
 8009cac:	f109 0301 	add.w	r3, r9, #1
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	9308      	str	r3, [sp, #32]
 8009cb4:	bfb8      	it	lt
 8009cb6:	2301      	movlt	r3, #1
 8009cb8:	e7dd      	b.n	8009c76 <_dtoa_r+0x266>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7f2      	b.n	8009ca4 <_dtoa_r+0x294>
 8009cbe:	bf00      	nop
 8009cc0:	636f4361 	.word	0x636f4361
 8009cc4:	3fd287a7 	.word	0x3fd287a7
 8009cc8:	8b60c8b3 	.word	0x8b60c8b3
 8009ccc:	3fc68a28 	.word	0x3fc68a28
 8009cd0:	509f79fb 	.word	0x509f79fb
 8009cd4:	3fd34413 	.word	0x3fd34413
 8009cd8:	0800c826 	.word	0x0800c826
 8009cdc:	0800c83d 	.word	0x0800c83d
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	0800c822 	.word	0x0800c822
 8009ce8:	0800c819 	.word	0x0800c819
 8009cec:	0800c699 	.word	0x0800c699
 8009cf0:	3ff80000 	.word	0x3ff80000
 8009cf4:	0800c9a8 	.word	0x0800c9a8
 8009cf8:	0800c898 	.word	0x0800c898
 8009cfc:	2401      	movs	r4, #1
 8009cfe:	2300      	movs	r3, #0
 8009d00:	940b      	str	r4, [sp, #44]	; 0x2c
 8009d02:	9322      	str	r3, [sp, #136]	; 0x88
 8009d04:	f04f 39ff 	mov.w	r9, #4294967295
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2312      	movs	r3, #18
 8009d0c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d10:	9223      	str	r2, [sp, #140]	; 0x8c
 8009d12:	e7b0      	b.n	8009c76 <_dtoa_r+0x266>
 8009d14:	2301      	movs	r3, #1
 8009d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d18:	e7f4      	b.n	8009d04 <_dtoa_r+0x2f4>
 8009d1a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009d1e:	464b      	mov	r3, r9
 8009d20:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d24:	e7a7      	b.n	8009c76 <_dtoa_r+0x266>
 8009d26:	3101      	adds	r1, #1
 8009d28:	6041      	str	r1, [r0, #4]
 8009d2a:	0052      	lsls	r2, r2, #1
 8009d2c:	e7a7      	b.n	8009c7e <_dtoa_r+0x26e>
 8009d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d30:	9a03      	ldr	r2, [sp, #12]
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	9b08      	ldr	r3, [sp, #32]
 8009d36:	2b0e      	cmp	r3, #14
 8009d38:	f200 80a8 	bhi.w	8009e8c <_dtoa_r+0x47c>
 8009d3c:	2c00      	cmp	r4, #0
 8009d3e:	f000 80a5 	beq.w	8009e8c <_dtoa_r+0x47c>
 8009d42:	f1ba 0f00 	cmp.w	sl, #0
 8009d46:	dd34      	ble.n	8009db2 <_dtoa_r+0x3a2>
 8009d48:	4a9a      	ldr	r2, [pc, #616]	; (8009fb4 <_dtoa_r+0x5a4>)
 8009d4a:	f00a 030f 	and.w	r3, sl, #15
 8009d4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d52:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009d5e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009d62:	d016      	beq.n	8009d92 <_dtoa_r+0x382>
 8009d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d68:	4b93      	ldr	r3, [pc, #588]	; (8009fb8 <_dtoa_r+0x5a8>)
 8009d6a:	2703      	movs	r7, #3
 8009d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d70:	f7f6 fcdc 	bl	800072c <__aeabi_ddiv>
 8009d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d78:	f004 040f 	and.w	r4, r4, #15
 8009d7c:	4e8e      	ldr	r6, [pc, #568]	; (8009fb8 <_dtoa_r+0x5a8>)
 8009d7e:	b954      	cbnz	r4, 8009d96 <_dtoa_r+0x386>
 8009d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d88:	f7f6 fcd0 	bl	800072c <__aeabi_ddiv>
 8009d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d90:	e029      	b.n	8009de6 <_dtoa_r+0x3d6>
 8009d92:	2702      	movs	r7, #2
 8009d94:	e7f2      	b.n	8009d7c <_dtoa_r+0x36c>
 8009d96:	07e1      	lsls	r1, r4, #31
 8009d98:	d508      	bpl.n	8009dac <_dtoa_r+0x39c>
 8009d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009da2:	f7f6 fb99 	bl	80004d8 <__aeabi_dmul>
 8009da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009daa:	3701      	adds	r7, #1
 8009dac:	1064      	asrs	r4, r4, #1
 8009dae:	3608      	adds	r6, #8
 8009db0:	e7e5      	b.n	8009d7e <_dtoa_r+0x36e>
 8009db2:	f000 80a5 	beq.w	8009f00 <_dtoa_r+0x4f0>
 8009db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dba:	f1ca 0400 	rsb	r4, sl, #0
 8009dbe:	4b7d      	ldr	r3, [pc, #500]	; (8009fb4 <_dtoa_r+0x5a4>)
 8009dc0:	f004 020f 	and.w	r2, r4, #15
 8009dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 fb84 	bl	80004d8 <__aeabi_dmul>
 8009dd0:	2702      	movs	r7, #2
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd8:	4e77      	ldr	r6, [pc, #476]	; (8009fb8 <_dtoa_r+0x5a8>)
 8009dda:	1124      	asrs	r4, r4, #4
 8009ddc:	2c00      	cmp	r4, #0
 8009dde:	f040 8084 	bne.w	8009eea <_dtoa_r+0x4da>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1d2      	bne.n	8009d8c <_dtoa_r+0x37c>
 8009de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 808b 	beq.w	8009f04 <_dtoa_r+0x4f4>
 8009dee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009df2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009df6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4b6f      	ldr	r3, [pc, #444]	; (8009fbc <_dtoa_r+0x5ac>)
 8009dfe:	f7f6 fddd 	bl	80009bc <__aeabi_dcmplt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d07e      	beq.n	8009f04 <_dtoa_r+0x4f4>
 8009e06:	9b08      	ldr	r3, [sp, #32]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d07b      	beq.n	8009f04 <_dtoa_r+0x4f4>
 8009e0c:	f1b9 0f00 	cmp.w	r9, #0
 8009e10:	dd38      	ble.n	8009e84 <_dtoa_r+0x474>
 8009e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e16:	2200      	movs	r2, #0
 8009e18:	4b69      	ldr	r3, [pc, #420]	; (8009fc0 <_dtoa_r+0x5b0>)
 8009e1a:	f7f6 fb5d 	bl	80004d8 <__aeabi_dmul>
 8009e1e:	464c      	mov	r4, r9
 8009e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e24:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009e28:	3701      	adds	r7, #1
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	f7f6 faea 	bl	8000404 <__aeabi_i2d>
 8009e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e34:	f7f6 fb50 	bl	80004d8 <__aeabi_dmul>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4b62      	ldr	r3, [pc, #392]	; (8009fc4 <_dtoa_r+0x5b4>)
 8009e3c:	f7f6 f996 	bl	800016c <__adddf3>
 8009e40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009e44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e48:	9611      	str	r6, [sp, #68]	; 0x44
 8009e4a:	2c00      	cmp	r4, #0
 8009e4c:	d15d      	bne.n	8009f0a <_dtoa_r+0x4fa>
 8009e4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e52:	2200      	movs	r2, #0
 8009e54:	4b5c      	ldr	r3, [pc, #368]	; (8009fc8 <_dtoa_r+0x5b8>)
 8009e56:	f7f6 f987 	bl	8000168 <__aeabi_dsub>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e62:	4633      	mov	r3, r6
 8009e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e66:	f7f6 fdc7 	bl	80009f8 <__aeabi_dcmpgt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f040 829c 	bne.w	800a3a8 <_dtoa_r+0x998>
 8009e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009e7a:	f7f6 fd9f 	bl	80009bc <__aeabi_dcmplt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f040 8290 	bne.w	800a3a4 <_dtoa_r+0x994>
 8009e84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009e88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f2c0 8152 	blt.w	800a138 <_dtoa_r+0x728>
 8009e94:	f1ba 0f0e 	cmp.w	sl, #14
 8009e98:	f300 814e 	bgt.w	800a138 <_dtoa_r+0x728>
 8009e9c:	4b45      	ldr	r3, [pc, #276]	; (8009fb4 <_dtoa_r+0x5a4>)
 8009e9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009eaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f280 80db 	bge.w	800a068 <_dtoa_r+0x658>
 8009eb2:	9b08      	ldr	r3, [sp, #32]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f300 80d7 	bgt.w	800a068 <_dtoa_r+0x658>
 8009eba:	f040 8272 	bne.w	800a3a2 <_dtoa_r+0x992>
 8009ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4b40      	ldr	r3, [pc, #256]	; (8009fc8 <_dtoa_r+0x5b8>)
 8009ec6:	f7f6 fb07 	bl	80004d8 <__aeabi_dmul>
 8009eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ece:	f7f6 fd89 	bl	80009e4 <__aeabi_dcmpge>
 8009ed2:	9c08      	ldr	r4, [sp, #32]
 8009ed4:	4626      	mov	r6, r4
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f040 8248 	bne.w	800a36c <_dtoa_r+0x95c>
 8009edc:	2331      	movs	r3, #49	; 0x31
 8009ede:	9f03      	ldr	r7, [sp, #12]
 8009ee0:	f10a 0a01 	add.w	sl, sl, #1
 8009ee4:	f807 3b01 	strb.w	r3, [r7], #1
 8009ee8:	e244      	b.n	800a374 <_dtoa_r+0x964>
 8009eea:	07e2      	lsls	r2, r4, #31
 8009eec:	d505      	bpl.n	8009efa <_dtoa_r+0x4ea>
 8009eee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ef2:	f7f6 faf1 	bl	80004d8 <__aeabi_dmul>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	3701      	adds	r7, #1
 8009efa:	1064      	asrs	r4, r4, #1
 8009efc:	3608      	adds	r6, #8
 8009efe:	e76d      	b.n	8009ddc <_dtoa_r+0x3cc>
 8009f00:	2702      	movs	r7, #2
 8009f02:	e770      	b.n	8009de6 <_dtoa_r+0x3d6>
 8009f04:	46d0      	mov	r8, sl
 8009f06:	9c08      	ldr	r4, [sp, #32]
 8009f08:	e78f      	b.n	8009e2a <_dtoa_r+0x41a>
 8009f0a:	9903      	ldr	r1, [sp, #12]
 8009f0c:	4b29      	ldr	r3, [pc, #164]	; (8009fb4 <_dtoa_r+0x5a4>)
 8009f0e:	4421      	add	r1, r4
 8009f10:	9112      	str	r1, [sp, #72]	; 0x48
 8009f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009f1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f20:	2900      	cmp	r1, #0
 8009f22:	d055      	beq.n	8009fd0 <_dtoa_r+0x5c0>
 8009f24:	2000      	movs	r0, #0
 8009f26:	4929      	ldr	r1, [pc, #164]	; (8009fcc <_dtoa_r+0x5bc>)
 8009f28:	f7f6 fc00 	bl	800072c <__aeabi_ddiv>
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	4632      	mov	r2, r6
 8009f30:	f7f6 f91a 	bl	8000168 <__aeabi_dsub>
 8009f34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f38:	9f03      	ldr	r7, [sp, #12]
 8009f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f3e:	f7f6 fd7b 	bl	8000a38 <__aeabi_d2iz>
 8009f42:	4604      	mov	r4, r0
 8009f44:	f7f6 fa5e 	bl	8000404 <__aeabi_i2d>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f50:	f7f6 f90a 	bl	8000168 <__aeabi_dsub>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	3430      	adds	r4, #48	; 0x30
 8009f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f62:	f807 4b01 	strb.w	r4, [r7], #1
 8009f66:	f7f6 fd29 	bl	80009bc <__aeabi_dcmplt>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d174      	bne.n	800a058 <_dtoa_r+0x648>
 8009f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f72:	2000      	movs	r0, #0
 8009f74:	4911      	ldr	r1, [pc, #68]	; (8009fbc <_dtoa_r+0x5ac>)
 8009f76:	f7f6 f8f7 	bl	8000168 <__aeabi_dsub>
 8009f7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f7e:	f7f6 fd1d 	bl	80009bc <__aeabi_dcmplt>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f040 80b7 	bne.w	800a0f6 <_dtoa_r+0x6e6>
 8009f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f8a:	429f      	cmp	r7, r3
 8009f8c:	f43f af7a 	beq.w	8009e84 <_dtoa_r+0x474>
 8009f90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f94:	2200      	movs	r2, #0
 8009f96:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <_dtoa_r+0x5b0>)
 8009f98:	f7f6 fa9e 	bl	80004d8 <__aeabi_dmul>
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fa6:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <_dtoa_r+0x5b0>)
 8009fa8:	f7f6 fa96 	bl	80004d8 <__aeabi_dmul>
 8009fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fb0:	e7c3      	b.n	8009f3a <_dtoa_r+0x52a>
 8009fb2:	bf00      	nop
 8009fb4:	0800c9a8 	.word	0x0800c9a8
 8009fb8:	0800c980 	.word	0x0800c980
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	40240000 	.word	0x40240000
 8009fc4:	401c0000 	.word	0x401c0000
 8009fc8:	40140000 	.word	0x40140000
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 fa80 	bl	80004d8 <__aeabi_dmul>
 8009fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fde:	9c03      	ldr	r4, [sp, #12]
 8009fe0:	9314      	str	r3, [sp, #80]	; 0x50
 8009fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fe6:	f7f6 fd27 	bl	8000a38 <__aeabi_d2iz>
 8009fea:	9015      	str	r0, [sp, #84]	; 0x54
 8009fec:	f7f6 fa0a 	bl	8000404 <__aeabi_i2d>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ff8:	f7f6 f8b6 	bl	8000168 <__aeabi_dsub>
 8009ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ffe:	4606      	mov	r6, r0
 800a000:	3330      	adds	r3, #48	; 0x30
 800a002:	f804 3b01 	strb.w	r3, [r4], #1
 800a006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a008:	460f      	mov	r7, r1
 800a00a:	429c      	cmp	r4, r3
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	d124      	bne.n	800a05c <_dtoa_r+0x64c>
 800a012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a016:	4bb0      	ldr	r3, [pc, #704]	; (800a2d8 <_dtoa_r+0x8c8>)
 800a018:	f7f6 f8a8 	bl	800016c <__adddf3>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 fce8 	bl	80009f8 <__aeabi_dcmpgt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d163      	bne.n	800a0f4 <_dtoa_r+0x6e4>
 800a02c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a030:	2000      	movs	r0, #0
 800a032:	49a9      	ldr	r1, [pc, #676]	; (800a2d8 <_dtoa_r+0x8c8>)
 800a034:	f7f6 f898 	bl	8000168 <__aeabi_dsub>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 fcbc 	bl	80009bc <__aeabi_dcmplt>
 800a044:	2800      	cmp	r0, #0
 800a046:	f43f af1d 	beq.w	8009e84 <_dtoa_r+0x474>
 800a04a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a04c:	1e7b      	subs	r3, r7, #1
 800a04e:	9314      	str	r3, [sp, #80]	; 0x50
 800a050:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a054:	2b30      	cmp	r3, #48	; 0x30
 800a056:	d0f8      	beq.n	800a04a <_dtoa_r+0x63a>
 800a058:	46c2      	mov	sl, r8
 800a05a:	e03b      	b.n	800a0d4 <_dtoa_r+0x6c4>
 800a05c:	4b9f      	ldr	r3, [pc, #636]	; (800a2dc <_dtoa_r+0x8cc>)
 800a05e:	f7f6 fa3b 	bl	80004d8 <__aeabi_dmul>
 800a062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a066:	e7bc      	b.n	8009fe2 <_dtoa_r+0x5d2>
 800a068:	9f03      	ldr	r7, [sp, #12]
 800a06a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a06e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a072:	4640      	mov	r0, r8
 800a074:	4649      	mov	r1, r9
 800a076:	f7f6 fb59 	bl	800072c <__aeabi_ddiv>
 800a07a:	f7f6 fcdd 	bl	8000a38 <__aeabi_d2iz>
 800a07e:	4604      	mov	r4, r0
 800a080:	f7f6 f9c0 	bl	8000404 <__aeabi_i2d>
 800a084:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a088:	f7f6 fa26 	bl	80004d8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4640      	mov	r0, r8
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 f868 	bl	8000168 <__aeabi_dsub>
 800a098:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a09c:	f807 6b01 	strb.w	r6, [r7], #1
 800a0a0:	9e03      	ldr	r6, [sp, #12]
 800a0a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a0a6:	1bbe      	subs	r6, r7, r6
 800a0a8:	45b4      	cmp	ip, r6
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	d136      	bne.n	800a11e <_dtoa_r+0x70e>
 800a0b0:	f7f6 f85c 	bl	800016c <__adddf3>
 800a0b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4689      	mov	r9, r1
 800a0bc:	f7f6 fc9c 	bl	80009f8 <__aeabi_dcmpgt>
 800a0c0:	bb58      	cbnz	r0, 800a11a <_dtoa_r+0x70a>
 800a0c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	f7f6 fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 800a0ce:	b108      	cbz	r0, 800a0d4 <_dtoa_r+0x6c4>
 800a0d0:	07e1      	lsls	r1, r4, #31
 800a0d2:	d422      	bmi.n	800a11a <_dtoa_r+0x70a>
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	4659      	mov	r1, fp
 800a0d8:	f000 ff36 	bl	800af48 <_Bfree>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	703b      	strb	r3, [r7, #0]
 800a0e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0e2:	f10a 0001 	add.w	r0, sl, #1
 800a0e6:	6018      	str	r0, [r3, #0]
 800a0e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f43f acde 	beq.w	8009aac <_dtoa_r+0x9c>
 800a0f0:	601f      	str	r7, [r3, #0]
 800a0f2:	e4db      	b.n	8009aac <_dtoa_r+0x9c>
 800a0f4:	4627      	mov	r7, r4
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	461f      	mov	r7, r3
 800a0fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0fe:	2a39      	cmp	r2, #57	; 0x39
 800a100:	d107      	bne.n	800a112 <_dtoa_r+0x702>
 800a102:	9a03      	ldr	r2, [sp, #12]
 800a104:	429a      	cmp	r2, r3
 800a106:	d1f7      	bne.n	800a0f8 <_dtoa_r+0x6e8>
 800a108:	2230      	movs	r2, #48	; 0x30
 800a10a:	9903      	ldr	r1, [sp, #12]
 800a10c:	f108 0801 	add.w	r8, r8, #1
 800a110:	700a      	strb	r2, [r1, #0]
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	3201      	adds	r2, #1
 800a116:	701a      	strb	r2, [r3, #0]
 800a118:	e79e      	b.n	800a058 <_dtoa_r+0x648>
 800a11a:	46d0      	mov	r8, sl
 800a11c:	e7eb      	b.n	800a0f6 <_dtoa_r+0x6e6>
 800a11e:	2200      	movs	r2, #0
 800a120:	4b6e      	ldr	r3, [pc, #440]	; (800a2dc <_dtoa_r+0x8cc>)
 800a122:	f7f6 f9d9 	bl	80004d8 <__aeabi_dmul>
 800a126:	2200      	movs	r2, #0
 800a128:	2300      	movs	r3, #0
 800a12a:	4680      	mov	r8, r0
 800a12c:	4689      	mov	r9, r1
 800a12e:	f7f6 fc3b 	bl	80009a8 <__aeabi_dcmpeq>
 800a132:	2800      	cmp	r0, #0
 800a134:	d09b      	beq.n	800a06e <_dtoa_r+0x65e>
 800a136:	e7cd      	b.n	800a0d4 <_dtoa_r+0x6c4>
 800a138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	f000 80d0 	beq.w	800a2e0 <_dtoa_r+0x8d0>
 800a140:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a142:	2a01      	cmp	r2, #1
 800a144:	f300 80ae 	bgt.w	800a2a4 <_dtoa_r+0x894>
 800a148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	f000 80a6 	beq.w	800a29c <_dtoa_r+0x88c>
 800a150:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a154:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a156:	9f06      	ldr	r7, [sp, #24]
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	2101      	movs	r1, #1
 800a15c:	441a      	add	r2, r3
 800a15e:	9206      	str	r2, [sp, #24]
 800a160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a162:	4628      	mov	r0, r5
 800a164:	441a      	add	r2, r3
 800a166:	9209      	str	r2, [sp, #36]	; 0x24
 800a168:	f000 ffee 	bl	800b148 <__i2b>
 800a16c:	4606      	mov	r6, r0
 800a16e:	2f00      	cmp	r7, #0
 800a170:	dd0c      	ble.n	800a18c <_dtoa_r+0x77c>
 800a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	dd09      	ble.n	800a18c <_dtoa_r+0x77c>
 800a178:	42bb      	cmp	r3, r7
 800a17a:	bfa8      	it	ge
 800a17c:	463b      	movge	r3, r7
 800a17e:	9a06      	ldr	r2, [sp, #24]
 800a180:	1aff      	subs	r7, r7, r3
 800a182:	1ad2      	subs	r2, r2, r3
 800a184:	9206      	str	r2, [sp, #24]
 800a186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	9309      	str	r3, [sp, #36]	; 0x24
 800a18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18e:	b1f3      	cbz	r3, 800a1ce <_dtoa_r+0x7be>
 800a190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80a8 	beq.w	800a2e8 <_dtoa_r+0x8d8>
 800a198:	2c00      	cmp	r4, #0
 800a19a:	dd10      	ble.n	800a1be <_dtoa_r+0x7ae>
 800a19c:	4631      	mov	r1, r6
 800a19e:	4622      	mov	r2, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f001 f88f 	bl	800b2c4 <__pow5mult>
 800a1a6:	465a      	mov	r2, fp
 800a1a8:	4601      	mov	r1, r0
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f000 ffe1 	bl	800b174 <__multiply>
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 fec6 	bl	800af48 <_Bfree>
 800a1bc:	46c3      	mov	fp, r8
 800a1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c0:	1b1a      	subs	r2, r3, r4
 800a1c2:	d004      	beq.n	800a1ce <_dtoa_r+0x7be>
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f001 f87c 	bl	800b2c4 <__pow5mult>
 800a1cc:	4683      	mov	fp, r0
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 ffb9 	bl	800b148 <__i2b>
 800a1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1d8:	4604      	mov	r4, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f340 8086 	ble.w	800a2ec <_dtoa_r+0x8dc>
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f001 f86d 	bl	800b2c4 <__pow5mult>
 800a1ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	dd7f      	ble.n	800a2f2 <_dtoa_r+0x8e2>
 800a1f2:	f04f 0800 	mov.w	r8, #0
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1fc:	6918      	ldr	r0, [r3, #16]
 800a1fe:	f000 ff55 	bl	800b0ac <__hi0bits>
 800a202:	f1c0 0020 	rsb	r0, r0, #32
 800a206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a208:	4418      	add	r0, r3
 800a20a:	f010 001f 	ands.w	r0, r0, #31
 800a20e:	f000 8092 	beq.w	800a336 <_dtoa_r+0x926>
 800a212:	f1c0 0320 	rsb	r3, r0, #32
 800a216:	2b04      	cmp	r3, #4
 800a218:	f340 808a 	ble.w	800a330 <_dtoa_r+0x920>
 800a21c:	f1c0 001c 	rsb	r0, r0, #28
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	4407      	add	r7, r0
 800a224:	4403      	add	r3, r0
 800a226:	9306      	str	r3, [sp, #24]
 800a228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a22a:	4403      	add	r3, r0
 800a22c:	9309      	str	r3, [sp, #36]	; 0x24
 800a22e:	9b06      	ldr	r3, [sp, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	dd05      	ble.n	800a240 <_dtoa_r+0x830>
 800a234:	4659      	mov	r1, fp
 800a236:	461a      	mov	r2, r3
 800a238:	4628      	mov	r0, r5
 800a23a:	f001 f89d 	bl	800b378 <__lshift>
 800a23e:	4683      	mov	fp, r0
 800a240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a242:	2b00      	cmp	r3, #0
 800a244:	dd05      	ble.n	800a252 <_dtoa_r+0x842>
 800a246:	4621      	mov	r1, r4
 800a248:	461a      	mov	r2, r3
 800a24a:	4628      	mov	r0, r5
 800a24c:	f001 f894 	bl	800b378 <__lshift>
 800a250:	4604      	mov	r4, r0
 800a252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d070      	beq.n	800a33a <_dtoa_r+0x92a>
 800a258:	4621      	mov	r1, r4
 800a25a:	4658      	mov	r0, fp
 800a25c:	f001 f8fc 	bl	800b458 <__mcmp>
 800a260:	2800      	cmp	r0, #0
 800a262:	da6a      	bge.n	800a33a <_dtoa_r+0x92a>
 800a264:	2300      	movs	r3, #0
 800a266:	4659      	mov	r1, fp
 800a268:	220a      	movs	r2, #10
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 fe8e 	bl	800af8c <__multadd>
 800a270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a272:	4683      	mov	fp, r0
 800a274:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 8194 	beq.w	800a5a6 <_dtoa_r+0xb96>
 800a27e:	4631      	mov	r1, r6
 800a280:	2300      	movs	r3, #0
 800a282:	220a      	movs	r2, #10
 800a284:	4628      	mov	r0, r5
 800a286:	f000 fe81 	bl	800af8c <__multadd>
 800a28a:	f1b9 0f00 	cmp.w	r9, #0
 800a28e:	4606      	mov	r6, r0
 800a290:	f300 8093 	bgt.w	800a3ba <_dtoa_r+0x9aa>
 800a294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a296:	2b02      	cmp	r3, #2
 800a298:	dc57      	bgt.n	800a34a <_dtoa_r+0x93a>
 800a29a:	e08e      	b.n	800a3ba <_dtoa_r+0x9aa>
 800a29c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a29e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2a2:	e757      	b.n	800a154 <_dtoa_r+0x744>
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	1e5c      	subs	r4, r3, #1
 800a2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	bfb7      	itett	lt
 800a2ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2b0:	1b1c      	subge	r4, r3, r4
 800a2b2:	1ae2      	sublt	r2, r4, r3
 800a2b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a2b6:	bfbe      	ittt	lt
 800a2b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a2ba:	189b      	addlt	r3, r3, r2
 800a2bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a2be:	9b08      	ldr	r3, [sp, #32]
 800a2c0:	bfb8      	it	lt
 800a2c2:	2400      	movlt	r4, #0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bfbb      	ittet	lt
 800a2c8:	9b06      	ldrlt	r3, [sp, #24]
 800a2ca:	9a08      	ldrlt	r2, [sp, #32]
 800a2cc:	9f06      	ldrge	r7, [sp, #24]
 800a2ce:	1a9f      	sublt	r7, r3, r2
 800a2d0:	bfac      	ite	ge
 800a2d2:	9b08      	ldrge	r3, [sp, #32]
 800a2d4:	2300      	movlt	r3, #0
 800a2d6:	e73f      	b.n	800a158 <_dtoa_r+0x748>
 800a2d8:	3fe00000 	.word	0x3fe00000
 800a2dc:	40240000 	.word	0x40240000
 800a2e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2e2:	9f06      	ldr	r7, [sp, #24]
 800a2e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a2e6:	e742      	b.n	800a16e <_dtoa_r+0x75e>
 800a2e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ea:	e76b      	b.n	800a1c4 <_dtoa_r+0x7b4>
 800a2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	dc19      	bgt.n	800a326 <_dtoa_r+0x916>
 800a2f2:	9b04      	ldr	r3, [sp, #16]
 800a2f4:	b9bb      	cbnz	r3, 800a326 <_dtoa_r+0x916>
 800a2f6:	9b05      	ldr	r3, [sp, #20]
 800a2f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2fc:	b99b      	cbnz	r3, 800a326 <_dtoa_r+0x916>
 800a2fe:	9b05      	ldr	r3, [sp, #20]
 800a300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a304:	0d1b      	lsrs	r3, r3, #20
 800a306:	051b      	lsls	r3, r3, #20
 800a308:	b183      	cbz	r3, 800a32c <_dtoa_r+0x91c>
 800a30a:	f04f 0801 	mov.w	r8, #1
 800a30e:	9b06      	ldr	r3, [sp, #24]
 800a310:	3301      	adds	r3, #1
 800a312:	9306      	str	r3, [sp, #24]
 800a314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a316:	3301      	adds	r3, #1
 800a318:	9309      	str	r3, [sp, #36]	; 0x24
 800a31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f47f af6a 	bne.w	800a1f6 <_dtoa_r+0x7e6>
 800a322:	2001      	movs	r0, #1
 800a324:	e76f      	b.n	800a206 <_dtoa_r+0x7f6>
 800a326:	f04f 0800 	mov.w	r8, #0
 800a32a:	e7f6      	b.n	800a31a <_dtoa_r+0x90a>
 800a32c:	4698      	mov	r8, r3
 800a32e:	e7f4      	b.n	800a31a <_dtoa_r+0x90a>
 800a330:	f43f af7d 	beq.w	800a22e <_dtoa_r+0x81e>
 800a334:	4618      	mov	r0, r3
 800a336:	301c      	adds	r0, #28
 800a338:	e772      	b.n	800a220 <_dtoa_r+0x810>
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc36      	bgt.n	800a3ae <_dtoa_r+0x99e>
 800a340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a342:	2b02      	cmp	r3, #2
 800a344:	dd33      	ble.n	800a3ae <_dtoa_r+0x99e>
 800a346:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a34a:	f1b9 0f00 	cmp.w	r9, #0
 800a34e:	d10d      	bne.n	800a36c <_dtoa_r+0x95c>
 800a350:	4621      	mov	r1, r4
 800a352:	464b      	mov	r3, r9
 800a354:	2205      	movs	r2, #5
 800a356:	4628      	mov	r0, r5
 800a358:	f000 fe18 	bl	800af8c <__multadd>
 800a35c:	4601      	mov	r1, r0
 800a35e:	4604      	mov	r4, r0
 800a360:	4658      	mov	r0, fp
 800a362:	f001 f879 	bl	800b458 <__mcmp>
 800a366:	2800      	cmp	r0, #0
 800a368:	f73f adb8 	bgt.w	8009edc <_dtoa_r+0x4cc>
 800a36c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a36e:	9f03      	ldr	r7, [sp, #12]
 800a370:	ea6f 0a03 	mvn.w	sl, r3
 800a374:	f04f 0800 	mov.w	r8, #0
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 fde4 	bl	800af48 <_Bfree>
 800a380:	2e00      	cmp	r6, #0
 800a382:	f43f aea7 	beq.w	800a0d4 <_dtoa_r+0x6c4>
 800a386:	f1b8 0f00 	cmp.w	r8, #0
 800a38a:	d005      	beq.n	800a398 <_dtoa_r+0x988>
 800a38c:	45b0      	cmp	r8, r6
 800a38e:	d003      	beq.n	800a398 <_dtoa_r+0x988>
 800a390:	4641      	mov	r1, r8
 800a392:	4628      	mov	r0, r5
 800a394:	f000 fdd8 	bl	800af48 <_Bfree>
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	f000 fdd4 	bl	800af48 <_Bfree>
 800a3a0:	e698      	b.n	800a0d4 <_dtoa_r+0x6c4>
 800a3a2:	2400      	movs	r4, #0
 800a3a4:	4626      	mov	r6, r4
 800a3a6:	e7e1      	b.n	800a36c <_dtoa_r+0x95c>
 800a3a8:	46c2      	mov	sl, r8
 800a3aa:	4626      	mov	r6, r4
 800a3ac:	e596      	b.n	8009edc <_dtoa_r+0x4cc>
 800a3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 80fd 	beq.w	800a5b4 <_dtoa_r+0xba4>
 800a3ba:	2f00      	cmp	r7, #0
 800a3bc:	dd05      	ble.n	800a3ca <_dtoa_r+0x9ba>
 800a3be:	4631      	mov	r1, r6
 800a3c0:	463a      	mov	r2, r7
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 ffd8 	bl	800b378 <__lshift>
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	f1b8 0f00 	cmp.w	r8, #0
 800a3ce:	d05c      	beq.n	800a48a <_dtoa_r+0xa7a>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	6871      	ldr	r1, [r6, #4]
 800a3d4:	f000 fd78 	bl	800aec8 <_Balloc>
 800a3d8:	4607      	mov	r7, r0
 800a3da:	b928      	cbnz	r0, 800a3e8 <_dtoa_r+0x9d8>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3e2:	4b7f      	ldr	r3, [pc, #508]	; (800a5e0 <_dtoa_r+0xbd0>)
 800a3e4:	f7ff bb28 	b.w	8009a38 <_dtoa_r+0x28>
 800a3e8:	6932      	ldr	r2, [r6, #16]
 800a3ea:	f106 010c 	add.w	r1, r6, #12
 800a3ee:	3202      	adds	r2, #2
 800a3f0:	0092      	lsls	r2, r2, #2
 800a3f2:	300c      	adds	r0, #12
 800a3f4:	f7fd fbd5 	bl	8007ba2 <memcpy>
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 ffbb 	bl	800b378 <__lshift>
 800a402:	46b0      	mov	r8, r6
 800a404:	4606      	mov	r6, r0
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	3301      	adds	r3, #1
 800a40a:	9308      	str	r3, [sp, #32]
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	444b      	add	r3, r9
 800a410:	930a      	str	r3, [sp, #40]	; 0x28
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	9309      	str	r3, [sp, #36]	; 0x24
 800a41a:	9b08      	ldr	r3, [sp, #32]
 800a41c:	4621      	mov	r1, r4
 800a41e:	3b01      	subs	r3, #1
 800a420:	4658      	mov	r0, fp
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	f7ff fa66 	bl	80098f4 <quorem>
 800a428:	4603      	mov	r3, r0
 800a42a:	4641      	mov	r1, r8
 800a42c:	3330      	adds	r3, #48	; 0x30
 800a42e:	9006      	str	r0, [sp, #24]
 800a430:	4658      	mov	r0, fp
 800a432:	930b      	str	r3, [sp, #44]	; 0x2c
 800a434:	f001 f810 	bl	800b458 <__mcmp>
 800a438:	4632      	mov	r2, r6
 800a43a:	4681      	mov	r9, r0
 800a43c:	4621      	mov	r1, r4
 800a43e:	4628      	mov	r0, r5
 800a440:	f001 f826 	bl	800b490 <__mdiff>
 800a444:	68c2      	ldr	r2, [r0, #12]
 800a446:	4607      	mov	r7, r0
 800a448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a44a:	bb02      	cbnz	r2, 800a48e <_dtoa_r+0xa7e>
 800a44c:	4601      	mov	r1, r0
 800a44e:	4658      	mov	r0, fp
 800a450:	f001 f802 	bl	800b458 <__mcmp>
 800a454:	4602      	mov	r2, r0
 800a456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a458:	4639      	mov	r1, r7
 800a45a:	4628      	mov	r0, r5
 800a45c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a460:	f000 fd72 	bl	800af48 <_Bfree>
 800a464:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a468:	9f08      	ldr	r7, [sp, #32]
 800a46a:	ea43 0102 	orr.w	r1, r3, r2
 800a46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a470:	430b      	orrs	r3, r1
 800a472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a474:	d10d      	bne.n	800a492 <_dtoa_r+0xa82>
 800a476:	2b39      	cmp	r3, #57	; 0x39
 800a478:	d029      	beq.n	800a4ce <_dtoa_r+0xabe>
 800a47a:	f1b9 0f00 	cmp.w	r9, #0
 800a47e:	dd01      	ble.n	800a484 <_dtoa_r+0xa74>
 800a480:	9b06      	ldr	r3, [sp, #24]
 800a482:	3331      	adds	r3, #49	; 0x31
 800a484:	9a04      	ldr	r2, [sp, #16]
 800a486:	7013      	strb	r3, [r2, #0]
 800a488:	e776      	b.n	800a378 <_dtoa_r+0x968>
 800a48a:	4630      	mov	r0, r6
 800a48c:	e7b9      	b.n	800a402 <_dtoa_r+0x9f2>
 800a48e:	2201      	movs	r2, #1
 800a490:	e7e2      	b.n	800a458 <_dtoa_r+0xa48>
 800a492:	f1b9 0f00 	cmp.w	r9, #0
 800a496:	db06      	blt.n	800a4a6 <_dtoa_r+0xa96>
 800a498:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a49a:	ea41 0909 	orr.w	r9, r1, r9
 800a49e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4a0:	ea59 0101 	orrs.w	r1, r9, r1
 800a4a4:	d120      	bne.n	800a4e8 <_dtoa_r+0xad8>
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	ddec      	ble.n	800a484 <_dtoa_r+0xa74>
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	f000 ff61 	bl	800b378 <__lshift>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4683      	mov	fp, r0
 800a4ba:	f000 ffcd 	bl	800b458 <__mcmp>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	9b08      	ldr	r3, [sp, #32]
 800a4c2:	dc02      	bgt.n	800a4ca <_dtoa_r+0xaba>
 800a4c4:	d1de      	bne.n	800a484 <_dtoa_r+0xa74>
 800a4c6:	07da      	lsls	r2, r3, #31
 800a4c8:	d5dc      	bpl.n	800a484 <_dtoa_r+0xa74>
 800a4ca:	2b39      	cmp	r3, #57	; 0x39
 800a4cc:	d1d8      	bne.n	800a480 <_dtoa_r+0xa70>
 800a4ce:	2339      	movs	r3, #57	; 0x39
 800a4d0:	9a04      	ldr	r2, [sp, #16]
 800a4d2:	7013      	strb	r3, [r2, #0]
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	2a39      	cmp	r2, #57	; 0x39
 800a4e0:	d050      	beq.n	800a584 <_dtoa_r+0xb74>
 800a4e2:	3201      	adds	r2, #1
 800a4e4:	701a      	strb	r2, [r3, #0]
 800a4e6:	e747      	b.n	800a378 <_dtoa_r+0x968>
 800a4e8:	2a00      	cmp	r2, #0
 800a4ea:	dd03      	ble.n	800a4f4 <_dtoa_r+0xae4>
 800a4ec:	2b39      	cmp	r3, #57	; 0x39
 800a4ee:	d0ee      	beq.n	800a4ce <_dtoa_r+0xabe>
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	e7c7      	b.n	800a484 <_dtoa_r+0xa74>
 800a4f4:	9a08      	ldr	r2, [sp, #32]
 800a4f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a4f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a4fc:	428a      	cmp	r2, r1
 800a4fe:	d02a      	beq.n	800a556 <_dtoa_r+0xb46>
 800a500:	4659      	mov	r1, fp
 800a502:	2300      	movs	r3, #0
 800a504:	220a      	movs	r2, #10
 800a506:	4628      	mov	r0, r5
 800a508:	f000 fd40 	bl	800af8c <__multadd>
 800a50c:	45b0      	cmp	r8, r6
 800a50e:	4683      	mov	fp, r0
 800a510:	f04f 0300 	mov.w	r3, #0
 800a514:	f04f 020a 	mov.w	r2, #10
 800a518:	4641      	mov	r1, r8
 800a51a:	4628      	mov	r0, r5
 800a51c:	d107      	bne.n	800a52e <_dtoa_r+0xb1e>
 800a51e:	f000 fd35 	bl	800af8c <__multadd>
 800a522:	4680      	mov	r8, r0
 800a524:	4606      	mov	r6, r0
 800a526:	9b08      	ldr	r3, [sp, #32]
 800a528:	3301      	adds	r3, #1
 800a52a:	9308      	str	r3, [sp, #32]
 800a52c:	e775      	b.n	800a41a <_dtoa_r+0xa0a>
 800a52e:	f000 fd2d 	bl	800af8c <__multadd>
 800a532:	4631      	mov	r1, r6
 800a534:	4680      	mov	r8, r0
 800a536:	2300      	movs	r3, #0
 800a538:	220a      	movs	r2, #10
 800a53a:	4628      	mov	r0, r5
 800a53c:	f000 fd26 	bl	800af8c <__multadd>
 800a540:	4606      	mov	r6, r0
 800a542:	e7f0      	b.n	800a526 <_dtoa_r+0xb16>
 800a544:	f1b9 0f00 	cmp.w	r9, #0
 800a548:	bfcc      	ite	gt
 800a54a:	464f      	movgt	r7, r9
 800a54c:	2701      	movle	r7, #1
 800a54e:	f04f 0800 	mov.w	r8, #0
 800a552:	9a03      	ldr	r2, [sp, #12]
 800a554:	4417      	add	r7, r2
 800a556:	4659      	mov	r1, fp
 800a558:	2201      	movs	r2, #1
 800a55a:	4628      	mov	r0, r5
 800a55c:	9308      	str	r3, [sp, #32]
 800a55e:	f000 ff0b 	bl	800b378 <__lshift>
 800a562:	4621      	mov	r1, r4
 800a564:	4683      	mov	fp, r0
 800a566:	f000 ff77 	bl	800b458 <__mcmp>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	dcb2      	bgt.n	800a4d4 <_dtoa_r+0xac4>
 800a56e:	d102      	bne.n	800a576 <_dtoa_r+0xb66>
 800a570:	9b08      	ldr	r3, [sp, #32]
 800a572:	07db      	lsls	r3, r3, #31
 800a574:	d4ae      	bmi.n	800a4d4 <_dtoa_r+0xac4>
 800a576:	463b      	mov	r3, r7
 800a578:	461f      	mov	r7, r3
 800a57a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a57e:	2a30      	cmp	r2, #48	; 0x30
 800a580:	d0fa      	beq.n	800a578 <_dtoa_r+0xb68>
 800a582:	e6f9      	b.n	800a378 <_dtoa_r+0x968>
 800a584:	9a03      	ldr	r2, [sp, #12]
 800a586:	429a      	cmp	r2, r3
 800a588:	d1a5      	bne.n	800a4d6 <_dtoa_r+0xac6>
 800a58a:	2331      	movs	r3, #49	; 0x31
 800a58c:	f10a 0a01 	add.w	sl, sl, #1
 800a590:	e779      	b.n	800a486 <_dtoa_r+0xa76>
 800a592:	4b14      	ldr	r3, [pc, #80]	; (800a5e4 <_dtoa_r+0xbd4>)
 800a594:	f7ff baa8 	b.w	8009ae8 <_dtoa_r+0xd8>
 800a598:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f47f aa81 	bne.w	8009aa2 <_dtoa_r+0x92>
 800a5a0:	4b11      	ldr	r3, [pc, #68]	; (800a5e8 <_dtoa_r+0xbd8>)
 800a5a2:	f7ff baa1 	b.w	8009ae8 <_dtoa_r+0xd8>
 800a5a6:	f1b9 0f00 	cmp.w	r9, #0
 800a5aa:	dc03      	bgt.n	800a5b4 <_dtoa_r+0xba4>
 800a5ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	f73f aecb 	bgt.w	800a34a <_dtoa_r+0x93a>
 800a5b4:	9f03      	ldr	r7, [sp, #12]
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4658      	mov	r0, fp
 800a5ba:	f7ff f99b 	bl	80098f4 <quorem>
 800a5be:	9a03      	ldr	r2, [sp, #12]
 800a5c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a5c4:	f807 3b01 	strb.w	r3, [r7], #1
 800a5c8:	1aba      	subs	r2, r7, r2
 800a5ca:	4591      	cmp	r9, r2
 800a5cc:	ddba      	ble.n	800a544 <_dtoa_r+0xb34>
 800a5ce:	4659      	mov	r1, fp
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 fcd9 	bl	800af8c <__multadd>
 800a5da:	4683      	mov	fp, r0
 800a5dc:	e7eb      	b.n	800a5b6 <_dtoa_r+0xba6>
 800a5de:	bf00      	nop
 800a5e0:	0800c898 	.word	0x0800c898
 800a5e4:	0800c698 	.word	0x0800c698
 800a5e8:	0800c819 	.word	0x0800c819

0800a5ec <__sflush_r>:
 800a5ec:	898a      	ldrh	r2, [r1, #12]
 800a5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	0710      	lsls	r0, r2, #28
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	d457      	bmi.n	800a6a8 <__sflush_r+0xbc>
 800a5f8:	684b      	ldr	r3, [r1, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	dc04      	bgt.n	800a608 <__sflush_r+0x1c>
 800a5fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	dc01      	bgt.n	800a608 <__sflush_r+0x1c>
 800a604:	2000      	movs	r0, #0
 800a606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d0fa      	beq.n	800a604 <__sflush_r+0x18>
 800a60e:	2300      	movs	r3, #0
 800a610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a614:	682f      	ldr	r7, [r5, #0]
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	d032      	beq.n	800a680 <__sflush_r+0x94>
 800a61a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	075a      	lsls	r2, r3, #29
 800a620:	d505      	bpl.n	800a62e <__sflush_r+0x42>
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a628:	b10b      	cbz	r3, 800a62e <__sflush_r+0x42>
 800a62a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a62c:	1ac0      	subs	r0, r0, r3
 800a62e:	2300      	movs	r3, #0
 800a630:	4602      	mov	r2, r0
 800a632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a634:	4628      	mov	r0, r5
 800a636:	6a21      	ldr	r1, [r4, #32]
 800a638:	47b0      	blx	r6
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	d106      	bne.n	800a64e <__sflush_r+0x62>
 800a640:	6829      	ldr	r1, [r5, #0]
 800a642:	291d      	cmp	r1, #29
 800a644:	d82c      	bhi.n	800a6a0 <__sflush_r+0xb4>
 800a646:	4a29      	ldr	r2, [pc, #164]	; (800a6ec <__sflush_r+0x100>)
 800a648:	40ca      	lsrs	r2, r1
 800a64a:	07d6      	lsls	r6, r2, #31
 800a64c:	d528      	bpl.n	800a6a0 <__sflush_r+0xb4>
 800a64e:	2200      	movs	r2, #0
 800a650:	6062      	str	r2, [r4, #4]
 800a652:	6922      	ldr	r2, [r4, #16]
 800a654:	04d9      	lsls	r1, r3, #19
 800a656:	6022      	str	r2, [r4, #0]
 800a658:	d504      	bpl.n	800a664 <__sflush_r+0x78>
 800a65a:	1c42      	adds	r2, r0, #1
 800a65c:	d101      	bne.n	800a662 <__sflush_r+0x76>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	b903      	cbnz	r3, 800a664 <__sflush_r+0x78>
 800a662:	6560      	str	r0, [r4, #84]	; 0x54
 800a664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a666:	602f      	str	r7, [r5, #0]
 800a668:	2900      	cmp	r1, #0
 800a66a:	d0cb      	beq.n	800a604 <__sflush_r+0x18>
 800a66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a670:	4299      	cmp	r1, r3
 800a672:	d002      	beq.n	800a67a <__sflush_r+0x8e>
 800a674:	4628      	mov	r0, r5
 800a676:	f001 f8f3 	bl	800b860 <_free_r>
 800a67a:	2000      	movs	r0, #0
 800a67c:	6360      	str	r0, [r4, #52]	; 0x34
 800a67e:	e7c2      	b.n	800a606 <__sflush_r+0x1a>
 800a680:	6a21      	ldr	r1, [r4, #32]
 800a682:	2301      	movs	r3, #1
 800a684:	4628      	mov	r0, r5
 800a686:	47b0      	blx	r6
 800a688:	1c41      	adds	r1, r0, #1
 800a68a:	d1c7      	bne.n	800a61c <__sflush_r+0x30>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0c4      	beq.n	800a61c <__sflush_r+0x30>
 800a692:	2b1d      	cmp	r3, #29
 800a694:	d001      	beq.n	800a69a <__sflush_r+0xae>
 800a696:	2b16      	cmp	r3, #22
 800a698:	d101      	bne.n	800a69e <__sflush_r+0xb2>
 800a69a:	602f      	str	r7, [r5, #0]
 800a69c:	e7b2      	b.n	800a604 <__sflush_r+0x18>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7ae      	b.n	800a606 <__sflush_r+0x1a>
 800a6a8:	690f      	ldr	r7, [r1, #16]
 800a6aa:	2f00      	cmp	r7, #0
 800a6ac:	d0aa      	beq.n	800a604 <__sflush_r+0x18>
 800a6ae:	0793      	lsls	r3, r2, #30
 800a6b0:	bf18      	it	ne
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	680e      	ldr	r6, [r1, #0]
 800a6b6:	bf08      	it	eq
 800a6b8:	694b      	ldreq	r3, [r1, #20]
 800a6ba:	1bf6      	subs	r6, r6, r7
 800a6bc:	600f      	str	r7, [r1, #0]
 800a6be:	608b      	str	r3, [r1, #8]
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	dd9f      	ble.n	800a604 <__sflush_r+0x18>
 800a6c4:	4633      	mov	r3, r6
 800a6c6:	463a      	mov	r2, r7
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	6a21      	ldr	r1, [r4, #32]
 800a6cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a6d0:	47e0      	blx	ip
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	dc06      	bgt.n	800a6e4 <__sflush_r+0xf8>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	e790      	b.n	800a606 <__sflush_r+0x1a>
 800a6e4:	4407      	add	r7, r0
 800a6e6:	1a36      	subs	r6, r6, r0
 800a6e8:	e7ea      	b.n	800a6c0 <__sflush_r+0xd4>
 800a6ea:	bf00      	nop
 800a6ec:	20400001 	.word	0x20400001

0800a6f0 <_fflush_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	690b      	ldr	r3, [r1, #16]
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	b913      	cbnz	r3, 800a700 <_fflush_r+0x10>
 800a6fa:	2500      	movs	r5, #0
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	b118      	cbz	r0, 800a70a <_fflush_r+0x1a>
 800a702:	6983      	ldr	r3, [r0, #24]
 800a704:	b90b      	cbnz	r3, 800a70a <_fflush_r+0x1a>
 800a706:	f7fd f987 	bl	8007a18 <__sinit>
 800a70a:	4b14      	ldr	r3, [pc, #80]	; (800a75c <_fflush_r+0x6c>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	d11b      	bne.n	800a748 <_fflush_r+0x58>
 800a710:	686c      	ldr	r4, [r5, #4]
 800a712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0ef      	beq.n	800a6fa <_fflush_r+0xa>
 800a71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a71c:	07d0      	lsls	r0, r2, #31
 800a71e:	d404      	bmi.n	800a72a <_fflush_r+0x3a>
 800a720:	0599      	lsls	r1, r3, #22
 800a722:	d402      	bmi.n	800a72a <_fflush_r+0x3a>
 800a724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a726:	f7fd fa3a 	bl	8007b9e <__retarget_lock_acquire_recursive>
 800a72a:	4628      	mov	r0, r5
 800a72c:	4621      	mov	r1, r4
 800a72e:	f7ff ff5d 	bl	800a5ec <__sflush_r>
 800a732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a734:	4605      	mov	r5, r0
 800a736:	07da      	lsls	r2, r3, #31
 800a738:	d4e0      	bmi.n	800a6fc <_fflush_r+0xc>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	059b      	lsls	r3, r3, #22
 800a73e:	d4dd      	bmi.n	800a6fc <_fflush_r+0xc>
 800a740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a742:	f7fd fa2d 	bl	8007ba0 <__retarget_lock_release_recursive>
 800a746:	e7d9      	b.n	800a6fc <_fflush_r+0xc>
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <_fflush_r+0x70>)
 800a74a:	429c      	cmp	r4, r3
 800a74c:	d101      	bne.n	800a752 <_fflush_r+0x62>
 800a74e:	68ac      	ldr	r4, [r5, #8]
 800a750:	e7df      	b.n	800a712 <_fflush_r+0x22>
 800a752:	4b04      	ldr	r3, [pc, #16]	; (800a764 <_fflush_r+0x74>)
 800a754:	429c      	cmp	r4, r3
 800a756:	bf08      	it	eq
 800a758:	68ec      	ldreq	r4, [r5, #12]
 800a75a:	e7da      	b.n	800a712 <_fflush_r+0x22>
 800a75c:	0800c644 	.word	0x0800c644
 800a760:	0800c664 	.word	0x0800c664
 800a764:	0800c624 	.word	0x0800c624

0800a768 <rshift>:
 800a768:	6903      	ldr	r3, [r0, #16]
 800a76a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a76e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a772:	f100 0414 	add.w	r4, r0, #20
 800a776:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a77a:	dd46      	ble.n	800a80a <rshift+0xa2>
 800a77c:	f011 011f 	ands.w	r1, r1, #31
 800a780:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a784:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a788:	d10c      	bne.n	800a7a4 <rshift+0x3c>
 800a78a:	4629      	mov	r1, r5
 800a78c:	f100 0710 	add.w	r7, r0, #16
 800a790:	42b1      	cmp	r1, r6
 800a792:	d335      	bcc.n	800a800 <rshift+0x98>
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	1eea      	subs	r2, r5, #3
 800a79a:	4296      	cmp	r6, r2
 800a79c:	bf38      	it	cc
 800a79e:	2300      	movcc	r3, #0
 800a7a0:	4423      	add	r3, r4
 800a7a2:	e015      	b.n	800a7d0 <rshift+0x68>
 800a7a4:	46a1      	mov	r9, r4
 800a7a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7aa:	f1c1 0820 	rsb	r8, r1, #32
 800a7ae:	40cf      	lsrs	r7, r1
 800a7b0:	f105 0e04 	add.w	lr, r5, #4
 800a7b4:	4576      	cmp	r6, lr
 800a7b6:	46f4      	mov	ip, lr
 800a7b8:	d816      	bhi.n	800a7e8 <rshift+0x80>
 800a7ba:	1a9a      	subs	r2, r3, r2
 800a7bc:	0092      	lsls	r2, r2, #2
 800a7be:	3a04      	subs	r2, #4
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	42ae      	cmp	r6, r5
 800a7c4:	bf38      	it	cc
 800a7c6:	2200      	movcc	r2, #0
 800a7c8:	18a3      	adds	r3, r4, r2
 800a7ca:	50a7      	str	r7, [r4, r2]
 800a7cc:	b107      	cbz	r7, 800a7d0 <rshift+0x68>
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	eba3 0204 	sub.w	r2, r3, r4
 800a7d6:	bf08      	it	eq
 800a7d8:	2300      	moveq	r3, #0
 800a7da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7de:	6102      	str	r2, [r0, #16]
 800a7e0:	bf08      	it	eq
 800a7e2:	6143      	streq	r3, [r0, #20]
 800a7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e8:	f8dc c000 	ldr.w	ip, [ip]
 800a7ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7f0:	ea4c 0707 	orr.w	r7, ip, r7
 800a7f4:	f849 7b04 	str.w	r7, [r9], #4
 800a7f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7fc:	40cf      	lsrs	r7, r1
 800a7fe:	e7d9      	b.n	800a7b4 <rshift+0x4c>
 800a800:	f851 cb04 	ldr.w	ip, [r1], #4
 800a804:	f847 cf04 	str.w	ip, [r7, #4]!
 800a808:	e7c2      	b.n	800a790 <rshift+0x28>
 800a80a:	4623      	mov	r3, r4
 800a80c:	e7e0      	b.n	800a7d0 <rshift+0x68>

0800a80e <__hexdig_fun>:
 800a80e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a812:	2b09      	cmp	r3, #9
 800a814:	d802      	bhi.n	800a81c <__hexdig_fun+0xe>
 800a816:	3820      	subs	r0, #32
 800a818:	b2c0      	uxtb	r0, r0
 800a81a:	4770      	bx	lr
 800a81c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a820:	2b05      	cmp	r3, #5
 800a822:	d801      	bhi.n	800a828 <__hexdig_fun+0x1a>
 800a824:	3847      	subs	r0, #71	; 0x47
 800a826:	e7f7      	b.n	800a818 <__hexdig_fun+0xa>
 800a828:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a82c:	2b05      	cmp	r3, #5
 800a82e:	d801      	bhi.n	800a834 <__hexdig_fun+0x26>
 800a830:	3827      	subs	r0, #39	; 0x27
 800a832:	e7f1      	b.n	800a818 <__hexdig_fun+0xa>
 800a834:	2000      	movs	r0, #0
 800a836:	4770      	bx	lr

0800a838 <__gethex>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	b08b      	sub	sp, #44	; 0x2c
 800a83e:	9305      	str	r3, [sp, #20]
 800a840:	4bb2      	ldr	r3, [pc, #712]	; (800ab0c <__gethex+0x2d4>)
 800a842:	9002      	str	r0, [sp, #8]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	468b      	mov	fp, r1
 800a848:	4618      	mov	r0, r3
 800a84a:	4690      	mov	r8, r2
 800a84c:	9303      	str	r3, [sp, #12]
 800a84e:	f7f5 fc7f 	bl	8000150 <strlen>
 800a852:	4682      	mov	sl, r0
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	f8db 2000 	ldr.w	r2, [fp]
 800a85a:	4403      	add	r3, r0
 800a85c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a860:	9306      	str	r3, [sp, #24]
 800a862:	1c93      	adds	r3, r2, #2
 800a864:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a868:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a86c:	32fe      	adds	r2, #254	; 0xfe
 800a86e:	18d1      	adds	r1, r2, r3
 800a870:	461f      	mov	r7, r3
 800a872:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a876:	9101      	str	r1, [sp, #4]
 800a878:	2830      	cmp	r0, #48	; 0x30
 800a87a:	d0f8      	beq.n	800a86e <__gethex+0x36>
 800a87c:	f7ff ffc7 	bl	800a80e <__hexdig_fun>
 800a880:	4604      	mov	r4, r0
 800a882:	2800      	cmp	r0, #0
 800a884:	d13a      	bne.n	800a8fc <__gethex+0xc4>
 800a886:	4652      	mov	r2, sl
 800a888:	4638      	mov	r0, r7
 800a88a:	9903      	ldr	r1, [sp, #12]
 800a88c:	f001 f9a4 	bl	800bbd8 <strncmp>
 800a890:	4605      	mov	r5, r0
 800a892:	2800      	cmp	r0, #0
 800a894:	d166      	bne.n	800a964 <__gethex+0x12c>
 800a896:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a89a:	eb07 060a 	add.w	r6, r7, sl
 800a89e:	f7ff ffb6 	bl	800a80e <__hexdig_fun>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d060      	beq.n	800a968 <__gethex+0x130>
 800a8a6:	4633      	mov	r3, r6
 800a8a8:	7818      	ldrb	r0, [r3, #0]
 800a8aa:	461f      	mov	r7, r3
 800a8ac:	2830      	cmp	r0, #48	; 0x30
 800a8ae:	f103 0301 	add.w	r3, r3, #1
 800a8b2:	d0f9      	beq.n	800a8a8 <__gethex+0x70>
 800a8b4:	f7ff ffab 	bl	800a80e <__hexdig_fun>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	fab0 f480 	clz	r4, r0
 800a8be:	4635      	mov	r5, r6
 800a8c0:	0964      	lsrs	r4, r4, #5
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	463a      	mov	r2, r7
 800a8c6:	4616      	mov	r6, r2
 800a8c8:	7830      	ldrb	r0, [r6, #0]
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	f7ff ff9f 	bl	800a80e <__hexdig_fun>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1f8      	bne.n	800a8c6 <__gethex+0x8e>
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	9903      	ldr	r1, [sp, #12]
 800a8da:	f001 f97d 	bl	800bbd8 <strncmp>
 800a8de:	b980      	cbnz	r0, 800a902 <__gethex+0xca>
 800a8e0:	b94d      	cbnz	r5, 800a8f6 <__gethex+0xbe>
 800a8e2:	eb06 050a 	add.w	r5, r6, sl
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	7830      	ldrb	r0, [r6, #0]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	f7ff ff8e 	bl	800a80e <__hexdig_fun>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d1f8      	bne.n	800a8e8 <__gethex+0xb0>
 800a8f6:	1bad      	subs	r5, r5, r6
 800a8f8:	00ad      	lsls	r5, r5, #2
 800a8fa:	e004      	b.n	800a906 <__gethex+0xce>
 800a8fc:	2400      	movs	r4, #0
 800a8fe:	4625      	mov	r5, r4
 800a900:	e7e0      	b.n	800a8c4 <__gethex+0x8c>
 800a902:	2d00      	cmp	r5, #0
 800a904:	d1f7      	bne.n	800a8f6 <__gethex+0xbe>
 800a906:	7833      	ldrb	r3, [r6, #0]
 800a908:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a90c:	2b50      	cmp	r3, #80	; 0x50
 800a90e:	d139      	bne.n	800a984 <__gethex+0x14c>
 800a910:	7873      	ldrb	r3, [r6, #1]
 800a912:	2b2b      	cmp	r3, #43	; 0x2b
 800a914:	d02a      	beq.n	800a96c <__gethex+0x134>
 800a916:	2b2d      	cmp	r3, #45	; 0x2d
 800a918:	d02c      	beq.n	800a974 <__gethex+0x13c>
 800a91a:	f04f 0900 	mov.w	r9, #0
 800a91e:	1c71      	adds	r1, r6, #1
 800a920:	7808      	ldrb	r0, [r1, #0]
 800a922:	f7ff ff74 	bl	800a80e <__hexdig_fun>
 800a926:	1e43      	subs	r3, r0, #1
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b18      	cmp	r3, #24
 800a92c:	d82a      	bhi.n	800a984 <__gethex+0x14c>
 800a92e:	f1a0 0210 	sub.w	r2, r0, #16
 800a932:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a936:	f7ff ff6a 	bl	800a80e <__hexdig_fun>
 800a93a:	1e43      	subs	r3, r0, #1
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b18      	cmp	r3, #24
 800a940:	d91b      	bls.n	800a97a <__gethex+0x142>
 800a942:	f1b9 0f00 	cmp.w	r9, #0
 800a946:	d000      	beq.n	800a94a <__gethex+0x112>
 800a948:	4252      	negs	r2, r2
 800a94a:	4415      	add	r5, r2
 800a94c:	f8cb 1000 	str.w	r1, [fp]
 800a950:	b1d4      	cbz	r4, 800a988 <__gethex+0x150>
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	bf14      	ite	ne
 800a958:	2700      	movne	r7, #0
 800a95a:	2706      	moveq	r7, #6
 800a95c:	4638      	mov	r0, r7
 800a95e:	b00b      	add	sp, #44	; 0x2c
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	463e      	mov	r6, r7
 800a966:	4625      	mov	r5, r4
 800a968:	2401      	movs	r4, #1
 800a96a:	e7cc      	b.n	800a906 <__gethex+0xce>
 800a96c:	f04f 0900 	mov.w	r9, #0
 800a970:	1cb1      	adds	r1, r6, #2
 800a972:	e7d5      	b.n	800a920 <__gethex+0xe8>
 800a974:	f04f 0901 	mov.w	r9, #1
 800a978:	e7fa      	b.n	800a970 <__gethex+0x138>
 800a97a:	230a      	movs	r3, #10
 800a97c:	fb03 0202 	mla	r2, r3, r2, r0
 800a980:	3a10      	subs	r2, #16
 800a982:	e7d6      	b.n	800a932 <__gethex+0xfa>
 800a984:	4631      	mov	r1, r6
 800a986:	e7e1      	b.n	800a94c <__gethex+0x114>
 800a988:	4621      	mov	r1, r4
 800a98a:	1bf3      	subs	r3, r6, r7
 800a98c:	3b01      	subs	r3, #1
 800a98e:	2b07      	cmp	r3, #7
 800a990:	dc0a      	bgt.n	800a9a8 <__gethex+0x170>
 800a992:	9802      	ldr	r0, [sp, #8]
 800a994:	f000 fa98 	bl	800aec8 <_Balloc>
 800a998:	4604      	mov	r4, r0
 800a99a:	b940      	cbnz	r0, 800a9ae <__gethex+0x176>
 800a99c:	4602      	mov	r2, r0
 800a99e:	21de      	movs	r1, #222	; 0xde
 800a9a0:	4b5b      	ldr	r3, [pc, #364]	; (800ab10 <__gethex+0x2d8>)
 800a9a2:	485c      	ldr	r0, [pc, #368]	; (800ab14 <__gethex+0x2dc>)
 800a9a4:	f001 f93a 	bl	800bc1c <__assert_func>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	105b      	asrs	r3, r3, #1
 800a9ac:	e7ef      	b.n	800a98e <__gethex+0x156>
 800a9ae:	f04f 0b00 	mov.w	fp, #0
 800a9b2:	f100 0914 	add.w	r9, r0, #20
 800a9b6:	f1ca 0301 	rsb	r3, sl, #1
 800a9ba:	f8cd 9010 	str.w	r9, [sp, #16]
 800a9be:	f8cd b004 	str.w	fp, [sp, #4]
 800a9c2:	9308      	str	r3, [sp, #32]
 800a9c4:	42b7      	cmp	r7, r6
 800a9c6:	d33f      	bcc.n	800aa48 <__gethex+0x210>
 800a9c8:	9f04      	ldr	r7, [sp, #16]
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	f847 3b04 	str.w	r3, [r7], #4
 800a9d0:	eba7 0709 	sub.w	r7, r7, r9
 800a9d4:	10bf      	asrs	r7, r7, #2
 800a9d6:	6127      	str	r7, [r4, #16]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fb67 	bl	800b0ac <__hi0bits>
 800a9de:	017f      	lsls	r7, r7, #5
 800a9e0:	f8d8 6000 	ldr.w	r6, [r8]
 800a9e4:	1a3f      	subs	r7, r7, r0
 800a9e6:	42b7      	cmp	r7, r6
 800a9e8:	dd62      	ble.n	800aab0 <__gethex+0x278>
 800a9ea:	1bbf      	subs	r7, r7, r6
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 ff01 	bl	800b7f6 <__any_on>
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	b1a8      	cbz	r0, 800aa24 <__gethex+0x1ec>
 800a9f8:	f04f 0a01 	mov.w	sl, #1
 800a9fc:	1e7b      	subs	r3, r7, #1
 800a9fe:	1159      	asrs	r1, r3, #5
 800aa00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa04:	f003 021f 	and.w	r2, r3, #31
 800aa08:	fa0a f202 	lsl.w	r2, sl, r2
 800aa0c:	420a      	tst	r2, r1
 800aa0e:	d009      	beq.n	800aa24 <__gethex+0x1ec>
 800aa10:	4553      	cmp	r3, sl
 800aa12:	dd05      	ble.n	800aa20 <__gethex+0x1e8>
 800aa14:	4620      	mov	r0, r4
 800aa16:	1eb9      	subs	r1, r7, #2
 800aa18:	f000 feed 	bl	800b7f6 <__any_on>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d144      	bne.n	800aaaa <__gethex+0x272>
 800aa20:	f04f 0a02 	mov.w	sl, #2
 800aa24:	4639      	mov	r1, r7
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7ff fe9e 	bl	800a768 <rshift>
 800aa2c:	443d      	add	r5, r7
 800aa2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa32:	42ab      	cmp	r3, r5
 800aa34:	da4a      	bge.n	800aacc <__gethex+0x294>
 800aa36:	4621      	mov	r1, r4
 800aa38:	9802      	ldr	r0, [sp, #8]
 800aa3a:	f000 fa85 	bl	800af48 <_Bfree>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa42:	27a3      	movs	r7, #163	; 0xa3
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	e789      	b.n	800a95c <__gethex+0x124>
 800aa48:	1e73      	subs	r3, r6, #1
 800aa4a:	9a06      	ldr	r2, [sp, #24]
 800aa4c:	9307      	str	r3, [sp, #28]
 800aa4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d019      	beq.n	800aa8a <__gethex+0x252>
 800aa56:	f1bb 0f20 	cmp.w	fp, #32
 800aa5a:	d107      	bne.n	800aa6c <__gethex+0x234>
 800aa5c:	9b04      	ldr	r3, [sp, #16]
 800aa5e:	9a01      	ldr	r2, [sp, #4]
 800aa60:	f843 2b04 	str.w	r2, [r3], #4
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	2300      	movs	r3, #0
 800aa68:	469b      	mov	fp, r3
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa70:	f7ff fecd 	bl	800a80e <__hexdig_fun>
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	f000 000f 	and.w	r0, r0, #15
 800aa7a:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa7e:	4303      	orrs	r3, r0
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	f10b 0b04 	add.w	fp, fp, #4
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	e00d      	b.n	800aaa6 <__gethex+0x26e>
 800aa8a:	9a08      	ldr	r2, [sp, #32]
 800aa8c:	1e73      	subs	r3, r6, #1
 800aa8e:	4413      	add	r3, r2
 800aa90:	42bb      	cmp	r3, r7
 800aa92:	d3e0      	bcc.n	800aa56 <__gethex+0x21e>
 800aa94:	4618      	mov	r0, r3
 800aa96:	4652      	mov	r2, sl
 800aa98:	9903      	ldr	r1, [sp, #12]
 800aa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9c:	f001 f89c 	bl	800bbd8 <strncmp>
 800aaa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d1d7      	bne.n	800aa56 <__gethex+0x21e>
 800aaa6:	461e      	mov	r6, r3
 800aaa8:	e78c      	b.n	800a9c4 <__gethex+0x18c>
 800aaaa:	f04f 0a03 	mov.w	sl, #3
 800aaae:	e7b9      	b.n	800aa24 <__gethex+0x1ec>
 800aab0:	da09      	bge.n	800aac6 <__gethex+0x28e>
 800aab2:	1bf7      	subs	r7, r6, r7
 800aab4:	4621      	mov	r1, r4
 800aab6:	463a      	mov	r2, r7
 800aab8:	9802      	ldr	r0, [sp, #8]
 800aaba:	f000 fc5d 	bl	800b378 <__lshift>
 800aabe:	4604      	mov	r4, r0
 800aac0:	1bed      	subs	r5, r5, r7
 800aac2:	f100 0914 	add.w	r9, r0, #20
 800aac6:	f04f 0a00 	mov.w	sl, #0
 800aaca:	e7b0      	b.n	800aa2e <__gethex+0x1f6>
 800aacc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aad0:	42a8      	cmp	r0, r5
 800aad2:	dd72      	ble.n	800abba <__gethex+0x382>
 800aad4:	1b45      	subs	r5, r0, r5
 800aad6:	42ae      	cmp	r6, r5
 800aad8:	dc35      	bgt.n	800ab46 <__gethex+0x30e>
 800aada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d029      	beq.n	800ab36 <__gethex+0x2fe>
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d02b      	beq.n	800ab3e <__gethex+0x306>
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d11c      	bne.n	800ab24 <__gethex+0x2ec>
 800aaea:	42ae      	cmp	r6, r5
 800aaec:	d11a      	bne.n	800ab24 <__gethex+0x2ec>
 800aaee:	2e01      	cmp	r6, #1
 800aaf0:	d112      	bne.n	800ab18 <__gethex+0x2e0>
 800aaf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaf6:	9a05      	ldr	r2, [sp, #20]
 800aaf8:	2762      	movs	r7, #98	; 0x62
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	2301      	movs	r3, #1
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	f8c9 3000 	str.w	r3, [r9]
 800ab04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab06:	601c      	str	r4, [r3, #0]
 800ab08:	e728      	b.n	800a95c <__gethex+0x124>
 800ab0a:	bf00      	nop
 800ab0c:	0800c910 	.word	0x0800c910
 800ab10:	0800c898 	.word	0x0800c898
 800ab14:	0800c8a9 	.word	0x0800c8a9
 800ab18:	4620      	mov	r0, r4
 800ab1a:	1e71      	subs	r1, r6, #1
 800ab1c:	f000 fe6b 	bl	800b7f6 <__any_on>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1e6      	bne.n	800aaf2 <__gethex+0x2ba>
 800ab24:	4621      	mov	r1, r4
 800ab26:	9802      	ldr	r0, [sp, #8]
 800ab28:	f000 fa0e 	bl	800af48 <_Bfree>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab30:	2750      	movs	r7, #80	; 0x50
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	e712      	b.n	800a95c <__gethex+0x124>
 800ab36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f3      	bne.n	800ab24 <__gethex+0x2ec>
 800ab3c:	e7d9      	b.n	800aaf2 <__gethex+0x2ba>
 800ab3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1d6      	bne.n	800aaf2 <__gethex+0x2ba>
 800ab44:	e7ee      	b.n	800ab24 <__gethex+0x2ec>
 800ab46:	1e6f      	subs	r7, r5, #1
 800ab48:	f1ba 0f00 	cmp.w	sl, #0
 800ab4c:	d132      	bne.n	800abb4 <__gethex+0x37c>
 800ab4e:	b127      	cbz	r7, 800ab5a <__gethex+0x322>
 800ab50:	4639      	mov	r1, r7
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fe4f 	bl	800b7f6 <__any_on>
 800ab58:	4682      	mov	sl, r0
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	117b      	asrs	r3, r7, #5
 800ab5e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab62:	f007 071f 	and.w	r7, r7, #31
 800ab66:	fa01 f707 	lsl.w	r7, r1, r7
 800ab6a:	421f      	tst	r7, r3
 800ab6c:	f04f 0702 	mov.w	r7, #2
 800ab70:	4629      	mov	r1, r5
 800ab72:	4620      	mov	r0, r4
 800ab74:	bf18      	it	ne
 800ab76:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab7a:	1b76      	subs	r6, r6, r5
 800ab7c:	f7ff fdf4 	bl	800a768 <rshift>
 800ab80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab84:	f1ba 0f00 	cmp.w	sl, #0
 800ab88:	d048      	beq.n	800ac1c <__gethex+0x3e4>
 800ab8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d015      	beq.n	800abbe <__gethex+0x386>
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d017      	beq.n	800abc6 <__gethex+0x38e>
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d109      	bne.n	800abae <__gethex+0x376>
 800ab9a:	f01a 0f02 	tst.w	sl, #2
 800ab9e:	d006      	beq.n	800abae <__gethex+0x376>
 800aba0:	f8d9 0000 	ldr.w	r0, [r9]
 800aba4:	ea4a 0a00 	orr.w	sl, sl, r0
 800aba8:	f01a 0f01 	tst.w	sl, #1
 800abac:	d10e      	bne.n	800abcc <__gethex+0x394>
 800abae:	f047 0710 	orr.w	r7, r7, #16
 800abb2:	e033      	b.n	800ac1c <__gethex+0x3e4>
 800abb4:	f04f 0a01 	mov.w	sl, #1
 800abb8:	e7cf      	b.n	800ab5a <__gethex+0x322>
 800abba:	2701      	movs	r7, #1
 800abbc:	e7e2      	b.n	800ab84 <__gethex+0x34c>
 800abbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abc0:	f1c3 0301 	rsb	r3, r3, #1
 800abc4:	9315      	str	r3, [sp, #84]	; 0x54
 800abc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0f0      	beq.n	800abae <__gethex+0x376>
 800abcc:	f04f 0c00 	mov.w	ip, #0
 800abd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abd4:	f104 0314 	add.w	r3, r4, #20
 800abd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abea:	d01c      	beq.n	800ac26 <__gethex+0x3ee>
 800abec:	3201      	adds	r2, #1
 800abee:	6002      	str	r2, [r0, #0]
 800abf0:	2f02      	cmp	r7, #2
 800abf2:	f104 0314 	add.w	r3, r4, #20
 800abf6:	d13d      	bne.n	800ac74 <__gethex+0x43c>
 800abf8:	f8d8 2000 	ldr.w	r2, [r8]
 800abfc:	3a01      	subs	r2, #1
 800abfe:	42b2      	cmp	r2, r6
 800ac00:	d10a      	bne.n	800ac18 <__gethex+0x3e0>
 800ac02:	2201      	movs	r2, #1
 800ac04:	1171      	asrs	r1, r6, #5
 800ac06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac0a:	f006 061f 	and.w	r6, r6, #31
 800ac0e:	fa02 f606 	lsl.w	r6, r2, r6
 800ac12:	421e      	tst	r6, r3
 800ac14:	bf18      	it	ne
 800ac16:	4617      	movne	r7, r2
 800ac18:	f047 0720 	orr.w	r7, r7, #32
 800ac1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac1e:	601c      	str	r4, [r3, #0]
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	601d      	str	r5, [r3, #0]
 800ac24:	e69a      	b.n	800a95c <__gethex+0x124>
 800ac26:	4299      	cmp	r1, r3
 800ac28:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac2c:	d8d8      	bhi.n	800abe0 <__gethex+0x3a8>
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	459b      	cmp	fp, r3
 800ac32:	db17      	blt.n	800ac64 <__gethex+0x42c>
 800ac34:	6861      	ldr	r1, [r4, #4]
 800ac36:	9802      	ldr	r0, [sp, #8]
 800ac38:	3101      	adds	r1, #1
 800ac3a:	f000 f945 	bl	800aec8 <_Balloc>
 800ac3e:	4681      	mov	r9, r0
 800ac40:	b918      	cbnz	r0, 800ac4a <__gethex+0x412>
 800ac42:	4602      	mov	r2, r0
 800ac44:	2184      	movs	r1, #132	; 0x84
 800ac46:	4b19      	ldr	r3, [pc, #100]	; (800acac <__gethex+0x474>)
 800ac48:	e6ab      	b.n	800a9a2 <__gethex+0x16a>
 800ac4a:	6922      	ldr	r2, [r4, #16]
 800ac4c:	f104 010c 	add.w	r1, r4, #12
 800ac50:	3202      	adds	r2, #2
 800ac52:	0092      	lsls	r2, r2, #2
 800ac54:	300c      	adds	r0, #12
 800ac56:	f7fc ffa4 	bl	8007ba2 <memcpy>
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	9802      	ldr	r0, [sp, #8]
 800ac5e:	f000 f973 	bl	800af48 <_Bfree>
 800ac62:	464c      	mov	r4, r9
 800ac64:	6923      	ldr	r3, [r4, #16]
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	6122      	str	r2, [r4, #16]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac70:	615a      	str	r2, [r3, #20]
 800ac72:	e7bd      	b.n	800abf0 <__gethex+0x3b8>
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	455a      	cmp	r2, fp
 800ac78:	dd0b      	ble.n	800ac92 <__gethex+0x45a>
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f7ff fd73 	bl	800a768 <rshift>
 800ac82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac86:	3501      	adds	r5, #1
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	f6ff aed4 	blt.w	800aa36 <__gethex+0x1fe>
 800ac8e:	2701      	movs	r7, #1
 800ac90:	e7c2      	b.n	800ac18 <__gethex+0x3e0>
 800ac92:	f016 061f 	ands.w	r6, r6, #31
 800ac96:	d0fa      	beq.n	800ac8e <__gethex+0x456>
 800ac98:	4453      	add	r3, sl
 800ac9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac9e:	f000 fa05 	bl	800b0ac <__hi0bits>
 800aca2:	f1c6 0620 	rsb	r6, r6, #32
 800aca6:	42b0      	cmp	r0, r6
 800aca8:	dbe7      	blt.n	800ac7a <__gethex+0x442>
 800acaa:	e7f0      	b.n	800ac8e <__gethex+0x456>
 800acac:	0800c898 	.word	0x0800c898

0800acb0 <L_shift>:
 800acb0:	f1c2 0208 	rsb	r2, r2, #8
 800acb4:	0092      	lsls	r2, r2, #2
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	f1c2 0620 	rsb	r6, r2, #32
 800acbc:	6843      	ldr	r3, [r0, #4]
 800acbe:	6804      	ldr	r4, [r0, #0]
 800acc0:	fa03 f506 	lsl.w	r5, r3, r6
 800acc4:	432c      	orrs	r4, r5
 800acc6:	40d3      	lsrs	r3, r2
 800acc8:	6004      	str	r4, [r0, #0]
 800acca:	f840 3f04 	str.w	r3, [r0, #4]!
 800acce:	4288      	cmp	r0, r1
 800acd0:	d3f4      	bcc.n	800acbc <L_shift+0xc>
 800acd2:	bd70      	pop	{r4, r5, r6, pc}

0800acd4 <__match>:
 800acd4:	b530      	push	{r4, r5, lr}
 800acd6:	6803      	ldr	r3, [r0, #0]
 800acd8:	3301      	adds	r3, #1
 800acda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acde:	b914      	cbnz	r4, 800ace6 <__match+0x12>
 800ace0:	6003      	str	r3, [r0, #0]
 800ace2:	2001      	movs	r0, #1
 800ace4:	bd30      	pop	{r4, r5, pc}
 800ace6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acee:	2d19      	cmp	r5, #25
 800acf0:	bf98      	it	ls
 800acf2:	3220      	addls	r2, #32
 800acf4:	42a2      	cmp	r2, r4
 800acf6:	d0f0      	beq.n	800acda <__match+0x6>
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7f3      	b.n	800ace4 <__match+0x10>

0800acfc <__hexnan>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	2500      	movs	r5, #0
 800ad02:	680b      	ldr	r3, [r1, #0]
 800ad04:	4682      	mov	sl, r0
 800ad06:	115e      	asrs	r6, r3, #5
 800ad08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad0c:	f013 031f 	ands.w	r3, r3, #31
 800ad10:	bf18      	it	ne
 800ad12:	3604      	addne	r6, #4
 800ad14:	1f37      	subs	r7, r6, #4
 800ad16:	46b9      	mov	r9, r7
 800ad18:	463c      	mov	r4, r7
 800ad1a:	46ab      	mov	fp, r5
 800ad1c:	b087      	sub	sp, #28
 800ad1e:	4690      	mov	r8, r2
 800ad20:	6802      	ldr	r2, [r0, #0]
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad28:	9502      	str	r5, [sp, #8]
 800ad2a:	7851      	ldrb	r1, [r2, #1]
 800ad2c:	1c53      	adds	r3, r2, #1
 800ad2e:	9303      	str	r3, [sp, #12]
 800ad30:	b341      	cbz	r1, 800ad84 <__hexnan+0x88>
 800ad32:	4608      	mov	r0, r1
 800ad34:	9205      	str	r2, [sp, #20]
 800ad36:	9104      	str	r1, [sp, #16]
 800ad38:	f7ff fd69 	bl	800a80e <__hexdig_fun>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d14f      	bne.n	800ade0 <__hexnan+0xe4>
 800ad40:	9904      	ldr	r1, [sp, #16]
 800ad42:	9a05      	ldr	r2, [sp, #20]
 800ad44:	2920      	cmp	r1, #32
 800ad46:	d818      	bhi.n	800ad7a <__hexnan+0x7e>
 800ad48:	9b02      	ldr	r3, [sp, #8]
 800ad4a:	459b      	cmp	fp, r3
 800ad4c:	dd13      	ble.n	800ad76 <__hexnan+0x7a>
 800ad4e:	454c      	cmp	r4, r9
 800ad50:	d206      	bcs.n	800ad60 <__hexnan+0x64>
 800ad52:	2d07      	cmp	r5, #7
 800ad54:	dc04      	bgt.n	800ad60 <__hexnan+0x64>
 800ad56:	462a      	mov	r2, r5
 800ad58:	4649      	mov	r1, r9
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff ffa8 	bl	800acb0 <L_shift>
 800ad60:	4544      	cmp	r4, r8
 800ad62:	d950      	bls.n	800ae06 <__hexnan+0x10a>
 800ad64:	2300      	movs	r3, #0
 800ad66:	f1a4 0904 	sub.w	r9, r4, #4
 800ad6a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad6e:	461d      	mov	r5, r3
 800ad70:	464c      	mov	r4, r9
 800ad72:	f8cd b008 	str.w	fp, [sp, #8]
 800ad76:	9a03      	ldr	r2, [sp, #12]
 800ad78:	e7d7      	b.n	800ad2a <__hexnan+0x2e>
 800ad7a:	2929      	cmp	r1, #41	; 0x29
 800ad7c:	d156      	bne.n	800ae2c <__hexnan+0x130>
 800ad7e:	3202      	adds	r2, #2
 800ad80:	f8ca 2000 	str.w	r2, [sl]
 800ad84:	f1bb 0f00 	cmp.w	fp, #0
 800ad88:	d050      	beq.n	800ae2c <__hexnan+0x130>
 800ad8a:	454c      	cmp	r4, r9
 800ad8c:	d206      	bcs.n	800ad9c <__hexnan+0xa0>
 800ad8e:	2d07      	cmp	r5, #7
 800ad90:	dc04      	bgt.n	800ad9c <__hexnan+0xa0>
 800ad92:	462a      	mov	r2, r5
 800ad94:	4649      	mov	r1, r9
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7ff ff8a 	bl	800acb0 <L_shift>
 800ad9c:	4544      	cmp	r4, r8
 800ad9e:	d934      	bls.n	800ae0a <__hexnan+0x10e>
 800ada0:	4623      	mov	r3, r4
 800ada2:	f1a8 0204 	sub.w	r2, r8, #4
 800ada6:	f853 1b04 	ldr.w	r1, [r3], #4
 800adaa:	429f      	cmp	r7, r3
 800adac:	f842 1f04 	str.w	r1, [r2, #4]!
 800adb0:	d2f9      	bcs.n	800ada6 <__hexnan+0xaa>
 800adb2:	1b3b      	subs	r3, r7, r4
 800adb4:	f023 0303 	bic.w	r3, r3, #3
 800adb8:	3304      	adds	r3, #4
 800adba:	3401      	adds	r4, #1
 800adbc:	3e03      	subs	r6, #3
 800adbe:	42b4      	cmp	r4, r6
 800adc0:	bf88      	it	hi
 800adc2:	2304      	movhi	r3, #4
 800adc4:	2200      	movs	r2, #0
 800adc6:	4443      	add	r3, r8
 800adc8:	f843 2b04 	str.w	r2, [r3], #4
 800adcc:	429f      	cmp	r7, r3
 800adce:	d2fb      	bcs.n	800adc8 <__hexnan+0xcc>
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	b91b      	cbnz	r3, 800addc <__hexnan+0xe0>
 800add4:	4547      	cmp	r7, r8
 800add6:	d127      	bne.n	800ae28 <__hexnan+0x12c>
 800add8:	2301      	movs	r3, #1
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	2005      	movs	r0, #5
 800adde:	e026      	b.n	800ae2e <__hexnan+0x132>
 800ade0:	3501      	adds	r5, #1
 800ade2:	2d08      	cmp	r5, #8
 800ade4:	f10b 0b01 	add.w	fp, fp, #1
 800ade8:	dd06      	ble.n	800adf8 <__hexnan+0xfc>
 800adea:	4544      	cmp	r4, r8
 800adec:	d9c3      	bls.n	800ad76 <__hexnan+0x7a>
 800adee:	2300      	movs	r3, #0
 800adf0:	2501      	movs	r5, #1
 800adf2:	f844 3c04 	str.w	r3, [r4, #-4]
 800adf6:	3c04      	subs	r4, #4
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	f000 000f 	and.w	r0, r0, #15
 800adfe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae02:	6022      	str	r2, [r4, #0]
 800ae04:	e7b7      	b.n	800ad76 <__hexnan+0x7a>
 800ae06:	2508      	movs	r5, #8
 800ae08:	e7b5      	b.n	800ad76 <__hexnan+0x7a>
 800ae0a:	9b01      	ldr	r3, [sp, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0df      	beq.n	800add0 <__hexnan+0xd4>
 800ae10:	f04f 32ff 	mov.w	r2, #4294967295
 800ae14:	f1c3 0320 	rsb	r3, r3, #32
 800ae18:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae20:	401a      	ands	r2, r3
 800ae22:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae26:	e7d3      	b.n	800add0 <__hexnan+0xd4>
 800ae28:	3f04      	subs	r7, #4
 800ae2a:	e7d1      	b.n	800add0 <__hexnan+0xd4>
 800ae2c:	2004      	movs	r0, #4
 800ae2e:	b007      	add	sp, #28
 800ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae34 <_localeconv_r>:
 800ae34:	4800      	ldr	r0, [pc, #0]	; (800ae38 <_localeconv_r+0x4>)
 800ae36:	4770      	bx	lr
 800ae38:	20000168 	.word	0x20000168

0800ae3c <_lseek_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	4611      	mov	r1, r2
 800ae44:	2200      	movs	r2, #0
 800ae46:	4d05      	ldr	r5, [pc, #20]	; (800ae5c <_lseek_r+0x20>)
 800ae48:	602a      	str	r2, [r5, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f7f6 fc78 	bl	8001740 <_lseek>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_lseek_r+0x1e>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_lseek_r+0x1e>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	200031b4 	.word	0x200031b4

0800ae60 <malloc>:
 800ae60:	4b02      	ldr	r3, [pc, #8]	; (800ae6c <malloc+0xc>)
 800ae62:	4601      	mov	r1, r0
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	f7fc bed3 	b.w	8007c10 <_malloc_r>
 800ae6a:	bf00      	nop
 800ae6c:	20000010 	.word	0x20000010

0800ae70 <__ascii_mbtowc>:
 800ae70:	b082      	sub	sp, #8
 800ae72:	b901      	cbnz	r1, 800ae76 <__ascii_mbtowc+0x6>
 800ae74:	a901      	add	r1, sp, #4
 800ae76:	b142      	cbz	r2, 800ae8a <__ascii_mbtowc+0x1a>
 800ae78:	b14b      	cbz	r3, 800ae8e <__ascii_mbtowc+0x1e>
 800ae7a:	7813      	ldrb	r3, [r2, #0]
 800ae7c:	600b      	str	r3, [r1, #0]
 800ae7e:	7812      	ldrb	r2, [r2, #0]
 800ae80:	1e10      	subs	r0, r2, #0
 800ae82:	bf18      	it	ne
 800ae84:	2001      	movne	r0, #1
 800ae86:	b002      	add	sp, #8
 800ae88:	4770      	bx	lr
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	e7fb      	b.n	800ae86 <__ascii_mbtowc+0x16>
 800ae8e:	f06f 0001 	mvn.w	r0, #1
 800ae92:	e7f8      	b.n	800ae86 <__ascii_mbtowc+0x16>

0800ae94 <memchr>:
 800ae94:	4603      	mov	r3, r0
 800ae96:	b510      	push	{r4, lr}
 800ae98:	b2c9      	uxtb	r1, r1
 800ae9a:	4402      	add	r2, r0
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	d101      	bne.n	800aea6 <memchr+0x12>
 800aea2:	2000      	movs	r0, #0
 800aea4:	e003      	b.n	800aeae <memchr+0x1a>
 800aea6:	7804      	ldrb	r4, [r0, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	428c      	cmp	r4, r1
 800aeac:	d1f6      	bne.n	800ae9c <memchr+0x8>
 800aeae:	bd10      	pop	{r4, pc}

0800aeb0 <__malloc_lock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__malloc_lock+0x8>)
 800aeb2:	f7fc be74 	b.w	8007b9e <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	200031a8 	.word	0x200031a8

0800aebc <__malloc_unlock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__malloc_unlock+0x8>)
 800aebe:	f7fc be6f 	b.w	8007ba0 <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	200031a8 	.word	0x200031a8

0800aec8 <_Balloc>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	b976      	cbnz	r6, 800aef0 <_Balloc+0x28>
 800aed2:	2010      	movs	r0, #16
 800aed4:	f7ff ffc4 	bl	800ae60 <malloc>
 800aed8:	4602      	mov	r2, r0
 800aeda:	6260      	str	r0, [r4, #36]	; 0x24
 800aedc:	b920      	cbnz	r0, 800aee8 <_Balloc+0x20>
 800aede:	2166      	movs	r1, #102	; 0x66
 800aee0:	4b17      	ldr	r3, [pc, #92]	; (800af40 <_Balloc+0x78>)
 800aee2:	4818      	ldr	r0, [pc, #96]	; (800af44 <_Balloc+0x7c>)
 800aee4:	f000 fe9a 	bl	800bc1c <__assert_func>
 800aee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeec:	6006      	str	r6, [r0, #0]
 800aeee:	60c6      	str	r6, [r0, #12]
 800aef0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aef2:	68f3      	ldr	r3, [r6, #12]
 800aef4:	b183      	cbz	r3, 800af18 <_Balloc+0x50>
 800aef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aefe:	b9b8      	cbnz	r0, 800af30 <_Balloc+0x68>
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f605 	lsl.w	r6, r1, r5
 800af06:	1d72      	adds	r2, r6, #5
 800af08:	4620      	mov	r0, r4
 800af0a:	0092      	lsls	r2, r2, #2
 800af0c:	f000 fc94 	bl	800b838 <_calloc_r>
 800af10:	b160      	cbz	r0, 800af2c <_Balloc+0x64>
 800af12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af16:	e00e      	b.n	800af36 <_Balloc+0x6e>
 800af18:	2221      	movs	r2, #33	; 0x21
 800af1a:	2104      	movs	r1, #4
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fc8b 	bl	800b838 <_calloc_r>
 800af22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af24:	60f0      	str	r0, [r6, #12]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1e4      	bne.n	800aef6 <_Balloc+0x2e>
 800af2c:	2000      	movs	r0, #0
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	6802      	ldr	r2, [r0, #0]
 800af32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af36:	2300      	movs	r3, #0
 800af38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af3c:	e7f7      	b.n	800af2e <_Balloc+0x66>
 800af3e:	bf00      	nop
 800af40:	0800c826 	.word	0x0800c826
 800af44:	0800c924 	.word	0x0800c924

0800af48 <_Bfree>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af4c:	4605      	mov	r5, r0
 800af4e:	460c      	mov	r4, r1
 800af50:	b976      	cbnz	r6, 800af70 <_Bfree+0x28>
 800af52:	2010      	movs	r0, #16
 800af54:	f7ff ff84 	bl	800ae60 <malloc>
 800af58:	4602      	mov	r2, r0
 800af5a:	6268      	str	r0, [r5, #36]	; 0x24
 800af5c:	b920      	cbnz	r0, 800af68 <_Bfree+0x20>
 800af5e:	218a      	movs	r1, #138	; 0x8a
 800af60:	4b08      	ldr	r3, [pc, #32]	; (800af84 <_Bfree+0x3c>)
 800af62:	4809      	ldr	r0, [pc, #36]	; (800af88 <_Bfree+0x40>)
 800af64:	f000 fe5a 	bl	800bc1c <__assert_func>
 800af68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af6c:	6006      	str	r6, [r0, #0]
 800af6e:	60c6      	str	r6, [r0, #12]
 800af70:	b13c      	cbz	r4, 800af82 <_Bfree+0x3a>
 800af72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af74:	6862      	ldr	r2, [r4, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af7c:	6021      	str	r1, [r4, #0]
 800af7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	0800c826 	.word	0x0800c826
 800af88:	0800c924 	.word	0x0800c924

0800af8c <__multadd>:
 800af8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	4607      	mov	r7, r0
 800af92:	460c      	mov	r4, r1
 800af94:	461e      	mov	r6, r3
 800af96:	2000      	movs	r0, #0
 800af98:	690d      	ldr	r5, [r1, #16]
 800af9a:	f101 0c14 	add.w	ip, r1, #20
 800af9e:	f8dc 3000 	ldr.w	r3, [ip]
 800afa2:	3001      	adds	r0, #1
 800afa4:	b299      	uxth	r1, r3
 800afa6:	fb02 6101 	mla	r1, r2, r1, r6
 800afaa:	0c1e      	lsrs	r6, r3, #16
 800afac:	0c0b      	lsrs	r3, r1, #16
 800afae:	fb02 3306 	mla	r3, r2, r6, r3
 800afb2:	b289      	uxth	r1, r1
 800afb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afb8:	4285      	cmp	r5, r0
 800afba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afbe:	f84c 1b04 	str.w	r1, [ip], #4
 800afc2:	dcec      	bgt.n	800af9e <__multadd+0x12>
 800afc4:	b30e      	cbz	r6, 800b00a <__multadd+0x7e>
 800afc6:	68a3      	ldr	r3, [r4, #8]
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dc19      	bgt.n	800b000 <__multadd+0x74>
 800afcc:	6861      	ldr	r1, [r4, #4]
 800afce:	4638      	mov	r0, r7
 800afd0:	3101      	adds	r1, #1
 800afd2:	f7ff ff79 	bl	800aec8 <_Balloc>
 800afd6:	4680      	mov	r8, r0
 800afd8:	b928      	cbnz	r0, 800afe6 <__multadd+0x5a>
 800afda:	4602      	mov	r2, r0
 800afdc:	21b5      	movs	r1, #181	; 0xb5
 800afde:	4b0c      	ldr	r3, [pc, #48]	; (800b010 <__multadd+0x84>)
 800afe0:	480c      	ldr	r0, [pc, #48]	; (800b014 <__multadd+0x88>)
 800afe2:	f000 fe1b 	bl	800bc1c <__assert_func>
 800afe6:	6922      	ldr	r2, [r4, #16]
 800afe8:	f104 010c 	add.w	r1, r4, #12
 800afec:	3202      	adds	r2, #2
 800afee:	0092      	lsls	r2, r2, #2
 800aff0:	300c      	adds	r0, #12
 800aff2:	f7fc fdd6 	bl	8007ba2 <memcpy>
 800aff6:	4621      	mov	r1, r4
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff ffa5 	bl	800af48 <_Bfree>
 800affe:	4644      	mov	r4, r8
 800b000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b004:	3501      	adds	r5, #1
 800b006:	615e      	str	r6, [r3, #20]
 800b008:	6125      	str	r5, [r4, #16]
 800b00a:	4620      	mov	r0, r4
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	0800c898 	.word	0x0800c898
 800b014:	0800c924 	.word	0x0800c924

0800b018 <__s2b>:
 800b018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b01c:	4615      	mov	r5, r2
 800b01e:	2209      	movs	r2, #9
 800b020:	461f      	mov	r7, r3
 800b022:	3308      	adds	r3, #8
 800b024:	460c      	mov	r4, r1
 800b026:	fb93 f3f2 	sdiv	r3, r3, r2
 800b02a:	4606      	mov	r6, r0
 800b02c:	2201      	movs	r2, #1
 800b02e:	2100      	movs	r1, #0
 800b030:	429a      	cmp	r2, r3
 800b032:	db09      	blt.n	800b048 <__s2b+0x30>
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff ff47 	bl	800aec8 <_Balloc>
 800b03a:	b940      	cbnz	r0, 800b04e <__s2b+0x36>
 800b03c:	4602      	mov	r2, r0
 800b03e:	21ce      	movs	r1, #206	; 0xce
 800b040:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <__s2b+0x8c>)
 800b042:	4819      	ldr	r0, [pc, #100]	; (800b0a8 <__s2b+0x90>)
 800b044:	f000 fdea 	bl	800bc1c <__assert_func>
 800b048:	0052      	lsls	r2, r2, #1
 800b04a:	3101      	adds	r1, #1
 800b04c:	e7f0      	b.n	800b030 <__s2b+0x18>
 800b04e:	9b08      	ldr	r3, [sp, #32]
 800b050:	2d09      	cmp	r5, #9
 800b052:	6143      	str	r3, [r0, #20]
 800b054:	f04f 0301 	mov.w	r3, #1
 800b058:	6103      	str	r3, [r0, #16]
 800b05a:	dd16      	ble.n	800b08a <__s2b+0x72>
 800b05c:	f104 0909 	add.w	r9, r4, #9
 800b060:	46c8      	mov	r8, r9
 800b062:	442c      	add	r4, r5
 800b064:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b068:	4601      	mov	r1, r0
 800b06a:	220a      	movs	r2, #10
 800b06c:	4630      	mov	r0, r6
 800b06e:	3b30      	subs	r3, #48	; 0x30
 800b070:	f7ff ff8c 	bl	800af8c <__multadd>
 800b074:	45a0      	cmp	r8, r4
 800b076:	d1f5      	bne.n	800b064 <__s2b+0x4c>
 800b078:	f1a5 0408 	sub.w	r4, r5, #8
 800b07c:	444c      	add	r4, r9
 800b07e:	1b2d      	subs	r5, r5, r4
 800b080:	1963      	adds	r3, r4, r5
 800b082:	42bb      	cmp	r3, r7
 800b084:	db04      	blt.n	800b090 <__s2b+0x78>
 800b086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08a:	2509      	movs	r5, #9
 800b08c:	340a      	adds	r4, #10
 800b08e:	e7f6      	b.n	800b07e <__s2b+0x66>
 800b090:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b094:	4601      	mov	r1, r0
 800b096:	220a      	movs	r2, #10
 800b098:	4630      	mov	r0, r6
 800b09a:	3b30      	subs	r3, #48	; 0x30
 800b09c:	f7ff ff76 	bl	800af8c <__multadd>
 800b0a0:	e7ee      	b.n	800b080 <__s2b+0x68>
 800b0a2:	bf00      	nop
 800b0a4:	0800c898 	.word	0x0800c898
 800b0a8:	0800c924 	.word	0x0800c924

0800b0ac <__hi0bits>:
 800b0ac:	0c02      	lsrs	r2, r0, #16
 800b0ae:	0412      	lsls	r2, r2, #16
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	b9ca      	cbnz	r2, 800b0e8 <__hi0bits+0x3c>
 800b0b4:	0403      	lsls	r3, r0, #16
 800b0b6:	2010      	movs	r0, #16
 800b0b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b0bc:	bf04      	itt	eq
 800b0be:	021b      	lsleq	r3, r3, #8
 800b0c0:	3008      	addeq	r0, #8
 800b0c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0c6:	bf04      	itt	eq
 800b0c8:	011b      	lsleq	r3, r3, #4
 800b0ca:	3004      	addeq	r0, #4
 800b0cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0d0:	bf04      	itt	eq
 800b0d2:	009b      	lsleq	r3, r3, #2
 800b0d4:	3002      	addeq	r0, #2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	db05      	blt.n	800b0e6 <__hi0bits+0x3a>
 800b0da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b0de:	f100 0001 	add.w	r0, r0, #1
 800b0e2:	bf08      	it	eq
 800b0e4:	2020      	moveq	r0, #32
 800b0e6:	4770      	bx	lr
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	e7e5      	b.n	800b0b8 <__hi0bits+0xc>

0800b0ec <__lo0bits>:
 800b0ec:	6803      	ldr	r3, [r0, #0]
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	f013 0007 	ands.w	r0, r3, #7
 800b0f4:	d00b      	beq.n	800b10e <__lo0bits+0x22>
 800b0f6:	07d9      	lsls	r1, r3, #31
 800b0f8:	d421      	bmi.n	800b13e <__lo0bits+0x52>
 800b0fa:	0798      	lsls	r0, r3, #30
 800b0fc:	bf49      	itett	mi
 800b0fe:	085b      	lsrmi	r3, r3, #1
 800b100:	089b      	lsrpl	r3, r3, #2
 800b102:	2001      	movmi	r0, #1
 800b104:	6013      	strmi	r3, [r2, #0]
 800b106:	bf5c      	itt	pl
 800b108:	2002      	movpl	r0, #2
 800b10a:	6013      	strpl	r3, [r2, #0]
 800b10c:	4770      	bx	lr
 800b10e:	b299      	uxth	r1, r3
 800b110:	b909      	cbnz	r1, 800b116 <__lo0bits+0x2a>
 800b112:	2010      	movs	r0, #16
 800b114:	0c1b      	lsrs	r3, r3, #16
 800b116:	b2d9      	uxtb	r1, r3
 800b118:	b909      	cbnz	r1, 800b11e <__lo0bits+0x32>
 800b11a:	3008      	adds	r0, #8
 800b11c:	0a1b      	lsrs	r3, r3, #8
 800b11e:	0719      	lsls	r1, r3, #28
 800b120:	bf04      	itt	eq
 800b122:	091b      	lsreq	r3, r3, #4
 800b124:	3004      	addeq	r0, #4
 800b126:	0799      	lsls	r1, r3, #30
 800b128:	bf04      	itt	eq
 800b12a:	089b      	lsreq	r3, r3, #2
 800b12c:	3002      	addeq	r0, #2
 800b12e:	07d9      	lsls	r1, r3, #31
 800b130:	d403      	bmi.n	800b13a <__lo0bits+0x4e>
 800b132:	085b      	lsrs	r3, r3, #1
 800b134:	f100 0001 	add.w	r0, r0, #1
 800b138:	d003      	beq.n	800b142 <__lo0bits+0x56>
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	4770      	bx	lr
 800b13e:	2000      	movs	r0, #0
 800b140:	4770      	bx	lr
 800b142:	2020      	movs	r0, #32
 800b144:	4770      	bx	lr
	...

0800b148 <__i2b>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	460c      	mov	r4, r1
 800b14c:	2101      	movs	r1, #1
 800b14e:	f7ff febb 	bl	800aec8 <_Balloc>
 800b152:	4602      	mov	r2, r0
 800b154:	b928      	cbnz	r0, 800b162 <__i2b+0x1a>
 800b156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b15a:	4b04      	ldr	r3, [pc, #16]	; (800b16c <__i2b+0x24>)
 800b15c:	4804      	ldr	r0, [pc, #16]	; (800b170 <__i2b+0x28>)
 800b15e:	f000 fd5d 	bl	800bc1c <__assert_func>
 800b162:	2301      	movs	r3, #1
 800b164:	6144      	str	r4, [r0, #20]
 800b166:	6103      	str	r3, [r0, #16]
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	bf00      	nop
 800b16c:	0800c898 	.word	0x0800c898
 800b170:	0800c924 	.word	0x0800c924

0800b174 <__multiply>:
 800b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	4691      	mov	r9, r2
 800b17a:	690a      	ldr	r2, [r1, #16]
 800b17c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b180:	460c      	mov	r4, r1
 800b182:	429a      	cmp	r2, r3
 800b184:	bfbe      	ittt	lt
 800b186:	460b      	movlt	r3, r1
 800b188:	464c      	movlt	r4, r9
 800b18a:	4699      	movlt	r9, r3
 800b18c:	6927      	ldr	r7, [r4, #16]
 800b18e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b192:	68a3      	ldr	r3, [r4, #8]
 800b194:	6861      	ldr	r1, [r4, #4]
 800b196:	eb07 060a 	add.w	r6, r7, sl
 800b19a:	42b3      	cmp	r3, r6
 800b19c:	b085      	sub	sp, #20
 800b19e:	bfb8      	it	lt
 800b1a0:	3101      	addlt	r1, #1
 800b1a2:	f7ff fe91 	bl	800aec8 <_Balloc>
 800b1a6:	b930      	cbnz	r0, 800b1b6 <__multiply+0x42>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	f240 115d 	movw	r1, #349	; 0x15d
 800b1ae:	4b43      	ldr	r3, [pc, #268]	; (800b2bc <__multiply+0x148>)
 800b1b0:	4843      	ldr	r0, [pc, #268]	; (800b2c0 <__multiply+0x14c>)
 800b1b2:	f000 fd33 	bl	800bc1c <__assert_func>
 800b1b6:	f100 0514 	add.w	r5, r0, #20
 800b1ba:	462b      	mov	r3, r5
 800b1bc:	2200      	movs	r2, #0
 800b1be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1c2:	4543      	cmp	r3, r8
 800b1c4:	d321      	bcc.n	800b20a <__multiply+0x96>
 800b1c6:	f104 0314 	add.w	r3, r4, #20
 800b1ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1ce:	f109 0314 	add.w	r3, r9, #20
 800b1d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1d6:	9202      	str	r2, [sp, #8]
 800b1d8:	1b3a      	subs	r2, r7, r4
 800b1da:	3a15      	subs	r2, #21
 800b1dc:	f022 0203 	bic.w	r2, r2, #3
 800b1e0:	3204      	adds	r2, #4
 800b1e2:	f104 0115 	add.w	r1, r4, #21
 800b1e6:	428f      	cmp	r7, r1
 800b1e8:	bf38      	it	cc
 800b1ea:	2204      	movcc	r2, #4
 800b1ec:	9201      	str	r2, [sp, #4]
 800b1ee:	9a02      	ldr	r2, [sp, #8]
 800b1f0:	9303      	str	r3, [sp, #12]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d80c      	bhi.n	800b210 <__multiply+0x9c>
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	dd03      	ble.n	800b202 <__multiply+0x8e>
 800b1fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d059      	beq.n	800b2b6 <__multiply+0x142>
 800b202:	6106      	str	r6, [r0, #16]
 800b204:	b005      	add	sp, #20
 800b206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20a:	f843 2b04 	str.w	r2, [r3], #4
 800b20e:	e7d8      	b.n	800b1c2 <__multiply+0x4e>
 800b210:	f8b3 a000 	ldrh.w	sl, [r3]
 800b214:	f1ba 0f00 	cmp.w	sl, #0
 800b218:	d023      	beq.n	800b262 <__multiply+0xee>
 800b21a:	46a9      	mov	r9, r5
 800b21c:	f04f 0c00 	mov.w	ip, #0
 800b220:	f104 0e14 	add.w	lr, r4, #20
 800b224:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b228:	f8d9 1000 	ldr.w	r1, [r9]
 800b22c:	fa1f fb82 	uxth.w	fp, r2
 800b230:	b289      	uxth	r1, r1
 800b232:	fb0a 110b 	mla	r1, sl, fp, r1
 800b236:	4461      	add	r1, ip
 800b238:	f8d9 c000 	ldr.w	ip, [r9]
 800b23c:	0c12      	lsrs	r2, r2, #16
 800b23e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b242:	fb0a c202 	mla	r2, sl, r2, ip
 800b246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b24a:	b289      	uxth	r1, r1
 800b24c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b250:	4577      	cmp	r7, lr
 800b252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b256:	f849 1b04 	str.w	r1, [r9], #4
 800b25a:	d8e3      	bhi.n	800b224 <__multiply+0xb0>
 800b25c:	9a01      	ldr	r2, [sp, #4]
 800b25e:	f845 c002 	str.w	ip, [r5, r2]
 800b262:	9a03      	ldr	r2, [sp, #12]
 800b264:	3304      	adds	r3, #4
 800b266:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b26a:	f1b9 0f00 	cmp.w	r9, #0
 800b26e:	d020      	beq.n	800b2b2 <__multiply+0x13e>
 800b270:	46ae      	mov	lr, r5
 800b272:	f04f 0a00 	mov.w	sl, #0
 800b276:	6829      	ldr	r1, [r5, #0]
 800b278:	f104 0c14 	add.w	ip, r4, #20
 800b27c:	f8bc b000 	ldrh.w	fp, [ip]
 800b280:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b284:	b289      	uxth	r1, r1
 800b286:	fb09 220b 	mla	r2, r9, fp, r2
 800b28a:	4492      	add	sl, r2
 800b28c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b290:	f84e 1b04 	str.w	r1, [lr], #4
 800b294:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b298:	f8be 1000 	ldrh.w	r1, [lr]
 800b29c:	0c12      	lsrs	r2, r2, #16
 800b29e:	fb09 1102 	mla	r1, r9, r2, r1
 800b2a2:	4567      	cmp	r7, ip
 800b2a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2ac:	d8e6      	bhi.n	800b27c <__multiply+0x108>
 800b2ae:	9a01      	ldr	r2, [sp, #4]
 800b2b0:	50a9      	str	r1, [r5, r2]
 800b2b2:	3504      	adds	r5, #4
 800b2b4:	e79b      	b.n	800b1ee <__multiply+0x7a>
 800b2b6:	3e01      	subs	r6, #1
 800b2b8:	e79d      	b.n	800b1f6 <__multiply+0x82>
 800b2ba:	bf00      	nop
 800b2bc:	0800c898 	.word	0x0800c898
 800b2c0:	0800c924 	.word	0x0800c924

0800b2c4 <__pow5mult>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	f012 0203 	ands.w	r2, r2, #3
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	d007      	beq.n	800b2e4 <__pow5mult+0x20>
 800b2d4:	4c25      	ldr	r4, [pc, #148]	; (800b36c <__pow5mult+0xa8>)
 800b2d6:	3a01      	subs	r2, #1
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2de:	f7ff fe55 	bl	800af8c <__multadd>
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	10ad      	asrs	r5, r5, #2
 800b2e6:	d03d      	beq.n	800b364 <__pow5mult+0xa0>
 800b2e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ea:	b97c      	cbnz	r4, 800b30c <__pow5mult+0x48>
 800b2ec:	2010      	movs	r0, #16
 800b2ee:	f7ff fdb7 	bl	800ae60 <malloc>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	6270      	str	r0, [r6, #36]	; 0x24
 800b2f6:	b928      	cbnz	r0, 800b304 <__pow5mult+0x40>
 800b2f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2fc:	4b1c      	ldr	r3, [pc, #112]	; (800b370 <__pow5mult+0xac>)
 800b2fe:	481d      	ldr	r0, [pc, #116]	; (800b374 <__pow5mult+0xb0>)
 800b300:	f000 fc8c 	bl	800bc1c <__assert_func>
 800b304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b308:	6004      	str	r4, [r0, #0]
 800b30a:	60c4      	str	r4, [r0, #12]
 800b30c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b314:	b94c      	cbnz	r4, 800b32a <__pow5mult+0x66>
 800b316:	f240 2171 	movw	r1, #625	; 0x271
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ff14 	bl	800b148 <__i2b>
 800b320:	2300      	movs	r3, #0
 800b322:	4604      	mov	r4, r0
 800b324:	f8c8 0008 	str.w	r0, [r8, #8]
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	07eb      	lsls	r3, r5, #31
 800b330:	d50a      	bpl.n	800b348 <__pow5mult+0x84>
 800b332:	4639      	mov	r1, r7
 800b334:	4622      	mov	r2, r4
 800b336:	4630      	mov	r0, r6
 800b338:	f7ff ff1c 	bl	800b174 <__multiply>
 800b33c:	4680      	mov	r8, r0
 800b33e:	4639      	mov	r1, r7
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fe01 	bl	800af48 <_Bfree>
 800b346:	4647      	mov	r7, r8
 800b348:	106d      	asrs	r5, r5, #1
 800b34a:	d00b      	beq.n	800b364 <__pow5mult+0xa0>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	b938      	cbnz	r0, 800b360 <__pow5mult+0x9c>
 800b350:	4622      	mov	r2, r4
 800b352:	4621      	mov	r1, r4
 800b354:	4630      	mov	r0, r6
 800b356:	f7ff ff0d 	bl	800b174 <__multiply>
 800b35a:	6020      	str	r0, [r4, #0]
 800b35c:	f8c0 9000 	str.w	r9, [r0]
 800b360:	4604      	mov	r4, r0
 800b362:	e7e4      	b.n	800b32e <__pow5mult+0x6a>
 800b364:	4638      	mov	r0, r7
 800b366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36a:	bf00      	nop
 800b36c:	0800ca70 	.word	0x0800ca70
 800b370:	0800c826 	.word	0x0800c826
 800b374:	0800c924 	.word	0x0800c924

0800b378 <__lshift>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	460c      	mov	r4, r1
 800b37e:	4607      	mov	r7, r0
 800b380:	4691      	mov	r9, r2
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	6849      	ldr	r1, [r1, #4]
 800b386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b390:	f108 0601 	add.w	r6, r8, #1
 800b394:	42b3      	cmp	r3, r6
 800b396:	db0b      	blt.n	800b3b0 <__lshift+0x38>
 800b398:	4638      	mov	r0, r7
 800b39a:	f7ff fd95 	bl	800aec8 <_Balloc>
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b948      	cbnz	r0, 800b3b6 <__lshift+0x3e>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3a8:	4b29      	ldr	r3, [pc, #164]	; (800b450 <__lshift+0xd8>)
 800b3aa:	482a      	ldr	r0, [pc, #168]	; (800b454 <__lshift+0xdc>)
 800b3ac:	f000 fc36 	bl	800bc1c <__assert_func>
 800b3b0:	3101      	adds	r1, #1
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	e7ee      	b.n	800b394 <__lshift+0x1c>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f100 0114 	add.w	r1, r0, #20
 800b3bc:	f100 0210 	add.w	r2, r0, #16
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	4553      	cmp	r3, sl
 800b3c4:	db37      	blt.n	800b436 <__lshift+0xbe>
 800b3c6:	6920      	ldr	r0, [r4, #16]
 800b3c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3cc:	f104 0314 	add.w	r3, r4, #20
 800b3d0:	f019 091f 	ands.w	r9, r9, #31
 800b3d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3dc:	d02f      	beq.n	800b43e <__lshift+0xc6>
 800b3de:	468a      	mov	sl, r1
 800b3e0:	f04f 0c00 	mov.w	ip, #0
 800b3e4:	f1c9 0e20 	rsb	lr, r9, #32
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	fa02 f209 	lsl.w	r2, r2, r9
 800b3ee:	ea42 020c 	orr.w	r2, r2, ip
 800b3f2:	f84a 2b04 	str.w	r2, [sl], #4
 800b3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b400:	d8f2      	bhi.n	800b3e8 <__lshift+0x70>
 800b402:	1b03      	subs	r3, r0, r4
 800b404:	3b15      	subs	r3, #21
 800b406:	f023 0303 	bic.w	r3, r3, #3
 800b40a:	3304      	adds	r3, #4
 800b40c:	f104 0215 	add.w	r2, r4, #21
 800b410:	4290      	cmp	r0, r2
 800b412:	bf38      	it	cc
 800b414:	2304      	movcc	r3, #4
 800b416:	f841 c003 	str.w	ip, [r1, r3]
 800b41a:	f1bc 0f00 	cmp.w	ip, #0
 800b41e:	d001      	beq.n	800b424 <__lshift+0xac>
 800b420:	f108 0602 	add.w	r6, r8, #2
 800b424:	3e01      	subs	r6, #1
 800b426:	4638      	mov	r0, r7
 800b428:	4621      	mov	r1, r4
 800b42a:	612e      	str	r6, [r5, #16]
 800b42c:	f7ff fd8c 	bl	800af48 <_Bfree>
 800b430:	4628      	mov	r0, r5
 800b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b436:	f842 0f04 	str.w	r0, [r2, #4]!
 800b43a:	3301      	adds	r3, #1
 800b43c:	e7c1      	b.n	800b3c2 <__lshift+0x4a>
 800b43e:	3904      	subs	r1, #4
 800b440:	f853 2b04 	ldr.w	r2, [r3], #4
 800b444:	4298      	cmp	r0, r3
 800b446:	f841 2f04 	str.w	r2, [r1, #4]!
 800b44a:	d8f9      	bhi.n	800b440 <__lshift+0xc8>
 800b44c:	e7ea      	b.n	800b424 <__lshift+0xac>
 800b44e:	bf00      	nop
 800b450:	0800c898 	.word	0x0800c898
 800b454:	0800c924 	.word	0x0800c924

0800b458 <__mcmp>:
 800b458:	4603      	mov	r3, r0
 800b45a:	690a      	ldr	r2, [r1, #16]
 800b45c:	6900      	ldr	r0, [r0, #16]
 800b45e:	b530      	push	{r4, r5, lr}
 800b460:	1a80      	subs	r0, r0, r2
 800b462:	d10d      	bne.n	800b480 <__mcmp+0x28>
 800b464:	3314      	adds	r3, #20
 800b466:	3114      	adds	r1, #20
 800b468:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b46c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b470:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b474:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b478:	4295      	cmp	r5, r2
 800b47a:	d002      	beq.n	800b482 <__mcmp+0x2a>
 800b47c:	d304      	bcc.n	800b488 <__mcmp+0x30>
 800b47e:	2001      	movs	r0, #1
 800b480:	bd30      	pop	{r4, r5, pc}
 800b482:	42a3      	cmp	r3, r4
 800b484:	d3f4      	bcc.n	800b470 <__mcmp+0x18>
 800b486:	e7fb      	b.n	800b480 <__mcmp+0x28>
 800b488:	f04f 30ff 	mov.w	r0, #4294967295
 800b48c:	e7f8      	b.n	800b480 <__mcmp+0x28>
	...

0800b490 <__mdiff>:
 800b490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	460d      	mov	r5, r1
 800b496:	4607      	mov	r7, r0
 800b498:	4611      	mov	r1, r2
 800b49a:	4628      	mov	r0, r5
 800b49c:	4614      	mov	r4, r2
 800b49e:	f7ff ffdb 	bl	800b458 <__mcmp>
 800b4a2:	1e06      	subs	r6, r0, #0
 800b4a4:	d111      	bne.n	800b4ca <__mdiff+0x3a>
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff fd0d 	bl	800aec8 <_Balloc>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	b928      	cbnz	r0, 800b4be <__mdiff+0x2e>
 800b4b2:	f240 2132 	movw	r1, #562	; 0x232
 800b4b6:	4b3a      	ldr	r3, [pc, #232]	; (800b5a0 <__mdiff+0x110>)
 800b4b8:	483a      	ldr	r0, [pc, #232]	; (800b5a4 <__mdiff+0x114>)
 800b4ba:	f000 fbaf 	bl	800bc1c <__assert_func>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ca:	bfa4      	itt	ge
 800b4cc:	4623      	movge	r3, r4
 800b4ce:	462c      	movge	r4, r5
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	6861      	ldr	r1, [r4, #4]
 800b4d4:	bfa6      	itte	ge
 800b4d6:	461d      	movge	r5, r3
 800b4d8:	2600      	movge	r6, #0
 800b4da:	2601      	movlt	r6, #1
 800b4dc:	f7ff fcf4 	bl	800aec8 <_Balloc>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	b918      	cbnz	r0, 800b4ec <__mdiff+0x5c>
 800b4e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4e8:	4b2d      	ldr	r3, [pc, #180]	; (800b5a0 <__mdiff+0x110>)
 800b4ea:	e7e5      	b.n	800b4b8 <__mdiff+0x28>
 800b4ec:	f102 0814 	add.w	r8, r2, #20
 800b4f0:	46c2      	mov	sl, r8
 800b4f2:	f04f 0c00 	mov.w	ip, #0
 800b4f6:	6927      	ldr	r7, [r4, #16]
 800b4f8:	60c6      	str	r6, [r0, #12]
 800b4fa:	692e      	ldr	r6, [r5, #16]
 800b4fc:	f104 0014 	add.w	r0, r4, #20
 800b500:	f105 0914 	add.w	r9, r5, #20
 800b504:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b50c:	3410      	adds	r4, #16
 800b50e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b512:	f859 3b04 	ldr.w	r3, [r9], #4
 800b516:	fa1f f18b 	uxth.w	r1, fp
 800b51a:	448c      	add	ip, r1
 800b51c:	b299      	uxth	r1, r3
 800b51e:	0c1b      	lsrs	r3, r3, #16
 800b520:	ebac 0101 	sub.w	r1, ip, r1
 800b524:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b528:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b52c:	b289      	uxth	r1, r1
 800b52e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b532:	454e      	cmp	r6, r9
 800b534:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b538:	f84a 3b04 	str.w	r3, [sl], #4
 800b53c:	d8e7      	bhi.n	800b50e <__mdiff+0x7e>
 800b53e:	1b73      	subs	r3, r6, r5
 800b540:	3b15      	subs	r3, #21
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	3515      	adds	r5, #21
 800b548:	3304      	adds	r3, #4
 800b54a:	42ae      	cmp	r6, r5
 800b54c:	bf38      	it	cc
 800b54e:	2304      	movcc	r3, #4
 800b550:	4418      	add	r0, r3
 800b552:	4443      	add	r3, r8
 800b554:	461e      	mov	r6, r3
 800b556:	4605      	mov	r5, r0
 800b558:	4575      	cmp	r5, lr
 800b55a:	d30e      	bcc.n	800b57a <__mdiff+0xea>
 800b55c:	f10e 0103 	add.w	r1, lr, #3
 800b560:	1a09      	subs	r1, r1, r0
 800b562:	f021 0103 	bic.w	r1, r1, #3
 800b566:	3803      	subs	r0, #3
 800b568:	4586      	cmp	lr, r0
 800b56a:	bf38      	it	cc
 800b56c:	2100      	movcc	r1, #0
 800b56e:	4419      	add	r1, r3
 800b570:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b574:	b18b      	cbz	r3, 800b59a <__mdiff+0x10a>
 800b576:	6117      	str	r7, [r2, #16]
 800b578:	e7a4      	b.n	800b4c4 <__mdiff+0x34>
 800b57a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b57e:	fa1f f188 	uxth.w	r1, r8
 800b582:	4461      	add	r1, ip
 800b584:	140c      	asrs	r4, r1, #16
 800b586:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b58a:	b289      	uxth	r1, r1
 800b58c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b590:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b594:	f846 1b04 	str.w	r1, [r6], #4
 800b598:	e7de      	b.n	800b558 <__mdiff+0xc8>
 800b59a:	3f01      	subs	r7, #1
 800b59c:	e7e8      	b.n	800b570 <__mdiff+0xe0>
 800b59e:	bf00      	nop
 800b5a0:	0800c898 	.word	0x0800c898
 800b5a4:	0800c924 	.word	0x0800c924

0800b5a8 <__ulp>:
 800b5a8:	4b11      	ldr	r3, [pc, #68]	; (800b5f0 <__ulp+0x48>)
 800b5aa:	400b      	ands	r3, r1
 800b5ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	dd02      	ble.n	800b5ba <__ulp+0x12>
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4770      	bx	lr
 800b5ba:	425b      	negs	r3, r3
 800b5bc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b5c0:	f04f 0000 	mov.w	r0, #0
 800b5c4:	f04f 0100 	mov.w	r1, #0
 800b5c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5cc:	da04      	bge.n	800b5d8 <__ulp+0x30>
 800b5ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5d2:	fa43 f102 	asr.w	r1, r3, r2
 800b5d6:	4770      	bx	lr
 800b5d8:	f1a2 0314 	sub.w	r3, r2, #20
 800b5dc:	2b1e      	cmp	r3, #30
 800b5de:	bfd6      	itet	le
 800b5e0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b5e4:	2301      	movgt	r3, #1
 800b5e6:	fa22 f303 	lsrle.w	r3, r2, r3
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	7ff00000 	.word	0x7ff00000

0800b5f4 <__b2d>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	6907      	ldr	r7, [r0, #16]
 800b5fa:	f100 0914 	add.w	r9, r0, #20
 800b5fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b602:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b606:	f1a7 0804 	sub.w	r8, r7, #4
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff fd4e 	bl	800b0ac <__hi0bits>
 800b610:	f1c0 0320 	rsb	r3, r0, #32
 800b614:	280a      	cmp	r0, #10
 800b616:	600b      	str	r3, [r1, #0]
 800b618:	491f      	ldr	r1, [pc, #124]	; (800b698 <__b2d+0xa4>)
 800b61a:	dc17      	bgt.n	800b64c <__b2d+0x58>
 800b61c:	45c1      	cmp	r9, r8
 800b61e:	bf28      	it	cs
 800b620:	2200      	movcs	r2, #0
 800b622:	f1c0 0c0b 	rsb	ip, r0, #11
 800b626:	fa26 f30c 	lsr.w	r3, r6, ip
 800b62a:	bf38      	it	cc
 800b62c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b630:	ea43 0501 	orr.w	r5, r3, r1
 800b634:	f100 0315 	add.w	r3, r0, #21
 800b638:	fa06 f303 	lsl.w	r3, r6, r3
 800b63c:	fa22 f20c 	lsr.w	r2, r2, ip
 800b640:	ea43 0402 	orr.w	r4, r3, r2
 800b644:	4620      	mov	r0, r4
 800b646:	4629      	mov	r1, r5
 800b648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64c:	45c1      	cmp	r9, r8
 800b64e:	bf2e      	itee	cs
 800b650:	2200      	movcs	r2, #0
 800b652:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b656:	f1a7 0808 	subcc.w	r8, r7, #8
 800b65a:	f1b0 030b 	subs.w	r3, r0, #11
 800b65e:	d016      	beq.n	800b68e <__b2d+0x9a>
 800b660:	f1c3 0720 	rsb	r7, r3, #32
 800b664:	fa22 f107 	lsr.w	r1, r2, r7
 800b668:	45c8      	cmp	r8, r9
 800b66a:	fa06 f603 	lsl.w	r6, r6, r3
 800b66e:	ea46 0601 	orr.w	r6, r6, r1
 800b672:	bf94      	ite	ls
 800b674:	2100      	movls	r1, #0
 800b676:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b67a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b67e:	fa02 f003 	lsl.w	r0, r2, r3
 800b682:	40f9      	lsrs	r1, r7
 800b684:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b688:	ea40 0401 	orr.w	r4, r0, r1
 800b68c:	e7da      	b.n	800b644 <__b2d+0x50>
 800b68e:	4614      	mov	r4, r2
 800b690:	ea46 0501 	orr.w	r5, r6, r1
 800b694:	e7d6      	b.n	800b644 <__b2d+0x50>
 800b696:	bf00      	nop
 800b698:	3ff00000 	.word	0x3ff00000

0800b69c <__d2b>:
 800b69c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b6a6:	4690      	mov	r8, r2
 800b6a8:	461d      	mov	r5, r3
 800b6aa:	f7ff fc0d 	bl	800aec8 <_Balloc>
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	b930      	cbnz	r0, 800b6c0 <__d2b+0x24>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	f240 310a 	movw	r1, #778	; 0x30a
 800b6b8:	4b24      	ldr	r3, [pc, #144]	; (800b74c <__d2b+0xb0>)
 800b6ba:	4825      	ldr	r0, [pc, #148]	; (800b750 <__d2b+0xb4>)
 800b6bc:	f000 faae 	bl	800bc1c <__assert_func>
 800b6c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b6c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b6c8:	bb2d      	cbnz	r5, 800b716 <__d2b+0x7a>
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	f1b8 0300 	subs.w	r3, r8, #0
 800b6d0:	d026      	beq.n	800b720 <__d2b+0x84>
 800b6d2:	4668      	mov	r0, sp
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	f7ff fd09 	bl	800b0ec <__lo0bits>
 800b6da:	9900      	ldr	r1, [sp, #0]
 800b6dc:	b1f0      	cbz	r0, 800b71c <__d2b+0x80>
 800b6de:	9a01      	ldr	r2, [sp, #4]
 800b6e0:	f1c0 0320 	rsb	r3, r0, #32
 800b6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	40c2      	lsrs	r2, r0
 800b6ec:	6163      	str	r3, [r4, #20]
 800b6ee:	9201      	str	r2, [sp, #4]
 800b6f0:	9b01      	ldr	r3, [sp, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bf14      	ite	ne
 800b6f6:	2102      	movne	r1, #2
 800b6f8:	2101      	moveq	r1, #1
 800b6fa:	61a3      	str	r3, [r4, #24]
 800b6fc:	6121      	str	r1, [r4, #16]
 800b6fe:	b1c5      	cbz	r5, 800b732 <__d2b+0x96>
 800b700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b704:	4405      	add	r5, r0
 800b706:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b70a:	603d      	str	r5, [r7, #0]
 800b70c:	6030      	str	r0, [r6, #0]
 800b70e:	4620      	mov	r0, r4
 800b710:	b002      	add	sp, #8
 800b712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b71a:	e7d6      	b.n	800b6ca <__d2b+0x2e>
 800b71c:	6161      	str	r1, [r4, #20]
 800b71e:	e7e7      	b.n	800b6f0 <__d2b+0x54>
 800b720:	a801      	add	r0, sp, #4
 800b722:	f7ff fce3 	bl	800b0ec <__lo0bits>
 800b726:	2101      	movs	r1, #1
 800b728:	9b01      	ldr	r3, [sp, #4]
 800b72a:	6121      	str	r1, [r4, #16]
 800b72c:	6163      	str	r3, [r4, #20]
 800b72e:	3020      	adds	r0, #32
 800b730:	e7e5      	b.n	800b6fe <__d2b+0x62>
 800b732:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b736:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b73a:	6038      	str	r0, [r7, #0]
 800b73c:	6918      	ldr	r0, [r3, #16]
 800b73e:	f7ff fcb5 	bl	800b0ac <__hi0bits>
 800b742:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b746:	6031      	str	r1, [r6, #0]
 800b748:	e7e1      	b.n	800b70e <__d2b+0x72>
 800b74a:	bf00      	nop
 800b74c:	0800c898 	.word	0x0800c898
 800b750:	0800c924 	.word	0x0800c924

0800b754 <__ratio>:
 800b754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	4688      	mov	r8, r1
 800b75a:	4669      	mov	r1, sp
 800b75c:	4681      	mov	r9, r0
 800b75e:	f7ff ff49 	bl	800b5f4 <__b2d>
 800b762:	460f      	mov	r7, r1
 800b764:	4604      	mov	r4, r0
 800b766:	460d      	mov	r5, r1
 800b768:	4640      	mov	r0, r8
 800b76a:	a901      	add	r1, sp, #4
 800b76c:	f7ff ff42 	bl	800b5f4 <__b2d>
 800b770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b774:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b778:	468b      	mov	fp, r1
 800b77a:	eba3 0c02 	sub.w	ip, r3, r2
 800b77e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b782:	1a9b      	subs	r3, r3, r2
 800b784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfd5      	itete	le
 800b78c:	460a      	movle	r2, r1
 800b78e:	462a      	movgt	r2, r5
 800b790:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b794:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b798:	bfd8      	it	le
 800b79a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b79e:	465b      	mov	r3, fp
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f7f4 ffc1 	bl	800072c <__aeabi_ddiv>
 800b7aa:	b003      	add	sp, #12
 800b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7b0 <__copybits>:
 800b7b0:	3901      	subs	r1, #1
 800b7b2:	b570      	push	{r4, r5, r6, lr}
 800b7b4:	1149      	asrs	r1, r1, #5
 800b7b6:	6914      	ldr	r4, [r2, #16]
 800b7b8:	3101      	adds	r1, #1
 800b7ba:	f102 0314 	add.w	r3, r2, #20
 800b7be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7c6:	1f05      	subs	r5, r0, #4
 800b7c8:	42a3      	cmp	r3, r4
 800b7ca:	d30c      	bcc.n	800b7e6 <__copybits+0x36>
 800b7cc:	1aa3      	subs	r3, r4, r2
 800b7ce:	3b11      	subs	r3, #17
 800b7d0:	f023 0303 	bic.w	r3, r3, #3
 800b7d4:	3211      	adds	r2, #17
 800b7d6:	42a2      	cmp	r2, r4
 800b7d8:	bf88      	it	hi
 800b7da:	2300      	movhi	r3, #0
 800b7dc:	4418      	add	r0, r3
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4288      	cmp	r0, r1
 800b7e2:	d305      	bcc.n	800b7f0 <__copybits+0x40>
 800b7e4:	bd70      	pop	{r4, r5, r6, pc}
 800b7e6:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7ea:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7ee:	e7eb      	b.n	800b7c8 <__copybits+0x18>
 800b7f0:	f840 3b04 	str.w	r3, [r0], #4
 800b7f4:	e7f4      	b.n	800b7e0 <__copybits+0x30>

0800b7f6 <__any_on>:
 800b7f6:	f100 0214 	add.w	r2, r0, #20
 800b7fa:	6900      	ldr	r0, [r0, #16]
 800b7fc:	114b      	asrs	r3, r1, #5
 800b7fe:	4298      	cmp	r0, r3
 800b800:	b510      	push	{r4, lr}
 800b802:	db11      	blt.n	800b828 <__any_on+0x32>
 800b804:	dd0a      	ble.n	800b81c <__any_on+0x26>
 800b806:	f011 011f 	ands.w	r1, r1, #31
 800b80a:	d007      	beq.n	800b81c <__any_on+0x26>
 800b80c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b810:	fa24 f001 	lsr.w	r0, r4, r1
 800b814:	fa00 f101 	lsl.w	r1, r0, r1
 800b818:	428c      	cmp	r4, r1
 800b81a:	d10b      	bne.n	800b834 <__any_on+0x3e>
 800b81c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b820:	4293      	cmp	r3, r2
 800b822:	d803      	bhi.n	800b82c <__any_on+0x36>
 800b824:	2000      	movs	r0, #0
 800b826:	bd10      	pop	{r4, pc}
 800b828:	4603      	mov	r3, r0
 800b82a:	e7f7      	b.n	800b81c <__any_on+0x26>
 800b82c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b830:	2900      	cmp	r1, #0
 800b832:	d0f5      	beq.n	800b820 <__any_on+0x2a>
 800b834:	2001      	movs	r0, #1
 800b836:	e7f6      	b.n	800b826 <__any_on+0x30>

0800b838 <_calloc_r>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	fba1 5402 	umull	r5, r4, r1, r2
 800b83e:	b934      	cbnz	r4, 800b84e <_calloc_r+0x16>
 800b840:	4629      	mov	r1, r5
 800b842:	f7fc f9e5 	bl	8007c10 <_malloc_r>
 800b846:	4606      	mov	r6, r0
 800b848:	b928      	cbnz	r0, 800b856 <_calloc_r+0x1e>
 800b84a:	4630      	mov	r0, r6
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	220c      	movs	r2, #12
 800b850:	2600      	movs	r6, #0
 800b852:	6002      	str	r2, [r0, #0]
 800b854:	e7f9      	b.n	800b84a <_calloc_r+0x12>
 800b856:	462a      	mov	r2, r5
 800b858:	4621      	mov	r1, r4
 800b85a:	f7fc f9b0 	bl	8007bbe <memset>
 800b85e:	e7f4      	b.n	800b84a <_calloc_r+0x12>

0800b860 <_free_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4605      	mov	r5, r0
 800b864:	2900      	cmp	r1, #0
 800b866:	d040      	beq.n	800b8ea <_free_r+0x8a>
 800b868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b86c:	1f0c      	subs	r4, r1, #4
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bfb8      	it	lt
 800b872:	18e4      	addlt	r4, r4, r3
 800b874:	f7ff fb1c 	bl	800aeb0 <__malloc_lock>
 800b878:	4a1c      	ldr	r2, [pc, #112]	; (800b8ec <_free_r+0x8c>)
 800b87a:	6813      	ldr	r3, [r2, #0]
 800b87c:	b933      	cbnz	r3, 800b88c <_free_r+0x2c>
 800b87e:	6063      	str	r3, [r4, #4]
 800b880:	6014      	str	r4, [r2, #0]
 800b882:	4628      	mov	r0, r5
 800b884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b888:	f7ff bb18 	b.w	800aebc <__malloc_unlock>
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d908      	bls.n	800b8a2 <_free_r+0x42>
 800b890:	6820      	ldr	r0, [r4, #0]
 800b892:	1821      	adds	r1, r4, r0
 800b894:	428b      	cmp	r3, r1
 800b896:	bf01      	itttt	eq
 800b898:	6819      	ldreq	r1, [r3, #0]
 800b89a:	685b      	ldreq	r3, [r3, #4]
 800b89c:	1809      	addeq	r1, r1, r0
 800b89e:	6021      	streq	r1, [r4, #0]
 800b8a0:	e7ed      	b.n	800b87e <_free_r+0x1e>
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b10b      	cbz	r3, 800b8ac <_free_r+0x4c>
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	d9fa      	bls.n	800b8a2 <_free_r+0x42>
 800b8ac:	6811      	ldr	r1, [r2, #0]
 800b8ae:	1850      	adds	r0, r2, r1
 800b8b0:	42a0      	cmp	r0, r4
 800b8b2:	d10b      	bne.n	800b8cc <_free_r+0x6c>
 800b8b4:	6820      	ldr	r0, [r4, #0]
 800b8b6:	4401      	add	r1, r0
 800b8b8:	1850      	adds	r0, r2, r1
 800b8ba:	4283      	cmp	r3, r0
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	d1e0      	bne.n	800b882 <_free_r+0x22>
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	4401      	add	r1, r0
 800b8c6:	6011      	str	r1, [r2, #0]
 800b8c8:	6053      	str	r3, [r2, #4]
 800b8ca:	e7da      	b.n	800b882 <_free_r+0x22>
 800b8cc:	d902      	bls.n	800b8d4 <_free_r+0x74>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	602b      	str	r3, [r5, #0]
 800b8d2:	e7d6      	b.n	800b882 <_free_r+0x22>
 800b8d4:	6820      	ldr	r0, [r4, #0]
 800b8d6:	1821      	adds	r1, r4, r0
 800b8d8:	428b      	cmp	r3, r1
 800b8da:	bf01      	itttt	eq
 800b8dc:	6819      	ldreq	r1, [r3, #0]
 800b8de:	685b      	ldreq	r3, [r3, #4]
 800b8e0:	1809      	addeq	r1, r1, r0
 800b8e2:	6021      	streq	r1, [r4, #0]
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	6054      	str	r4, [r2, #4]
 800b8e8:	e7cb      	b.n	800b882 <_free_r+0x22>
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	200031ac 	.word	0x200031ac

0800b8f0 <__ssputs_r>:
 800b8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	688e      	ldr	r6, [r1, #8]
 800b8f6:	4682      	mov	sl, r0
 800b8f8:	429e      	cmp	r6, r3
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	4690      	mov	r8, r2
 800b8fe:	461f      	mov	r7, r3
 800b900:	d838      	bhi.n	800b974 <__ssputs_r+0x84>
 800b902:	898a      	ldrh	r2, [r1, #12]
 800b904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b908:	d032      	beq.n	800b970 <__ssputs_r+0x80>
 800b90a:	6825      	ldr	r5, [r4, #0]
 800b90c:	6909      	ldr	r1, [r1, #16]
 800b90e:	3301      	adds	r3, #1
 800b910:	eba5 0901 	sub.w	r9, r5, r1
 800b914:	6965      	ldr	r5, [r4, #20]
 800b916:	444b      	add	r3, r9
 800b918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b91c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b920:	106d      	asrs	r5, r5, #1
 800b922:	429d      	cmp	r5, r3
 800b924:	bf38      	it	cc
 800b926:	461d      	movcc	r5, r3
 800b928:	0553      	lsls	r3, r2, #21
 800b92a:	d531      	bpl.n	800b990 <__ssputs_r+0xa0>
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7fc f96f 	bl	8007c10 <_malloc_r>
 800b932:	4606      	mov	r6, r0
 800b934:	b950      	cbnz	r0, 800b94c <__ssputs_r+0x5c>
 800b936:	230c      	movs	r3, #12
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	f8ca 3000 	str.w	r3, [sl]
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94c:	464a      	mov	r2, r9
 800b94e:	6921      	ldr	r1, [r4, #16]
 800b950:	f7fc f927 	bl	8007ba2 <memcpy>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	6126      	str	r6, [r4, #16]
 800b962:	444e      	add	r6, r9
 800b964:	6026      	str	r6, [r4, #0]
 800b966:	463e      	mov	r6, r7
 800b968:	6165      	str	r5, [r4, #20]
 800b96a:	eba5 0509 	sub.w	r5, r5, r9
 800b96e:	60a5      	str	r5, [r4, #8]
 800b970:	42be      	cmp	r6, r7
 800b972:	d900      	bls.n	800b976 <__ssputs_r+0x86>
 800b974:	463e      	mov	r6, r7
 800b976:	4632      	mov	r2, r6
 800b978:	4641      	mov	r1, r8
 800b97a:	6820      	ldr	r0, [r4, #0]
 800b97c:	f000 f97e 	bl	800bc7c <memmove>
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	2000      	movs	r0, #0
 800b984:	1b9b      	subs	r3, r3, r6
 800b986:	60a3      	str	r3, [r4, #8]
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	4433      	add	r3, r6
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	e7db      	b.n	800b948 <__ssputs_r+0x58>
 800b990:	462a      	mov	r2, r5
 800b992:	f000 f98d 	bl	800bcb0 <_realloc_r>
 800b996:	4606      	mov	r6, r0
 800b998:	2800      	cmp	r0, #0
 800b99a:	d1e1      	bne.n	800b960 <__ssputs_r+0x70>
 800b99c:	4650      	mov	r0, sl
 800b99e:	6921      	ldr	r1, [r4, #16]
 800b9a0:	f7ff ff5e 	bl	800b860 <_free_r>
 800b9a4:	e7c7      	b.n	800b936 <__ssputs_r+0x46>
	...

0800b9a8 <_svfiprintf_r>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	4698      	mov	r8, r3
 800b9ae:	898b      	ldrh	r3, [r1, #12]
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	061b      	lsls	r3, r3, #24
 800b9b4:	460d      	mov	r5, r1
 800b9b6:	4614      	mov	r4, r2
 800b9b8:	b09d      	sub	sp, #116	; 0x74
 800b9ba:	d50e      	bpl.n	800b9da <_svfiprintf_r+0x32>
 800b9bc:	690b      	ldr	r3, [r1, #16]
 800b9be:	b963      	cbnz	r3, 800b9da <_svfiprintf_r+0x32>
 800b9c0:	2140      	movs	r1, #64	; 0x40
 800b9c2:	f7fc f925 	bl	8007c10 <_malloc_r>
 800b9c6:	6028      	str	r0, [r5, #0]
 800b9c8:	6128      	str	r0, [r5, #16]
 800b9ca:	b920      	cbnz	r0, 800b9d6 <_svfiprintf_r+0x2e>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	603b      	str	r3, [r7, #0]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e0d1      	b.n	800bb7a <_svfiprintf_r+0x1d2>
 800b9d6:	2340      	movs	r3, #64	; 0x40
 800b9d8:	616b      	str	r3, [r5, #20]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9de:	2320      	movs	r3, #32
 800b9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e4:	2330      	movs	r3, #48	; 0x30
 800b9e6:	f04f 0901 	mov.w	r9, #1
 800b9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb94 <_svfiprintf_r+0x1ec>
 800b9f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f6:	4623      	mov	r3, r4
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9fe:	b10a      	cbz	r2, 800ba04 <_svfiprintf_r+0x5c>
 800ba00:	2a25      	cmp	r2, #37	; 0x25
 800ba02:	d1f9      	bne.n	800b9f8 <_svfiprintf_r+0x50>
 800ba04:	ebba 0b04 	subs.w	fp, sl, r4
 800ba08:	d00b      	beq.n	800ba22 <_svfiprintf_r+0x7a>
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ff6d 	bl	800b8f0 <__ssputs_r>
 800ba16:	3001      	adds	r0, #1
 800ba18:	f000 80aa 	beq.w	800bb70 <_svfiprintf_r+0x1c8>
 800ba1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba1e:	445a      	add	r2, fp
 800ba20:	9209      	str	r2, [sp, #36]	; 0x24
 800ba22:	f89a 3000 	ldrb.w	r3, [sl]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 80a2 	beq.w	800bb70 <_svfiprintf_r+0x1c8>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba36:	f10a 0a01 	add.w	sl, sl, #1
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	9307      	str	r3, [sp, #28]
 800ba3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba42:	931a      	str	r3, [sp, #104]	; 0x68
 800ba44:	4654      	mov	r4, sl
 800ba46:	2205      	movs	r2, #5
 800ba48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4c:	4851      	ldr	r0, [pc, #324]	; (800bb94 <_svfiprintf_r+0x1ec>)
 800ba4e:	f7ff fa21 	bl	800ae94 <memchr>
 800ba52:	9a04      	ldr	r2, [sp, #16]
 800ba54:	b9d8      	cbnz	r0, 800ba8e <_svfiprintf_r+0xe6>
 800ba56:	06d0      	lsls	r0, r2, #27
 800ba58:	bf44      	itt	mi
 800ba5a:	2320      	movmi	r3, #32
 800ba5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba60:	0711      	lsls	r1, r2, #28
 800ba62:	bf44      	itt	mi
 800ba64:	232b      	movmi	r3, #43	; 0x2b
 800ba66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba70:	d015      	beq.n	800ba9e <_svfiprintf_r+0xf6>
 800ba72:	4654      	mov	r4, sl
 800ba74:	2000      	movs	r0, #0
 800ba76:	f04f 0c0a 	mov.w	ip, #10
 800ba7a:	9a07      	ldr	r2, [sp, #28]
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba82:	3b30      	subs	r3, #48	; 0x30
 800ba84:	2b09      	cmp	r3, #9
 800ba86:	d94e      	bls.n	800bb26 <_svfiprintf_r+0x17e>
 800ba88:	b1b0      	cbz	r0, 800bab8 <_svfiprintf_r+0x110>
 800ba8a:	9207      	str	r2, [sp, #28]
 800ba8c:	e014      	b.n	800bab8 <_svfiprintf_r+0x110>
 800ba8e:	eba0 0308 	sub.w	r3, r0, r8
 800ba92:	fa09 f303 	lsl.w	r3, r9, r3
 800ba96:	4313      	orrs	r3, r2
 800ba98:	46a2      	mov	sl, r4
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	e7d2      	b.n	800ba44 <_svfiprintf_r+0x9c>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	1d19      	adds	r1, r3, #4
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	9103      	str	r1, [sp, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bfbb      	ittet	lt
 800baaa:	425b      	neglt	r3, r3
 800baac:	f042 0202 	orrlt.w	r2, r2, #2
 800bab0:	9307      	strge	r3, [sp, #28]
 800bab2:	9307      	strlt	r3, [sp, #28]
 800bab4:	bfb8      	it	lt
 800bab6:	9204      	strlt	r2, [sp, #16]
 800bab8:	7823      	ldrb	r3, [r4, #0]
 800baba:	2b2e      	cmp	r3, #46	; 0x2e
 800babc:	d10c      	bne.n	800bad8 <_svfiprintf_r+0x130>
 800babe:	7863      	ldrb	r3, [r4, #1]
 800bac0:	2b2a      	cmp	r3, #42	; 0x2a
 800bac2:	d135      	bne.n	800bb30 <_svfiprintf_r+0x188>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	3402      	adds	r4, #2
 800bac8:	1d1a      	adds	r2, r3, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	9203      	str	r2, [sp, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfb8      	it	lt
 800bad2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad6:	9305      	str	r3, [sp, #20]
 800bad8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bb98 <_svfiprintf_r+0x1f0>
 800badc:	2203      	movs	r2, #3
 800bade:	4650      	mov	r0, sl
 800bae0:	7821      	ldrb	r1, [r4, #0]
 800bae2:	f7ff f9d7 	bl	800ae94 <memchr>
 800bae6:	b140      	cbz	r0, 800bafa <_svfiprintf_r+0x152>
 800bae8:	2340      	movs	r3, #64	; 0x40
 800baea:	eba0 000a 	sub.w	r0, r0, sl
 800baee:	fa03 f000 	lsl.w	r0, r3, r0
 800baf2:	9b04      	ldr	r3, [sp, #16]
 800baf4:	3401      	adds	r4, #1
 800baf6:	4303      	orrs	r3, r0
 800baf8:	9304      	str	r3, [sp, #16]
 800bafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafe:	2206      	movs	r2, #6
 800bb00:	4826      	ldr	r0, [pc, #152]	; (800bb9c <_svfiprintf_r+0x1f4>)
 800bb02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb06:	f7ff f9c5 	bl	800ae94 <memchr>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d038      	beq.n	800bb80 <_svfiprintf_r+0x1d8>
 800bb0e:	4b24      	ldr	r3, [pc, #144]	; (800bba0 <_svfiprintf_r+0x1f8>)
 800bb10:	bb1b      	cbnz	r3, 800bb5a <_svfiprintf_r+0x1b2>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	3307      	adds	r3, #7
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	9303      	str	r3, [sp, #12]
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	4433      	add	r3, r6
 800bb22:	9309      	str	r3, [sp, #36]	; 0x24
 800bb24:	e767      	b.n	800b9f6 <_svfiprintf_r+0x4e>
 800bb26:	460c      	mov	r4, r1
 800bb28:	2001      	movs	r0, #1
 800bb2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb2e:	e7a5      	b.n	800ba7c <_svfiprintf_r+0xd4>
 800bb30:	2300      	movs	r3, #0
 800bb32:	f04f 0c0a 	mov.w	ip, #10
 800bb36:	4619      	mov	r1, r3
 800bb38:	3401      	adds	r4, #1
 800bb3a:	9305      	str	r3, [sp, #20]
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb42:	3a30      	subs	r2, #48	; 0x30
 800bb44:	2a09      	cmp	r2, #9
 800bb46:	d903      	bls.n	800bb50 <_svfiprintf_r+0x1a8>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0c5      	beq.n	800bad8 <_svfiprintf_r+0x130>
 800bb4c:	9105      	str	r1, [sp, #20]
 800bb4e:	e7c3      	b.n	800bad8 <_svfiprintf_r+0x130>
 800bb50:	4604      	mov	r4, r0
 800bb52:	2301      	movs	r3, #1
 800bb54:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb58:	e7f0      	b.n	800bb3c <_svfiprintf_r+0x194>
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4638      	mov	r0, r7
 800bb62:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <_svfiprintf_r+0x1fc>)
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	f7fc f965 	bl	8007e34 <_printf_float>
 800bb6a:	1c42      	adds	r2, r0, #1
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	d1d6      	bne.n	800bb1e <_svfiprintf_r+0x176>
 800bb70:	89ab      	ldrh	r3, [r5, #12]
 800bb72:	065b      	lsls	r3, r3, #25
 800bb74:	f53f af2c 	bmi.w	800b9d0 <_svfiprintf_r+0x28>
 800bb78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb7a:	b01d      	add	sp, #116	; 0x74
 800bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb80:	ab03      	add	r3, sp, #12
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	462a      	mov	r2, r5
 800bb86:	4638      	mov	r0, r7
 800bb88:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <_svfiprintf_r+0x1fc>)
 800bb8a:	a904      	add	r1, sp, #16
 800bb8c:	f7fc fbee 	bl	800836c <_printf_i>
 800bb90:	e7eb      	b.n	800bb6a <_svfiprintf_r+0x1c2>
 800bb92:	bf00      	nop
 800bb94:	0800ca7c 	.word	0x0800ca7c
 800bb98:	0800ca82 	.word	0x0800ca82
 800bb9c:	0800ca86 	.word	0x0800ca86
 800bba0:	08007e35 	.word	0x08007e35
 800bba4:	0800b8f1 	.word	0x0800b8f1

0800bba8 <_read_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	4611      	mov	r1, r2
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4d05      	ldr	r5, [pc, #20]	; (800bbc8 <_read_r+0x20>)
 800bbb4:	602a      	str	r2, [r5, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f7f5 fd65 	bl	8001686 <_read>
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	d102      	bne.n	800bbc6 <_read_r+0x1e>
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b103      	cbz	r3, 800bbc6 <_read_r+0x1e>
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	200031b4 	.word	0x200031b4

0800bbcc <nan>:
 800bbcc:	2000      	movs	r0, #0
 800bbce:	4901      	ldr	r1, [pc, #4]	; (800bbd4 <nan+0x8>)
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	7ff80000 	.word	0x7ff80000

0800bbd8 <strncmp>:
 800bbd8:	4603      	mov	r3, r0
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	b172      	cbz	r2, 800bbfc <strncmp+0x24>
 800bbde:	3901      	subs	r1, #1
 800bbe0:	1884      	adds	r4, r0, r2
 800bbe2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bbe6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbea:	4290      	cmp	r0, r2
 800bbec:	d101      	bne.n	800bbf2 <strncmp+0x1a>
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	d101      	bne.n	800bbf6 <strncmp+0x1e>
 800bbf2:	1a80      	subs	r0, r0, r2
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d1f3      	bne.n	800bbe2 <strncmp+0xa>
 800bbfa:	e7fa      	b.n	800bbf2 <strncmp+0x1a>
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	e7f9      	b.n	800bbf4 <strncmp+0x1c>

0800bc00 <__ascii_wctomb>:
 800bc00:	4603      	mov	r3, r0
 800bc02:	4608      	mov	r0, r1
 800bc04:	b141      	cbz	r1, 800bc18 <__ascii_wctomb+0x18>
 800bc06:	2aff      	cmp	r2, #255	; 0xff
 800bc08:	d904      	bls.n	800bc14 <__ascii_wctomb+0x14>
 800bc0a:	228a      	movs	r2, #138	; 0x8a
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	4770      	bx	lr
 800bc14:	2001      	movs	r0, #1
 800bc16:	700a      	strb	r2, [r1, #0]
 800bc18:	4770      	bx	lr
	...

0800bc1c <__assert_func>:
 800bc1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc1e:	4614      	mov	r4, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	4b09      	ldr	r3, [pc, #36]	; (800bc48 <__assert_func+0x2c>)
 800bc24:	4605      	mov	r5, r0
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68d8      	ldr	r0, [r3, #12]
 800bc2a:	b14c      	cbz	r4, 800bc40 <__assert_func+0x24>
 800bc2c:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <__assert_func+0x30>)
 800bc2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc32:	9100      	str	r1, [sp, #0]
 800bc34:	462b      	mov	r3, r5
 800bc36:	4906      	ldr	r1, [pc, #24]	; (800bc50 <__assert_func+0x34>)
 800bc38:	f000 f80e 	bl	800bc58 <fiprintf>
 800bc3c:	f000 fa7e 	bl	800c13c <abort>
 800bc40:	4b04      	ldr	r3, [pc, #16]	; (800bc54 <__assert_func+0x38>)
 800bc42:	461c      	mov	r4, r3
 800bc44:	e7f3      	b.n	800bc2e <__assert_func+0x12>
 800bc46:	bf00      	nop
 800bc48:	20000010 	.word	0x20000010
 800bc4c:	0800ca8d 	.word	0x0800ca8d
 800bc50:	0800ca9a 	.word	0x0800ca9a
 800bc54:	0800cac8 	.word	0x0800cac8

0800bc58 <fiprintf>:
 800bc58:	b40e      	push	{r1, r2, r3}
 800bc5a:	b503      	push	{r0, r1, lr}
 800bc5c:	4601      	mov	r1, r0
 800bc5e:	ab03      	add	r3, sp, #12
 800bc60:	4805      	ldr	r0, [pc, #20]	; (800bc78 <fiprintf+0x20>)
 800bc62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc66:	6800      	ldr	r0, [r0, #0]
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	f000 f877 	bl	800bd5c <_vfiprintf_r>
 800bc6e:	b002      	add	sp, #8
 800bc70:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc74:	b003      	add	sp, #12
 800bc76:	4770      	bx	lr
 800bc78:	20000010 	.word	0x20000010

0800bc7c <memmove>:
 800bc7c:	4288      	cmp	r0, r1
 800bc7e:	b510      	push	{r4, lr}
 800bc80:	eb01 0402 	add.w	r4, r1, r2
 800bc84:	d902      	bls.n	800bc8c <memmove+0x10>
 800bc86:	4284      	cmp	r4, r0
 800bc88:	4623      	mov	r3, r4
 800bc8a:	d807      	bhi.n	800bc9c <memmove+0x20>
 800bc8c:	1e43      	subs	r3, r0, #1
 800bc8e:	42a1      	cmp	r1, r4
 800bc90:	d008      	beq.n	800bca4 <memmove+0x28>
 800bc92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc9a:	e7f8      	b.n	800bc8e <memmove+0x12>
 800bc9c:	4601      	mov	r1, r0
 800bc9e:	4402      	add	r2, r0
 800bca0:	428a      	cmp	r2, r1
 800bca2:	d100      	bne.n	800bca6 <memmove+0x2a>
 800bca4:	bd10      	pop	{r4, pc}
 800bca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcae:	e7f7      	b.n	800bca0 <memmove+0x24>

0800bcb0 <_realloc_r>:
 800bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	460e      	mov	r6, r1
 800bcba:	b921      	cbnz	r1, 800bcc6 <_realloc_r+0x16>
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	f7fb bfa5 	b.w	8007c10 <_malloc_r>
 800bcc6:	b92a      	cbnz	r2, 800bcd4 <_realloc_r+0x24>
 800bcc8:	f7ff fdca 	bl	800b860 <_free_r>
 800bccc:	4625      	mov	r5, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd4:	f000 fa9e 	bl	800c214 <_malloc_usable_size_r>
 800bcd8:	4284      	cmp	r4, r0
 800bcda:	4607      	mov	r7, r0
 800bcdc:	d802      	bhi.n	800bce4 <_realloc_r+0x34>
 800bcde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bce2:	d812      	bhi.n	800bd0a <_realloc_r+0x5a>
 800bce4:	4621      	mov	r1, r4
 800bce6:	4640      	mov	r0, r8
 800bce8:	f7fb ff92 	bl	8007c10 <_malloc_r>
 800bcec:	4605      	mov	r5, r0
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d0ed      	beq.n	800bcce <_realloc_r+0x1e>
 800bcf2:	42bc      	cmp	r4, r7
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	bf28      	it	cs
 800bcfa:	463a      	movcs	r2, r7
 800bcfc:	f7fb ff51 	bl	8007ba2 <memcpy>
 800bd00:	4631      	mov	r1, r6
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fdac 	bl	800b860 <_free_r>
 800bd08:	e7e1      	b.n	800bcce <_realloc_r+0x1e>
 800bd0a:	4635      	mov	r5, r6
 800bd0c:	e7df      	b.n	800bcce <_realloc_r+0x1e>

0800bd0e <__sfputc_r>:
 800bd0e:	6893      	ldr	r3, [r2, #8]
 800bd10:	b410      	push	{r4}
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	6093      	str	r3, [r2, #8]
 800bd18:	da07      	bge.n	800bd2a <__sfputc_r+0x1c>
 800bd1a:	6994      	ldr	r4, [r2, #24]
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	db01      	blt.n	800bd24 <__sfputc_r+0x16>
 800bd20:	290a      	cmp	r1, #10
 800bd22:	d102      	bne.n	800bd2a <__sfputc_r+0x1c>
 800bd24:	bc10      	pop	{r4}
 800bd26:	f000 b949 	b.w	800bfbc <__swbuf_r>
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	1c58      	adds	r0, r3, #1
 800bd2e:	6010      	str	r0, [r2, #0]
 800bd30:	7019      	strb	r1, [r3, #0]
 800bd32:	4608      	mov	r0, r1
 800bd34:	bc10      	pop	{r4}
 800bd36:	4770      	bx	lr

0800bd38 <__sfputs_r>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	4614      	mov	r4, r2
 800bd40:	18d5      	adds	r5, r2, r3
 800bd42:	42ac      	cmp	r4, r5
 800bd44:	d101      	bne.n	800bd4a <__sfputs_r+0x12>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e007      	b.n	800bd5a <__sfputs_r+0x22>
 800bd4a:	463a      	mov	r2, r7
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd52:	f7ff ffdc 	bl	800bd0e <__sfputc_r>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d1f3      	bne.n	800bd42 <__sfputs_r+0xa>
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd5c <_vfiprintf_r>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	460d      	mov	r5, r1
 800bd62:	4614      	mov	r4, r2
 800bd64:	4698      	mov	r8, r3
 800bd66:	4606      	mov	r6, r0
 800bd68:	b09d      	sub	sp, #116	; 0x74
 800bd6a:	b118      	cbz	r0, 800bd74 <_vfiprintf_r+0x18>
 800bd6c:	6983      	ldr	r3, [r0, #24]
 800bd6e:	b90b      	cbnz	r3, 800bd74 <_vfiprintf_r+0x18>
 800bd70:	f7fb fe52 	bl	8007a18 <__sinit>
 800bd74:	4b89      	ldr	r3, [pc, #548]	; (800bf9c <_vfiprintf_r+0x240>)
 800bd76:	429d      	cmp	r5, r3
 800bd78:	d11b      	bne.n	800bdb2 <_vfiprintf_r+0x56>
 800bd7a:	6875      	ldr	r5, [r6, #4]
 800bd7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd7e:	07d9      	lsls	r1, r3, #31
 800bd80:	d405      	bmi.n	800bd8e <_vfiprintf_r+0x32>
 800bd82:	89ab      	ldrh	r3, [r5, #12]
 800bd84:	059a      	lsls	r2, r3, #22
 800bd86:	d402      	bmi.n	800bd8e <_vfiprintf_r+0x32>
 800bd88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd8a:	f7fb ff08 	bl	8007b9e <__retarget_lock_acquire_recursive>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	071b      	lsls	r3, r3, #28
 800bd92:	d501      	bpl.n	800bd98 <_vfiprintf_r+0x3c>
 800bd94:	692b      	ldr	r3, [r5, #16]
 800bd96:	b9eb      	cbnz	r3, 800bdd4 <_vfiprintf_r+0x78>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f000 f960 	bl	800c060 <__swsetup_r>
 800bda0:	b1c0      	cbz	r0, 800bdd4 <_vfiprintf_r+0x78>
 800bda2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda4:	07dc      	lsls	r4, r3, #31
 800bda6:	d50e      	bpl.n	800bdc6 <_vfiprintf_r+0x6a>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	b01d      	add	sp, #116	; 0x74
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	4b7b      	ldr	r3, [pc, #492]	; (800bfa0 <_vfiprintf_r+0x244>)
 800bdb4:	429d      	cmp	r5, r3
 800bdb6:	d101      	bne.n	800bdbc <_vfiprintf_r+0x60>
 800bdb8:	68b5      	ldr	r5, [r6, #8]
 800bdba:	e7df      	b.n	800bd7c <_vfiprintf_r+0x20>
 800bdbc:	4b79      	ldr	r3, [pc, #484]	; (800bfa4 <_vfiprintf_r+0x248>)
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	bf08      	it	eq
 800bdc2:	68f5      	ldreq	r5, [r6, #12]
 800bdc4:	e7da      	b.n	800bd7c <_vfiprintf_r+0x20>
 800bdc6:	89ab      	ldrh	r3, [r5, #12]
 800bdc8:	0598      	lsls	r0, r3, #22
 800bdca:	d4ed      	bmi.n	800bda8 <_vfiprintf_r+0x4c>
 800bdcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdce:	f7fb fee7 	bl	8007ba0 <__retarget_lock_release_recursive>
 800bdd2:	e7e9      	b.n	800bda8 <_vfiprintf_r+0x4c>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd8:	2320      	movs	r3, #32
 800bdda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdde:	2330      	movs	r3, #48	; 0x30
 800bde0:	f04f 0901 	mov.w	r9, #1
 800bde4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bde8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bfa8 <_vfiprintf_r+0x24c>
 800bdec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	469a      	mov	sl, r3
 800bdf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdf8:	b10a      	cbz	r2, 800bdfe <_vfiprintf_r+0xa2>
 800bdfa:	2a25      	cmp	r2, #37	; 0x25
 800bdfc:	d1f9      	bne.n	800bdf2 <_vfiprintf_r+0x96>
 800bdfe:	ebba 0b04 	subs.w	fp, sl, r4
 800be02:	d00b      	beq.n	800be1c <_vfiprintf_r+0xc0>
 800be04:	465b      	mov	r3, fp
 800be06:	4622      	mov	r2, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff ff94 	bl	800bd38 <__sfputs_r>
 800be10:	3001      	adds	r0, #1
 800be12:	f000 80aa 	beq.w	800bf6a <_vfiprintf_r+0x20e>
 800be16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be18:	445a      	add	r2, fp
 800be1a:	9209      	str	r2, [sp, #36]	; 0x24
 800be1c:	f89a 3000 	ldrb.w	r3, [sl]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 80a2 	beq.w	800bf6a <_vfiprintf_r+0x20e>
 800be26:	2300      	movs	r3, #0
 800be28:	f04f 32ff 	mov.w	r2, #4294967295
 800be2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be30:	f10a 0a01 	add.w	sl, sl, #1
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be3c:	931a      	str	r3, [sp, #104]	; 0x68
 800be3e:	4654      	mov	r4, sl
 800be40:	2205      	movs	r2, #5
 800be42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be46:	4858      	ldr	r0, [pc, #352]	; (800bfa8 <_vfiprintf_r+0x24c>)
 800be48:	f7ff f824 	bl	800ae94 <memchr>
 800be4c:	9a04      	ldr	r2, [sp, #16]
 800be4e:	b9d8      	cbnz	r0, 800be88 <_vfiprintf_r+0x12c>
 800be50:	06d1      	lsls	r1, r2, #27
 800be52:	bf44      	itt	mi
 800be54:	2320      	movmi	r3, #32
 800be56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be5a:	0713      	lsls	r3, r2, #28
 800be5c:	bf44      	itt	mi
 800be5e:	232b      	movmi	r3, #43	; 0x2b
 800be60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b2a      	cmp	r3, #42	; 0x2a
 800be6a:	d015      	beq.n	800be98 <_vfiprintf_r+0x13c>
 800be6c:	4654      	mov	r4, sl
 800be6e:	2000      	movs	r0, #0
 800be70:	f04f 0c0a 	mov.w	ip, #10
 800be74:	9a07      	ldr	r2, [sp, #28]
 800be76:	4621      	mov	r1, r4
 800be78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be7c:	3b30      	subs	r3, #48	; 0x30
 800be7e:	2b09      	cmp	r3, #9
 800be80:	d94e      	bls.n	800bf20 <_vfiprintf_r+0x1c4>
 800be82:	b1b0      	cbz	r0, 800beb2 <_vfiprintf_r+0x156>
 800be84:	9207      	str	r2, [sp, #28]
 800be86:	e014      	b.n	800beb2 <_vfiprintf_r+0x156>
 800be88:	eba0 0308 	sub.w	r3, r0, r8
 800be8c:	fa09 f303 	lsl.w	r3, r9, r3
 800be90:	4313      	orrs	r3, r2
 800be92:	46a2      	mov	sl, r4
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	e7d2      	b.n	800be3e <_vfiprintf_r+0xe2>
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	1d19      	adds	r1, r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	9103      	str	r1, [sp, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bfbb      	ittet	lt
 800bea4:	425b      	neglt	r3, r3
 800bea6:	f042 0202 	orrlt.w	r2, r2, #2
 800beaa:	9307      	strge	r3, [sp, #28]
 800beac:	9307      	strlt	r3, [sp, #28]
 800beae:	bfb8      	it	lt
 800beb0:	9204      	strlt	r2, [sp, #16]
 800beb2:	7823      	ldrb	r3, [r4, #0]
 800beb4:	2b2e      	cmp	r3, #46	; 0x2e
 800beb6:	d10c      	bne.n	800bed2 <_vfiprintf_r+0x176>
 800beb8:	7863      	ldrb	r3, [r4, #1]
 800beba:	2b2a      	cmp	r3, #42	; 0x2a
 800bebc:	d135      	bne.n	800bf2a <_vfiprintf_r+0x1ce>
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	3402      	adds	r4, #2
 800bec2:	1d1a      	adds	r2, r3, #4
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	9203      	str	r2, [sp, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	bfb8      	it	lt
 800becc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bed0:	9305      	str	r3, [sp, #20]
 800bed2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bfac <_vfiprintf_r+0x250>
 800bed6:	2203      	movs	r2, #3
 800bed8:	4650      	mov	r0, sl
 800beda:	7821      	ldrb	r1, [r4, #0]
 800bedc:	f7fe ffda 	bl	800ae94 <memchr>
 800bee0:	b140      	cbz	r0, 800bef4 <_vfiprintf_r+0x198>
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	eba0 000a 	sub.w	r0, r0, sl
 800bee8:	fa03 f000 	lsl.w	r0, r3, r0
 800beec:	9b04      	ldr	r3, [sp, #16]
 800beee:	3401      	adds	r4, #1
 800bef0:	4303      	orrs	r3, r0
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef8:	2206      	movs	r2, #6
 800befa:	482d      	ldr	r0, [pc, #180]	; (800bfb0 <_vfiprintf_r+0x254>)
 800befc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf00:	f7fe ffc8 	bl	800ae94 <memchr>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d03f      	beq.n	800bf88 <_vfiprintf_r+0x22c>
 800bf08:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <_vfiprintf_r+0x258>)
 800bf0a:	bb1b      	cbnz	r3, 800bf54 <_vfiprintf_r+0x1f8>
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	3307      	adds	r3, #7
 800bf10:	f023 0307 	bic.w	r3, r3, #7
 800bf14:	3308      	adds	r3, #8
 800bf16:	9303      	str	r3, [sp, #12]
 800bf18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1a:	443b      	add	r3, r7
 800bf1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1e:	e767      	b.n	800bdf0 <_vfiprintf_r+0x94>
 800bf20:	460c      	mov	r4, r1
 800bf22:	2001      	movs	r0, #1
 800bf24:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf28:	e7a5      	b.n	800be76 <_vfiprintf_r+0x11a>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f04f 0c0a 	mov.w	ip, #10
 800bf30:	4619      	mov	r1, r3
 800bf32:	3401      	adds	r4, #1
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	4620      	mov	r0, r4
 800bf38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf3c:	3a30      	subs	r2, #48	; 0x30
 800bf3e:	2a09      	cmp	r2, #9
 800bf40:	d903      	bls.n	800bf4a <_vfiprintf_r+0x1ee>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d0c5      	beq.n	800bed2 <_vfiprintf_r+0x176>
 800bf46:	9105      	str	r1, [sp, #20]
 800bf48:	e7c3      	b.n	800bed2 <_vfiprintf_r+0x176>
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf52:	e7f0      	b.n	800bf36 <_vfiprintf_r+0x1da>
 800bf54:	ab03      	add	r3, sp, #12
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	462a      	mov	r2, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <_vfiprintf_r+0x25c>)
 800bf5e:	a904      	add	r1, sp, #16
 800bf60:	f7fb ff68 	bl	8007e34 <_printf_float>
 800bf64:	4607      	mov	r7, r0
 800bf66:	1c78      	adds	r0, r7, #1
 800bf68:	d1d6      	bne.n	800bf18 <_vfiprintf_r+0x1bc>
 800bf6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf6c:	07d9      	lsls	r1, r3, #31
 800bf6e:	d405      	bmi.n	800bf7c <_vfiprintf_r+0x220>
 800bf70:	89ab      	ldrh	r3, [r5, #12]
 800bf72:	059a      	lsls	r2, r3, #22
 800bf74:	d402      	bmi.n	800bf7c <_vfiprintf_r+0x220>
 800bf76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf78:	f7fb fe12 	bl	8007ba0 <__retarget_lock_release_recursive>
 800bf7c:	89ab      	ldrh	r3, [r5, #12]
 800bf7e:	065b      	lsls	r3, r3, #25
 800bf80:	f53f af12 	bmi.w	800bda8 <_vfiprintf_r+0x4c>
 800bf84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf86:	e711      	b.n	800bdac <_vfiprintf_r+0x50>
 800bf88:	ab03      	add	r3, sp, #12
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	462a      	mov	r2, r5
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <_vfiprintf_r+0x25c>)
 800bf92:	a904      	add	r1, sp, #16
 800bf94:	f7fc f9ea 	bl	800836c <_printf_i>
 800bf98:	e7e4      	b.n	800bf64 <_vfiprintf_r+0x208>
 800bf9a:	bf00      	nop
 800bf9c:	0800c644 	.word	0x0800c644
 800bfa0:	0800c664 	.word	0x0800c664
 800bfa4:	0800c624 	.word	0x0800c624
 800bfa8:	0800ca7c 	.word	0x0800ca7c
 800bfac:	0800ca82 	.word	0x0800ca82
 800bfb0:	0800ca86 	.word	0x0800ca86
 800bfb4:	08007e35 	.word	0x08007e35
 800bfb8:	0800bd39 	.word	0x0800bd39

0800bfbc <__swbuf_r>:
 800bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfbe:	460e      	mov	r6, r1
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	b118      	cbz	r0, 800bfce <__swbuf_r+0x12>
 800bfc6:	6983      	ldr	r3, [r0, #24]
 800bfc8:	b90b      	cbnz	r3, 800bfce <__swbuf_r+0x12>
 800bfca:	f7fb fd25 	bl	8007a18 <__sinit>
 800bfce:	4b21      	ldr	r3, [pc, #132]	; (800c054 <__swbuf_r+0x98>)
 800bfd0:	429c      	cmp	r4, r3
 800bfd2:	d12b      	bne.n	800c02c <__swbuf_r+0x70>
 800bfd4:	686c      	ldr	r4, [r5, #4]
 800bfd6:	69a3      	ldr	r3, [r4, #24]
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	071a      	lsls	r2, r3, #28
 800bfde:	d52f      	bpl.n	800c040 <__swbuf_r+0x84>
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	b36b      	cbz	r3, 800c040 <__swbuf_r+0x84>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	6820      	ldr	r0, [r4, #0]
 800bfe8:	b2f6      	uxtb	r6, r6
 800bfea:	1ac0      	subs	r0, r0, r3
 800bfec:	6963      	ldr	r3, [r4, #20]
 800bfee:	4637      	mov	r7, r6
 800bff0:	4283      	cmp	r3, r0
 800bff2:	dc04      	bgt.n	800bffe <__swbuf_r+0x42>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4628      	mov	r0, r5
 800bff8:	f7fe fb7a 	bl	800a6f0 <_fflush_r>
 800bffc:	bb30      	cbnz	r0, 800c04c <__swbuf_r+0x90>
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	3001      	adds	r0, #1
 800c002:	3b01      	subs	r3, #1
 800c004:	60a3      	str	r3, [r4, #8]
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	6022      	str	r2, [r4, #0]
 800c00c:	701e      	strb	r6, [r3, #0]
 800c00e:	6963      	ldr	r3, [r4, #20]
 800c010:	4283      	cmp	r3, r0
 800c012:	d004      	beq.n	800c01e <__swbuf_r+0x62>
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	07db      	lsls	r3, r3, #31
 800c018:	d506      	bpl.n	800c028 <__swbuf_r+0x6c>
 800c01a:	2e0a      	cmp	r6, #10
 800c01c:	d104      	bne.n	800c028 <__swbuf_r+0x6c>
 800c01e:	4621      	mov	r1, r4
 800c020:	4628      	mov	r0, r5
 800c022:	f7fe fb65 	bl	800a6f0 <_fflush_r>
 800c026:	b988      	cbnz	r0, 800c04c <__swbuf_r+0x90>
 800c028:	4638      	mov	r0, r7
 800c02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c02c:	4b0a      	ldr	r3, [pc, #40]	; (800c058 <__swbuf_r+0x9c>)
 800c02e:	429c      	cmp	r4, r3
 800c030:	d101      	bne.n	800c036 <__swbuf_r+0x7a>
 800c032:	68ac      	ldr	r4, [r5, #8]
 800c034:	e7cf      	b.n	800bfd6 <__swbuf_r+0x1a>
 800c036:	4b09      	ldr	r3, [pc, #36]	; (800c05c <__swbuf_r+0xa0>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	bf08      	it	eq
 800c03c:	68ec      	ldreq	r4, [r5, #12]
 800c03e:	e7ca      	b.n	800bfd6 <__swbuf_r+0x1a>
 800c040:	4621      	mov	r1, r4
 800c042:	4628      	mov	r0, r5
 800c044:	f000 f80c 	bl	800c060 <__swsetup_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d0cb      	beq.n	800bfe4 <__swbuf_r+0x28>
 800c04c:	f04f 37ff 	mov.w	r7, #4294967295
 800c050:	e7ea      	b.n	800c028 <__swbuf_r+0x6c>
 800c052:	bf00      	nop
 800c054:	0800c644 	.word	0x0800c644
 800c058:	0800c664 	.word	0x0800c664
 800c05c:	0800c624 	.word	0x0800c624

0800c060 <__swsetup_r>:
 800c060:	4b32      	ldr	r3, [pc, #200]	; (800c12c <__swsetup_r+0xcc>)
 800c062:	b570      	push	{r4, r5, r6, lr}
 800c064:	681d      	ldr	r5, [r3, #0]
 800c066:	4606      	mov	r6, r0
 800c068:	460c      	mov	r4, r1
 800c06a:	b125      	cbz	r5, 800c076 <__swsetup_r+0x16>
 800c06c:	69ab      	ldr	r3, [r5, #24]
 800c06e:	b913      	cbnz	r3, 800c076 <__swsetup_r+0x16>
 800c070:	4628      	mov	r0, r5
 800c072:	f7fb fcd1 	bl	8007a18 <__sinit>
 800c076:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <__swsetup_r+0xd0>)
 800c078:	429c      	cmp	r4, r3
 800c07a:	d10f      	bne.n	800c09c <__swsetup_r+0x3c>
 800c07c:	686c      	ldr	r4, [r5, #4]
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	d42c      	bmi.n	800c0e2 <__swsetup_r+0x82>
 800c088:	06dd      	lsls	r5, r3, #27
 800c08a:	d411      	bmi.n	800c0b0 <__swsetup_r+0x50>
 800c08c:	2309      	movs	r3, #9
 800c08e:	6033      	str	r3, [r6, #0]
 800c090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	e03e      	b.n	800c11a <__swsetup_r+0xba>
 800c09c:	4b25      	ldr	r3, [pc, #148]	; (800c134 <__swsetup_r+0xd4>)
 800c09e:	429c      	cmp	r4, r3
 800c0a0:	d101      	bne.n	800c0a6 <__swsetup_r+0x46>
 800c0a2:	68ac      	ldr	r4, [r5, #8]
 800c0a4:	e7eb      	b.n	800c07e <__swsetup_r+0x1e>
 800c0a6:	4b24      	ldr	r3, [pc, #144]	; (800c138 <__swsetup_r+0xd8>)
 800c0a8:	429c      	cmp	r4, r3
 800c0aa:	bf08      	it	eq
 800c0ac:	68ec      	ldreq	r4, [r5, #12]
 800c0ae:	e7e6      	b.n	800c07e <__swsetup_r+0x1e>
 800c0b0:	0758      	lsls	r0, r3, #29
 800c0b2:	d512      	bpl.n	800c0da <__swsetup_r+0x7a>
 800c0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0b6:	b141      	cbz	r1, 800c0ca <__swsetup_r+0x6a>
 800c0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d002      	beq.n	800c0c6 <__swsetup_r+0x66>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7ff fbcd 	bl	800b860 <_free_r>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0d0:	81a3      	strh	r3, [r4, #12]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6063      	str	r3, [r4, #4]
 800c0d6:	6923      	ldr	r3, [r4, #16]
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f043 0308 	orr.w	r3, r3, #8
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	b94b      	cbnz	r3, 800c0fa <__swsetup_r+0x9a>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0f0:	d003      	beq.n	800c0fa <__swsetup_r+0x9a>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f000 f84d 	bl	800c194 <__smakebuf_r>
 800c0fa:	89a0      	ldrh	r0, [r4, #12]
 800c0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c100:	f010 0301 	ands.w	r3, r0, #1
 800c104:	d00a      	beq.n	800c11c <__swsetup_r+0xbc>
 800c106:	2300      	movs	r3, #0
 800c108:	60a3      	str	r3, [r4, #8]
 800c10a:	6963      	ldr	r3, [r4, #20]
 800c10c:	425b      	negs	r3, r3
 800c10e:	61a3      	str	r3, [r4, #24]
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	b943      	cbnz	r3, 800c126 <__swsetup_r+0xc6>
 800c114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c118:	d1ba      	bne.n	800c090 <__swsetup_r+0x30>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	0781      	lsls	r1, r0, #30
 800c11e:	bf58      	it	pl
 800c120:	6963      	ldrpl	r3, [r4, #20]
 800c122:	60a3      	str	r3, [r4, #8]
 800c124:	e7f4      	b.n	800c110 <__swsetup_r+0xb0>
 800c126:	2000      	movs	r0, #0
 800c128:	e7f7      	b.n	800c11a <__swsetup_r+0xba>
 800c12a:	bf00      	nop
 800c12c:	20000010 	.word	0x20000010
 800c130:	0800c644 	.word	0x0800c644
 800c134:	0800c664 	.word	0x0800c664
 800c138:	0800c624 	.word	0x0800c624

0800c13c <abort>:
 800c13c:	2006      	movs	r0, #6
 800c13e:	b508      	push	{r3, lr}
 800c140:	f000 f898 	bl	800c274 <raise>
 800c144:	2001      	movs	r0, #1
 800c146:	f7f5 fa94 	bl	8001672 <_exit>

0800c14a <__swhatbuf_r>:
 800c14a:	b570      	push	{r4, r5, r6, lr}
 800c14c:	460e      	mov	r6, r1
 800c14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c152:	4614      	mov	r4, r2
 800c154:	2900      	cmp	r1, #0
 800c156:	461d      	mov	r5, r3
 800c158:	b096      	sub	sp, #88	; 0x58
 800c15a:	da08      	bge.n	800c16e <__swhatbuf_r+0x24>
 800c15c:	2200      	movs	r2, #0
 800c15e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c162:	602a      	str	r2, [r5, #0]
 800c164:	061a      	lsls	r2, r3, #24
 800c166:	d410      	bmi.n	800c18a <__swhatbuf_r+0x40>
 800c168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16c:	e00e      	b.n	800c18c <__swhatbuf_r+0x42>
 800c16e:	466a      	mov	r2, sp
 800c170:	f000 f89c 	bl	800c2ac <_fstat_r>
 800c174:	2800      	cmp	r0, #0
 800c176:	dbf1      	blt.n	800c15c <__swhatbuf_r+0x12>
 800c178:	9a01      	ldr	r2, [sp, #4]
 800c17a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c17e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c182:	425a      	negs	r2, r3
 800c184:	415a      	adcs	r2, r3
 800c186:	602a      	str	r2, [r5, #0]
 800c188:	e7ee      	b.n	800c168 <__swhatbuf_r+0x1e>
 800c18a:	2340      	movs	r3, #64	; 0x40
 800c18c:	2000      	movs	r0, #0
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	b016      	add	sp, #88	; 0x58
 800c192:	bd70      	pop	{r4, r5, r6, pc}

0800c194 <__smakebuf_r>:
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c198:	079d      	lsls	r5, r3, #30
 800c19a:	4606      	mov	r6, r0
 800c19c:	460c      	mov	r4, r1
 800c19e:	d507      	bpl.n	800c1b0 <__smakebuf_r+0x1c>
 800c1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	b002      	add	sp, #8
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	466a      	mov	r2, sp
 800c1b2:	ab01      	add	r3, sp, #4
 800c1b4:	f7ff ffc9 	bl	800c14a <__swhatbuf_r>
 800c1b8:	9900      	ldr	r1, [sp, #0]
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7fb fd27 	bl	8007c10 <_malloc_r>
 800c1c2:	b948      	cbnz	r0, 800c1d8 <__smakebuf_r+0x44>
 800c1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c8:	059a      	lsls	r2, r3, #22
 800c1ca:	d4ef      	bmi.n	800c1ac <__smakebuf_r+0x18>
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	f043 0302 	orr.w	r3, r3, #2
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	e7e3      	b.n	800c1a0 <__smakebuf_r+0xc>
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <__smakebuf_r+0x7c>)
 800c1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	6020      	str	r0, [r4, #0]
 800c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	9b00      	ldr	r3, [sp, #0]
 800c1e8:	6120      	str	r0, [r4, #16]
 800c1ea:	6163      	str	r3, [r4, #20]
 800c1ec:	9b01      	ldr	r3, [sp, #4]
 800c1ee:	b15b      	cbz	r3, 800c208 <__smakebuf_r+0x74>
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f6:	f000 f86b 	bl	800c2d0 <_isatty_r>
 800c1fa:	b128      	cbz	r0, 800c208 <__smakebuf_r+0x74>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f023 0303 	bic.w	r3, r3, #3
 800c202:	f043 0301 	orr.w	r3, r3, #1
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	89a0      	ldrh	r0, [r4, #12]
 800c20a:	4305      	orrs	r5, r0
 800c20c:	81a5      	strh	r5, [r4, #12]
 800c20e:	e7cd      	b.n	800c1ac <__smakebuf_r+0x18>
 800c210:	080079b1 	.word	0x080079b1

0800c214 <_malloc_usable_size_r>:
 800c214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c218:	1f18      	subs	r0, r3, #4
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	bfbc      	itt	lt
 800c21e:	580b      	ldrlt	r3, [r1, r0]
 800c220:	18c0      	addlt	r0, r0, r3
 800c222:	4770      	bx	lr

0800c224 <_raise_r>:
 800c224:	291f      	cmp	r1, #31
 800c226:	b538      	push	{r3, r4, r5, lr}
 800c228:	4604      	mov	r4, r0
 800c22a:	460d      	mov	r5, r1
 800c22c:	d904      	bls.n	800c238 <_raise_r+0x14>
 800c22e:	2316      	movs	r3, #22
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	f04f 30ff 	mov.w	r0, #4294967295
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c23a:	b112      	cbz	r2, 800c242 <_raise_r+0x1e>
 800c23c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c240:	b94b      	cbnz	r3, 800c256 <_raise_r+0x32>
 800c242:	4620      	mov	r0, r4
 800c244:	f000 f830 	bl	800c2a8 <_getpid_r>
 800c248:	462a      	mov	r2, r5
 800c24a:	4601      	mov	r1, r0
 800c24c:	4620      	mov	r0, r4
 800c24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c252:	f000 b817 	b.w	800c284 <_kill_r>
 800c256:	2b01      	cmp	r3, #1
 800c258:	d00a      	beq.n	800c270 <_raise_r+0x4c>
 800c25a:	1c59      	adds	r1, r3, #1
 800c25c:	d103      	bne.n	800c266 <_raise_r+0x42>
 800c25e:	2316      	movs	r3, #22
 800c260:	6003      	str	r3, [r0, #0]
 800c262:	2001      	movs	r0, #1
 800c264:	e7e7      	b.n	800c236 <_raise_r+0x12>
 800c266:	2400      	movs	r4, #0
 800c268:	4628      	mov	r0, r5
 800c26a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c26e:	4798      	blx	r3
 800c270:	2000      	movs	r0, #0
 800c272:	e7e0      	b.n	800c236 <_raise_r+0x12>

0800c274 <raise>:
 800c274:	4b02      	ldr	r3, [pc, #8]	; (800c280 <raise+0xc>)
 800c276:	4601      	mov	r1, r0
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	f7ff bfd3 	b.w	800c224 <_raise_r>
 800c27e:	bf00      	nop
 800c280:	20000010 	.word	0x20000010

0800c284 <_kill_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	2300      	movs	r3, #0
 800c288:	4d06      	ldr	r5, [pc, #24]	; (800c2a4 <_kill_r+0x20>)
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	f7f5 f9de 	bl	8001652 <_kill>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d102      	bne.n	800c2a0 <_kill_r+0x1c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	b103      	cbz	r3, 800c2a0 <_kill_r+0x1c>
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200031b4 	.word	0x200031b4

0800c2a8 <_getpid_r>:
 800c2a8:	f7f5 b9cc 	b.w	8001644 <_getpid>

0800c2ac <_fstat_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	4d06      	ldr	r5, [pc, #24]	; (800c2cc <_fstat_r+0x20>)
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	602b      	str	r3, [r5, #0]
 800c2ba:	f7f5 fa28 	bl	800170e <_fstat>
 800c2be:	1c43      	adds	r3, r0, #1
 800c2c0:	d102      	bne.n	800c2c8 <_fstat_r+0x1c>
 800c2c2:	682b      	ldr	r3, [r5, #0]
 800c2c4:	b103      	cbz	r3, 800c2c8 <_fstat_r+0x1c>
 800c2c6:	6023      	str	r3, [r4, #0]
 800c2c8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200031b4 	.word	0x200031b4

0800c2d0 <_isatty_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	4d05      	ldr	r5, [pc, #20]	; (800c2ec <_isatty_r+0x1c>)
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	f7f5 fa26 	bl	800172c <_isatty>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_isatty_r+0x1a>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_isatty_r+0x1a>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	200031b4 	.word	0x200031b4

0800c2f0 <_init>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr

0800c2fc <_fini>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	bf00      	nop
 800c300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c302:	bc08      	pop	{r3}
 800c304:	469e      	mov	lr, r3
 800c306:	4770      	bx	lr


Test_RTOS_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800c3d8  0800c3d8  0001c3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbbc  0800cbbc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cbbc  0800cbbc  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cbbc  0800cbbc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbc0  0800cbc0  0001cbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ff8  200001e4  0800cda8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031dc  0800cda8  000231dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187e6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bc  00000000  00000000  000389f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a12  00000000  00000000  0003eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016910  00000000  00000000  0004356a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e06  00000000  00000000  00059e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee4  00000000  00000000  000f0cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c3c0 	.word	0x0800c3c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c3c0 	.word	0x0800c3c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_RxCpltCallback+0x48>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d114      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x3e>
	{
		static BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_UART_RxCpltCallback+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		xQueueSendFromISR(myQueueDataHandle,&buffer,NULL);
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_UART_RxCpltCallback+0x50>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	490c      	ldr	r1, [pc, #48]	; (8000c2c <HAL_UART_RxCpltCallback+0x54>)
 8000bfc:	f004 fb2c 	bl	8005258 <xQueueGenericSendFromISR>
		xSemaphoreGiveFromISR(myCountingSem01Handle,&xHigherPriorityTaskWoken);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_UART_RxCpltCallback+0x58>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <HAL_UART_RxCpltCallback+0x4c>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fbbe 	bl	8005388 <xQueueGiveFromISR>
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4907      	ldr	r1, [pc, #28]	; (8000c2c <HAL_UART_RxCpltCallback+0x54>)
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <HAL_UART_RxCpltCallback+0x48>)
 8000c12:	f002 fb0c 	bl	800322e <HAL_UART_Receive_IT>
	}
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000248 	.word	0x20000248
 8000c24:	20000368 	.word	0x20000368
 8000c28:	20000290 	.word	0x20000290
 8000c2c:	200002a4 	.word	0x200002a4
 8000c30:	20000298 	.word	0x20000298

08000c34 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B_Temp_Pin)
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d116      	bne.n	8000c72 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		 static uint32_t last_interrupt_time = 0;
		 uint32_t current_time = HAL_GetTick();
 8000c44:	f000 fe5e 	bl	8001904 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
		 if ((current_time - last_interrupt_time) > 200)
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2bc8      	cmp	r3, #200	; 0xc8
 8000c54:	d909      	bls.n	8000c6a <HAL_GPIO_EXTI_Callback+0x36>
		 {
			 a = 1;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_GPIO_EXTI_Callback+0x78>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
			 Send_Error_Status();
 8000c5c:	f003 fb06 	bl	800426c <Send_Error_Status>
			 HAL_GPIO_WritePin(GPIOB, Led_Temp_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c66:	f001 f98f 	bl	8001f88 <HAL_GPIO_WritePin>
//			 HAL_GPIO_TogglePin(GPIOB, Led_Temp_Pin);
		 }
		 last_interrupt_time = current_time;
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, Led_Water_Pin, GPIO_PIN_SET);
//			HAL_GPIO_TogglePin(GPIOB, Led_Water_Pin);
		}
		last_interrupt_time = current_time;
	}
}
 8000c70:	e015      	b.n	8000c9e <HAL_GPIO_EXTI_Callback+0x6a>
	else if (GPIO_Pin == B_Water_Pin)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d112      	bne.n	8000c9e <HAL_GPIO_EXTI_Callback+0x6a>
		uint32_t current_time = HAL_GetTick();
 8000c78:	f000 fe44 	bl	8001904 <HAL_GetTick>
 8000c7c:	60f8      	str	r0, [r7, #12]
		if ((current_time - last_interrupt_time) > 200)
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2bc8      	cmp	r3, #200	; 0xc8
 8000c88:	d906      	bls.n	8000c98 <HAL_GPIO_EXTI_Callback+0x64>
			Send_Error_Status();
 8000c8a:	f003 faef 	bl	800426c <Send_Error_Status>
			HAL_GPIO_WritePin(GPIOB, Led_Water_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2120      	movs	r1, #32
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c94:	f001 f978 	bl	8001f88 <HAL_GPIO_WritePin>
		last_interrupt_time = current_time;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6013      	str	r3, [r2, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000036c 	.word	0x2000036c
 8000cac:	200002ec 	.word	0x200002ec
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	20000370 	.word	0x20000370

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fdf9 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f879 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 f92b 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 f8ff 	bl	8000ecc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cce:	f000 f8af 	bl	8000e30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 8000cd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <main+0xc4>)
 8000cda:	9309      	str	r3, [sp, #36]	; 0x24
 8000cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce0:	9308      	str	r3, [sp, #32]
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <main+0xc4>)
 8000ce4:	9307      	str	r3, [sp, #28]
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	9306      	str	r3, [sp, #24]
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <main+0xc8>)
 8000cee:	9305      	str	r3, [sp, #20]
 8000cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <main+0xc8>)
 8000cf8:	9303      	str	r3, [sp, #12]
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <main+0xc8>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <main+0xc8>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	2110      	movs	r1, #16
 8000d10:	481c      	ldr	r0, [pc, #112]	; (8000d84 <main+0xcc>)
 8000d12:	f003 f870 	bl	8003df6 <CLCD_4BIT_Init>
    									D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
    									D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	491b      	ldr	r1, [pc, #108]	; (8000d88 <main+0xd0>)
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <main+0xd4>)
 8000d1c:	f002 fa87 	bl	800322e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d20:	481b      	ldr	r0, [pc, #108]	; (8000d90 <main+0xd8>)
 8000d22:	f001 fdfb 	bl	800291c <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <main+0xc4>)
 8000d2e:	f001 f92b 	bl	8001f88 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d32:	f003 fca7 	bl	8004684 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <main+0xdc>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f003 fde0 	bl	8004900 <osSemaphoreNew>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <main+0xe0>)
 8000d44:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(5, 5, &myCountingSem01_attributes);
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <main+0xe4>)
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2005      	movs	r0, #5
 8000d4c:	f003 fdd8 	bl	8004900 <osSemaphoreNew>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <main+0xe8>)
 8000d54:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueData */
  myQueueDataHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQueueData_attributes);
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <main+0xec>)
 8000d58:	2102      	movs	r1, #2
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f003 fe6c 	bl	8004a38 <osMessageQueueNew>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <main+0xf0>)
 8000d64:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <main+0xf4>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4811      	ldr	r0, [pc, #68]	; (8000db0 <main+0xf8>)
 8000d6c:	f003 fcf0 	bl	8004750 <osThreadNew>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <main+0xfc>)
 8000d74:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d76:	f003 fcb7 	bl	80046e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <main+0xc2>
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	40010800 	.word	0x40010800
 8000d84:	20000310 	.word	0x20000310
 8000d88:	200002a4 	.word	0x200002a4
 8000d8c:	20000248 	.word	0x20000248
 8000d90:	20000200 	.word	0x20000200
 8000d94:	0800c4dc 	.word	0x0800c4dc
 8000d98:	20000294 	.word	0x20000294
 8000d9c:	0800c4ec 	.word	0x0800c4ec
 8000da0:	20000298 	.word	0x20000298
 8000da4:	0800c4c4 	.word	0x0800c4c4
 8000da8:	20000290 	.word	0x20000290
 8000dac:	0800c4a0 	.word	0x0800c4a0
 8000db0:	080012e5 	.word	0x080012e5
 8000db4:	2000028c 	.word	0x2000028c

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 ff61 	bl	8007c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de2:	2310      	movs	r3, #16
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f8fa 	bl	8001fe8 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dfa:	f000 fafb 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fb68 	bl	80024ec <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e22:	f000 fae7 	bl	80013f4 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3740      	adds	r7, #64	; 0x40
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e76:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e78:	f001 fd00 	bl	800287c <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e82:	f000 fab7 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000e94:	f001 fe9c 	bl	8002bd0 <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e9e:	f000 faa9 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_TIM2_Init+0x98>)
 8000eb0:	f002 f86e 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eba:	f000 fa9b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000200 	.word	0x20000200

08000ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f06:	f002 f8b3 	bl	8003070 <HAL_UART_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000f10:	f000 fa70 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000248 	.word	0x20000248
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <MX_GPIO_Init+0xd8>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|D7_Pin|D6_Pin|Led_Water_Pin
 8000f64:	2200      	movs	r2, #0
 8000f66:	f24e 0160 	movw	r1, #57440	; 0xe060
 8000f6a:	4824      	ldr	r0, [pc, #144]	; (8000ffc <MX_GPIO_Init+0xdc>)
 8000f6c:	f001 f80c 	bl	8001f88 <HAL_GPIO_WritePin>
                          |Led_Temp_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D5_Pin|D4_Pin|EN_Pin|RW_Pin
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000f76:	4822      	ldr	r0, [pc, #136]	; (8001000 <MX_GPIO_Init+0xe0>)
 8000f78:	f001 f806 	bl	8001f88 <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Temp_Pin B_Water_Pin */
  GPIO_InitStruct.Pin = B_Temp_Pin|B_Water_Pin;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_GPIO_Init+0xe4>)
 8000f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	481c      	ldr	r0, [pc, #112]	; (8001000 <MX_GPIO_Init+0xe0>)
 8000f90:	f000 fe76 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 D7_Pin D6_Pin Led_Water_Pin
                           Led_Temp_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|D7_Pin|D6_Pin|Led_Water_Pin
 8000f94:	f24e 0360 	movw	r3, #57440	; 0xe060
 8000f98:	60bb      	str	r3, [r7, #8]
                          |Led_Temp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_GPIO_Init+0xdc>)
 8000fae:	f000 fe67 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin EN_Pin RW_Pin
                           RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin|EN_Pin|RW_Pin
 8000fb2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fb6:	60bb      	str	r3, [r7, #8]
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_GPIO_Init+0xe0>)
 8000fcc:	f000 fe58 	bl	8001c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2107      	movs	r1, #7
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f000 fd78 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f000 fd91 	bl	8001b02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	2007      	movs	r0, #7
 8000fe6:	f000 fd70 	bl	8001aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fea:	2007      	movs	r0, #7
 8000fec:	f000 fd89 	bl	8001b02 <HAL_NVIC_EnableIRQ>

}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40010800 	.word	0x40010800
 8001004:	10210000 	.word	0x10210000

08001008 <Process_Modbus>:

/* USER CODE BEGIN 4 */
void Process_Modbus(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	switch(i)
 800100c:	4ba0      	ldr	r3, [pc, #640]	; (8001290 <Process_Modbus+0x288>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b06      	cmp	r3, #6
 8001012:	f200 813a 	bhi.w	800128a <Process_Modbus+0x282>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <Process_Modbus+0x14>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001039 	.word	0x08001039
 8001020:	0800109b 	.word	0x0800109b
 8001024:	08001163 	.word	0x08001163
 8001028:	080011bf 	.word	0x080011bf
 800102c:	080011dd 	.word	0x080011dd
 8001030:	080011fb 	.word	0x080011fb
 8001034:	08001219 	.word	0x08001219
	{
	case 0:
		Error_Stat = Receive_Error_Status(Data_16[0]);
 8001038:	4b96      	ldr	r3, [pc, #600]	; (8001294 <Process_Modbus+0x28c>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f003 f941 	bl	80042c4 <Receive_Error_Status>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b94      	ldr	r3, [pc, #592]	; (8001298 <Process_Modbus+0x290>)
 8001048:	801a      	strh	r2, [r3, #0]
		if (Error_Stat == Have_Errors)
 800104a:	4b93      	ldr	r3, [pc, #588]	; (8001298 <Process_Modbus+0x290>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001052:	d117      	bne.n	8001084 <Process_Modbus+0x7c>
		{
			memset(rx_data, 0, sizeof(rx_data));
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4890      	ldr	r0, [pc, #576]	; (800129c <Process_Modbus+0x294>)
 800105a:	f006 fe18 	bl	8007c8e <memset>
			CLCD_SetCursor(&LCD1, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	488f      	ldr	r0, [pc, #572]	; (80012a0 <Process_Modbus+0x298>)
 8001064:	f002 ff5a 	bl	8003f1c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Have Errors");
 8001068:	498e      	ldr	r1, [pc, #568]	; (80012a4 <Process_Modbus+0x29c>)
 800106a:	488d      	ldr	r0, [pc, #564]	; (80012a0 <Process_Modbus+0x298>)
 800106c:	f002 ffbd 	bl	8003fea <CLCD_WriteString>
			osDelay(2000);
 8001070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001074:	f003 fc16 	bl	80048a4 <osDelay>
			Send_Error_Code();
 8001078:	f003 f936 	bl	80042e8 <Send_Error_Code>
			i = 1;
 800107c:	4b84      	ldr	r3, [pc, #528]	; (8001290 <Process_Modbus+0x288>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
//			osDelay(1000);
			memset(rx_data, 0, sizeof(rx_data));
			Read_Temp();
			i = 2;
		}
		break;
 8001082:	e102      	b.n	800128a <Process_Modbus+0x282>
			memset(rx_data, 0, sizeof(rx_data));
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4884      	ldr	r0, [pc, #528]	; (800129c <Process_Modbus+0x294>)
 800108a:	f006 fe00 	bl	8007c8e <memset>
			Read_Temp();
 800108e:	f003 faa1 	bl	80045d4 <Read_Temp>
			i = 2;
 8001092:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <Process_Modbus+0x288>)
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
		break;
 8001098:	e0f7      	b.n	800128a <Process_Modbus+0x282>

	// Check Error code
	case 1:
		Error_Cod = Receive_Error_Code(Data_16[0]);
 800109a:	4b7e      	ldr	r3, [pc, #504]	; (8001294 <Process_Modbus+0x28c>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 f94e 	bl	8004340 <Receive_Error_Code>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <Process_Modbus+0x2a0>)
 80010aa:	801a      	strh	r2, [r3, #0]
		// Display error
		if (Error_Cod == Temp_Measur_Err)
 80010ac:	4b7e      	ldr	r3, [pc, #504]	; (80012a8 <Process_Modbus+0x2a0>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d117      	bne.n	80010e8 <Process_Modbus+0xe0>
		{
			CLCD_SetCursor(&LCD1, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4878      	ldr	r0, [pc, #480]	; (80012a0 <Process_Modbus+0x298>)
 80010be:	f002 ff2d 	bl	8003f1c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Temp Measure Err");
 80010c2:	497a      	ldr	r1, [pc, #488]	; (80012ac <Process_Modbus+0x2a4>)
 80010c4:	4876      	ldr	r0, [pc, #472]	; (80012a0 <Process_Modbus+0x298>)
 80010c6:	f002 ff90 	bl	8003fea <CLCD_WriteString>
			osDelay(2000);
 80010ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ce:	f003 fbe9 	bl	80048a4 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 80010d2:	2220      	movs	r2, #32
 80010d4:	2100      	movs	r1, #0
 80010d6:	4871      	ldr	r0, [pc, #452]	; (800129c <Process_Modbus+0x294>)
 80010d8:	f006 fdd9 	bl	8007c8e <memset>
			Send_Error_Temp();
 80010dc:	f003 f960 	bl	80043a0 <Send_Error_Temp>
			i = 3;
 80010e0:	4b6b      	ldr	r3, [pc, #428]	; (8001290 <Process_Modbus+0x288>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	601a      	str	r2, [r3, #0]
			osDelay(2000);
			memset(rx_data, 0, sizeof(rx_data));
			Send_Error_Device();
			i = 5;
		}
		break;
 80010e6:	e0cf      	b.n	8001288 <Process_Modbus+0x280>
		else if (Error_Cod == Hum_Measur_Err)
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <Process_Modbus+0x2a0>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	f640 32ba 	movw	r2, #3002	; 0xbba
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d117      	bne.n	8001124 <Process_Modbus+0x11c>
			CLCD_SetCursor(&LCD1, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4869      	ldr	r0, [pc, #420]	; (80012a0 <Process_Modbus+0x298>)
 80010fa:	f002 ff0f 	bl	8003f1c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Humi Measure Err");
 80010fe:	496c      	ldr	r1, [pc, #432]	; (80012b0 <Process_Modbus+0x2a8>)
 8001100:	4867      	ldr	r0, [pc, #412]	; (80012a0 <Process_Modbus+0x298>)
 8001102:	f002 ff72 	bl	8003fea <CLCD_WriteString>
			osDelay(2000);
 8001106:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800110a:	f003 fbcb 	bl	80048a4 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 800110e:	2220      	movs	r2, #32
 8001110:	2100      	movs	r1, #0
 8001112:	4862      	ldr	r0, [pc, #392]	; (800129c <Process_Modbus+0x294>)
 8001114:	f006 fdbb 	bl	8007c8e <memset>
			Send_Error_RH();
 8001118:	f003 f9a4 	bl	8004464 <Send_Error_RH>
			i = 4;
 800111c:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <Process_Modbus+0x288>)
 800111e:	2204      	movs	r2, #4
 8001120:	601a      	str	r2, [r3, #0]
		break;
 8001122:	e0b1      	b.n	8001288 <Process_Modbus+0x280>
		else if (Error_Cod == Humi_Sen_Fail)
 8001124:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <Process_Modbus+0x2a0>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f640 32bb 	movw	r2, #3003	; 0xbbb
 800112c:	4293      	cmp	r3, r2
 800112e:	f040 80ab 	bne.w	8001288 <Process_Modbus+0x280>
			CLCD_SetCursor(&LCD1, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	485a      	ldr	r0, [pc, #360]	; (80012a0 <Process_Modbus+0x298>)
 8001138:	f002 fef0 	bl	8003f1c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Humi Sensor Fail ");
 800113c:	495d      	ldr	r1, [pc, #372]	; (80012b4 <Process_Modbus+0x2ac>)
 800113e:	4858      	ldr	r0, [pc, #352]	; (80012a0 <Process_Modbus+0x298>)
 8001140:	f002 ff53 	bl	8003fea <CLCD_WriteString>
			osDelay(2000);
 8001144:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001148:	f003 fbac 	bl	80048a4 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4852      	ldr	r0, [pc, #328]	; (800129c <Process_Modbus+0x294>)
 8001152:	f006 fd9c 	bl	8007c8e <memset>
			Send_Error_Device();
 8001156:	f003 f9e7 	bl	8004528 <Send_Error_Device>
			i = 5;
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <Process_Modbus+0x288>)
 800115c:	2205      	movs	r2, #5
 800115e:	601a      	str	r2, [r3, #0]
		break;
 8001160:	e092      	b.n	8001288 <Process_Modbus+0x280>

	// Read Temp
	case 2:
		Temp = unpack754_32(Data_32);
 8001162:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <Process_Modbus+0x2b0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f828 	bl	80041bc <unpack754_32>
 800116c:	4603      	mov	r3, r0
 800116e:	4a53      	ldr	r2, [pc, #332]	; (80012bc <Process_Modbus+0x2b4>)
 8001170:	6013      	str	r3, [r2, #0]
		if (a == 1)
 8001172:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <Process_Modbus+0x2b8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d116      	bne.n	80011a8 <Process_Modbus+0x1a0>
		{
			sprintf(LCD_Send,"Temp: %.2f oC",Temp );
 800117a:	4b50      	ldr	r3, [pc, #320]	; (80012bc <Process_Modbus+0x2b4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f952 	bl	8000428 <__aeabi_f2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	494e      	ldr	r1, [pc, #312]	; (80012c4 <Process_Modbus+0x2bc>)
 800118a:	484f      	ldr	r0, [pc, #316]	; (80012c8 <Process_Modbus+0x2c0>)
 800118c:	f007 fd08 	bl	8008ba0 <siprintf>
			CLCD_SetCursor(&LCD1, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	4842      	ldr	r0, [pc, #264]	; (80012a0 <Process_Modbus+0x298>)
 8001196:	f002 fec1 	bl	8003f1c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, LCD_Send);
 800119a:	494b      	ldr	r1, [pc, #300]	; (80012c8 <Process_Modbus+0x2c0>)
 800119c:	4840      	ldr	r0, [pc, #256]	; (80012a0 <Process_Modbus+0x298>)
 800119e:	f002 ff24 	bl	8003fea <CLCD_WriteString>
			a = 0;
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <Process_Modbus+0x2b8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
		}
		memset(rx_data, 0, sizeof(rx_data));
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	483b      	ldr	r0, [pc, #236]	; (800129c <Process_Modbus+0x294>)
 80011ae:	f006 fd6e 	bl	8007c8e <memset>
		Read_Water();
 80011b2:	f003 fa3b 	bl	800462c <Read_Water>
		i = 6;
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <Process_Modbus+0x288>)
 80011b8:	2206      	movs	r2, #6
 80011ba:	601a      	str	r2, [r3, #0]
		break;
 80011bc:	e065      	b.n	800128a <Process_Modbus+0x282>

	// Read Error Temperature measurement
	case 3:
		Error_T = Receive_Error_Temp(Data_16[0]);
 80011be:	4b35      	ldr	r3, [pc, #212]	; (8001294 <Process_Modbus+0x28c>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 f918 	bl	80043f8 <Receive_Error_Temp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <Process_Modbus+0x2c4>)
 80011ce:	801a      	strh	r2, [r3, #0]
		// Display error
		memset(rx_data, 0, sizeof(rx_data));
 80011d0:	2220      	movs	r2, #32
 80011d2:	2100      	movs	r1, #0
 80011d4:	4831      	ldr	r0, [pc, #196]	; (800129c <Process_Modbus+0x294>)
 80011d6:	f006 fd5a 	bl	8007c8e <memset>
		break;
 80011da:	e056      	b.n	800128a <Process_Modbus+0x282>

	// Read Error RH measurement
	case 4:
		Error_H = Receive_Error_RH(Data_16[0]);
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <Process_Modbus+0x28c>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f96b 	bl	80044bc <Receive_Error_RH>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <Process_Modbus+0x2c8>)
 80011ec:	801a      	strh	r2, [r3, #0]
		// Display error
		memset(rx_data, 0, sizeof(rx_data));
 80011ee:	2220      	movs	r2, #32
 80011f0:	2100      	movs	r1, #0
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <Process_Modbus+0x294>)
 80011f4:	f006 fd4b 	bl	8007c8e <memset>
		break;
 80011f8:	e047      	b.n	800128a <Process_Modbus+0x282>

	// Read error device
	case 5:
		Error_Device = Receive_Error_Device(Data_16[0]);
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <Process_Modbus+0x28c>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 f9be 	bl	8004580 <Receive_Error_Device>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <Process_Modbus+0x2cc>)
 800120a:	801a      	strh	r2, [r3, #0]
		// Display error
		memset(rx_data, 0, sizeof(rx_data));
 800120c:	2220      	movs	r2, #32
 800120e:	2100      	movs	r1, #0
 8001210:	4822      	ldr	r0, [pc, #136]	; (800129c <Process_Modbus+0x294>)
 8001212:	f006 fd3c 	bl	8007c8e <memset>
		break;
 8001216:	e038      	b.n	800128a <Process_Modbus+0x282>

	// Read RH
	case 6:
		RH =  unpack754_32(Data_32);
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <Process_Modbus+0x2b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 ffcd 	bl	80041bc <unpack754_32>
 8001222:	4603      	mov	r3, r0
 8001224:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <Process_Modbus+0x2d0>)
 8001226:	6013      	str	r3, [r2, #0]
		if (a == 0)
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <Process_Modbus+0x2b8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d11d      	bne.n	800126c <Process_Modbus+0x264>
		{
			sprintf(LCD_Send,"Water: %.2f ppm",RH );
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <Process_Modbus+0x2d0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f8f7 	bl	8000428 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4927      	ldr	r1, [pc, #156]	; (80012dc <Process_Modbus+0x2d4>)
 8001240:	4821      	ldr	r0, [pc, #132]	; (80012c8 <Process_Modbus+0x2c0>)
 8001242:	f007 fcad 	bl	8008ba0 <siprintf>
			CLCD_SetCursor(&LCD1, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <Process_Modbus+0x298>)
 800124c:	f002 fe66 	bl	8003f1c <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, LCD_Send);
 8001250:	491d      	ldr	r1, [pc, #116]	; (80012c8 <Process_Modbus+0x2c0>)
 8001252:	4813      	ldr	r0, [pc, #76]	; (80012a0 <Process_Modbus+0x298>)
 8001254:	f002 fec9 	bl	8003fea <CLCD_WriteString>
			HAL_Delay(4000);
 8001258:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800125c:	f000 fb5c 	bl	8001918 <HAL_Delay>
			CLCD_Clear(&LCD1);
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <Process_Modbus+0x298>)
 8001262:	f002 fed9 	bl	8004018 <CLCD_Clear>
			a = 0;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <Process_Modbus+0x2b8>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
		}
//		Send_Error_Status();
		HAL_GPIO_WritePin(GPIOB, Led_Water_Pin|Led_Temp_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2160      	movs	r1, #96	; 0x60
 8001270:	481b      	ldr	r0, [pc, #108]	; (80012e0 <Process_Modbus+0x2d8>)
 8001272:	f000 fe89 	bl	8001f88 <HAL_GPIO_WritePin>
		memset(rx_data, 0, sizeof(rx_data));
 8001276:	2220      	movs	r2, #32
 8001278:	2100      	movs	r1, #0
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <Process_Modbus+0x294>)
 800127c:	f006 fd07 	bl	8007c8e <memset>
		i = 0;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <Process_Modbus+0x288>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
	}
}
 8001286:	e000      	b.n	800128a <Process_Modbus+0x282>
		break;
 8001288:	bf00      	nop
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002e8 	.word	0x200002e8
 8001294:	2000029c 	.word	0x2000029c
 8001298:	200002d6 	.word	0x200002d6
 800129c:	200002b0 	.word	0x200002b0
 80012a0:	20000310 	.word	0x20000310
 80012a4:	0800c410 	.word	0x0800c410
 80012a8:	200002d8 	.word	0x200002d8
 80012ac:	0800c41c 	.word	0x0800c41c
 80012b0:	0800c430 	.word	0x0800c430
 80012b4:	0800c444 	.word	0x0800c444
 80012b8:	200002a0 	.word	0x200002a0
 80012bc:	200002e0 	.word	0x200002e0
 80012c0:	200002ec 	.word	0x200002ec
 80012c4:	0800c458 	.word	0x0800c458
 80012c8:	200002f0 	.word	0x200002f0
 80012cc:	200002da 	.word	0x200002da
 80012d0:	200002dc 	.word	0x200002dc
 80012d4:	200002de 	.word	0x200002de
 80012d8:	200002e4 	.word	0x200002e4
 80012dc:	0800c468 	.word	0x0800c468
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	while(xSemaphoreTake(myCountingSem01Handle,portMAX_DELAY))
 80012ec:	e050      	b.n	8001390 <StartDefaultTask+0xac>
		{
			if (xQueueReceive(myQueueDataHandle, &rxData, portMAX_DELAY))
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <StartDefaultTask+0xcc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f04f 32ff 	mov.w	r2, #4294967295
 80012f6:	492f      	ldr	r1, [pc, #188]	; (80013b4 <StartDefaultTask+0xd0>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 f8d3 	bl	80054a4 <xQueueReceive>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d045      	beq.n	8001390 <StartDefaultTask+0xac>
			{
				rx_data[rx_index++] = rxData;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <StartDefaultTask+0xd4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	492b      	ldr	r1, [pc, #172]	; (80013b8 <StartDefaultTask+0xd4>)
 800130c:	600a      	str	r2, [r1, #0]
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <StartDefaultTask+0xd0>)
 8001310:	7811      	ldrb	r1, [r2, #0]
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <StartDefaultTask+0xd8>)
 8001314:	54d1      	strb	r1, [r2, r3]
				rx_length++;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <StartDefaultTask+0xdc>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <StartDefaultTask+0xdc>)
 8001320:	801a      	strh	r2, [r3, #0]
				if (rx_length >= 7 && checkcrc16(rx_data, rx_index) == 1)
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <StartDefaultTask+0xdc>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d932      	bls.n	8001390 <StartDefaultTask+0xac>
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <StartDefaultTask+0xd4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <StartDefaultTask+0xd8>)
 8001334:	f002 fec4 	bl	80040c0 <checkcrc16>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d128      	bne.n	8001390 <StartDefaultTask+0xac>
				{
					Data_16[0] = rx_data[3]<<8 | rx_data[4];
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <StartDefaultTask+0xd8>)
 8001340:	78db      	ldrb	r3, [r3, #3]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <StartDefaultTask+0xd8>)
 8001348:	791b      	ldrb	r3, [r3, #4]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <StartDefaultTask+0xe0>)
 8001354:	801a      	strh	r2, [r3, #0]
					Data_16[1] = rx_data[5]<<8 | rx_data[6];
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <StartDefaultTask+0xd8>)
 8001358:	795b      	ldrb	r3, [r3, #5]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <StartDefaultTask+0xd8>)
 8001360:	799b      	ldrb	r3, [r3, #6]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21b      	sxth	r3, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <StartDefaultTask+0xe0>)
 800136c:	805a      	strh	r2, [r3, #2]
					Data_32 = Data_16[1]<<16 | Data_16[0];
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <StartDefaultTask+0xe0>)
 8001370:	885b      	ldrh	r3, [r3, #2]
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <StartDefaultTask+0xe0>)
 8001376:	8812      	ldrh	r2, [r2, #0]
 8001378:	4313      	orrs	r3, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <StartDefaultTask+0xe4>)
 800137e:	601a      	str	r2, [r3, #0]
					Process_Modbus();
 8001380:	f7ff fe42 	bl	8001008 <Process_Modbus>
					//HAL_UART_Transmit(&huart2, rx_data, 7, 200);
					rx_index = 0;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <StartDefaultTask+0xd4>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
					rx_length = 0;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <StartDefaultTask+0xdc>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
	while(xSemaphoreTake(myCountingSem01Handle,portMAX_DELAY))
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <StartDefaultTask+0xe8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	4618      	mov	r0, r3
 800139a:	f004 f963 	bl	8005664 <xQueueSemaphoreTake>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1a4      	bne.n	80012ee <StartDefaultTask+0xa>
				}
			}
		}
  /* USER CODE END 5 */
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000290 	.word	0x20000290
 80013b4:	200002ad 	.word	0x200002ad
 80013b8:	200002d0 	.word	0x200002d0
 80013bc:	200002b0 	.word	0x200002b0
 80013c0:	200002d4 	.word	0x200002d4
 80013c4:	2000029c 	.word	0x2000029c
 80013c8:	200002a0 	.word	0x200002a0
 80013cc:	20000298 	.word	0x20000298

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e2:	f000 fa7d 	bl	80018e0 <HAL_IncTick>
//	Send_Error_Status();
//    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//  }

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000800 	.word	0x40000800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_MspInit+0x68>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_MspInit+0x68>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_MspInit+0x68>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_MspInit+0x68>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_MspInit+0x68>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_MspInit+0x68>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	210f      	movs	r1, #15
 800143a:	f06f 0001 	mvn.w	r0, #1
 800143e:	f000 fb44 	bl	8001aca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_MspInit+0x6c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_MspInit+0x6c>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d113      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0x44>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_TIM_Base_MspInit+0x44>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_TIM_Base_MspInit+0x44>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2106      	movs	r1, #6
 800149e:	201c      	movs	r0, #28
 80014a0:	f000 fb13 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a4:	201c      	movs	r0, #28
 80014a6:	f000 fb2c 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <HAL_UART_MspInit+0x98>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d137      	bne.n	8001548 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_UART_MspInit+0x9c>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_UART_MspInit+0x9c>)
 80014de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e2:	61d3      	str	r3, [r2, #28]
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_UART_MspInit+0x9c>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_UART_MspInit+0x9c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_UART_MspInit+0x9c>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_UART_MspInit+0x9c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001508:	2304      	movs	r3, #4
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	480f      	ldr	r0, [pc, #60]	; (8001558 <HAL_UART_MspInit+0xa0>)
 800151c:	f000 fbb0 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001520:	2308      	movs	r3, #8
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <HAL_UART_MspInit+0xa0>)
 8001534:	f000 fba4 	bl	8001c80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 9, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2109      	movs	r1, #9
 800153c:	2026      	movs	r0, #38	; 0x26
 800153e:	f000 fac4 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001542:	2026      	movs	r0, #38	; 0x26
 8001544:	f000 fadd 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3720      	adds	r7, #32
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40004400 	.word	0x40004400
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800

0800155c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_InitTick+0xe8>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <HAL_InitTick+0xe8>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_InitTick+0xe8>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	f107 0210 	add.w	r2, r7, #16
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f001 f923 	bl	80027e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a4:	f001 f8f4 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 80015a8:	6378      	str	r0, [r7, #52]	; 0x34
 80015aa:	e004      	b.n	80015b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ac:	f001 f8f0 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b8:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_InitTick+0xec>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	3b01      	subs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_InitTick+0xf0>)
 80015c6:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_InitTick+0xf4>)
 80015c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_InitTick+0xf0>)
 80015cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_InitTick+0xf0>)
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_InitTick+0xf0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_InitTick+0xf0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_InitTick+0xf0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80015ea:	4818      	ldr	r0, [pc, #96]	; (800164c <HAL_InitTick+0xf0>)
 80015ec:	f001 f946 	bl	800287c <HAL_TIM_Base_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11b      	bne.n	8001636 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80015fe:	4813      	ldr	r0, [pc, #76]	; (800164c <HAL_InitTick+0xf0>)
 8001600:	f001 f98c 	bl	800291c <HAL_TIM_Base_Start_IT>
 8001604:	4603      	mov	r3, r0
 8001606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800160a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800160e:	2b00      	cmp	r3, #0
 8001610:	d111      	bne.n	8001636 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001612:	201e      	movs	r0, #30
 8001614:	f000 fa75 	bl	8001b02 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b0f      	cmp	r3, #15
 800161c:	d808      	bhi.n	8001630 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800161e:	2200      	movs	r2, #0
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	201e      	movs	r0, #30
 8001624:	f000 fa51 	bl	8001aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_InitTick+0xf8>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e002      	b.n	8001636 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800163a:	4618      	mov	r0, r3
 800163c:	3738      	adds	r7, #56	; 0x38
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	431bde83 	.word	0x431bde83
 800164c:	20000374 	.word	0x20000374
 8001650:	40000800 	.word	0x40000800
 8001654:	20000004 	.word	0x20000004

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Temp_Pin);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 fc96 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Water_Pin);
 8001694:	2002      	movs	r0, #2
 8001696:	f000 fc8f 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM2_IRQHandler+0x10>)
 80016a6:	f001 f98b 	bl	80029c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000200 	.word	0x20000200

080016b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM4_IRQHandler+0x10>)
 80016ba:	f001 f981 	bl	80029c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000374 	.word	0x20000374

080016c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */


  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <USART2_IRQHandler+0x10>)
 80016ce:	f001 fddf 	bl	8003290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//	HAL_UART_Transmit(&huart2, buffer, 7, 200);


  /* USER CODE END USART2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000248 	.word	0x20000248

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <_kill>:

int _kill(int pid, int sig)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f4:	f006 f99a 	bl	8007a2c <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2216      	movs	r2, #22
 80016fc:	601a      	str	r2, [r3, #0]
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_exit>:

void _exit (int status)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001712:	f04f 31ff 	mov.w	r1, #4294967295
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffe7 	bl	80016ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800171c:	e7fe      	b.n	800171c <_exit+0x12>

0800171e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e00a      	b.n	8001746 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001730:	f3af 8000 	nop.w
 8001734:	4601      	mov	r1, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	b2ca      	uxtb	r2, r1
 800173e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	dbf0      	blt.n	8001730 <_read+0x12>
  }

  return len;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e009      	b.n	800177e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3301      	adds	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	dbf1      	blt.n	800176a <_write+0x12>
  }
  return len;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_close>:

int _close(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
  return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <_isatty>:

int _isatty(int file)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <_sbrk+0x5c>)
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <_sbrk+0x60>)
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <_sbrk+0x64>)
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <_sbrk+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d207      	bcs.n	8001830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001820:	f006 f904 	bl	8007a2c <__errno>
 8001824:	4603      	mov	r3, r0
 8001826:	220c      	movs	r2, #12
 8001828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e009      	b.n	8001844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <_sbrk+0x64>)
 8001840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20005000 	.word	0x20005000
 8001850:	00000400 	.word	0x00000400
 8001854:	200003bc 	.word	0x200003bc
 8001858:	200031e0 	.word	0x200031e0

0800185c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800188e:	f7ff ffe5 	bl	800185c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001892:	f006 f9c7 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001896:	f7ff fa0f 	bl	8000cb8 <main>
  bx lr
 800189a:	4770      	bx	lr
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80018a4:	0800cbc4 	.word	0x0800cbc4
  ldr r2, =_sbss
 80018a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80018ac:	200031dc 	.word	0x200031dc

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x28>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f8f5 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	200f      	movs	r0, #15
 80018cc:	f7ff fe46 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fd96 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x1c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x20>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_IncTick+0x20>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000008 	.word	0x20000008
 8001900:	200003c0 	.word	0x200003c0

08001904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <HAL_GetTick+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	200003c0 	.word	0x200003c0

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fff0 	bl	8001904 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffe0 	bl	8001904 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4906      	ldr	r1, [pc, #24]	; (80019f8 <__NVIC_EnableIRQ+0x34>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff4f 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff64 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ffb2 	bl	8001a50 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff81 	bl	80019fc <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff57 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d008      	beq.n	8001b46 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2204      	movs	r2, #4
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e020      	b.n	8001b88 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 020e 	bic.w	r2, r2, #14
 8001b54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d005      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2204      	movs	r2, #4
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e051      	b.n	8001c5a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 020e 	bic.w	r2, r2, #14
 8001bc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <HAL_DMA_Abort_IT+0xd0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d029      	beq.n	8001c34 <HAL_DMA_Abort_IT+0xa0>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_DMA_Abort_IT+0xd4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x9c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <HAL_DMA_Abort_IT+0xd8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d01a      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x96>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_DMA_Abort_IT+0xdc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d012      	beq.n	8001c24 <HAL_DMA_Abort_IT+0x90>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_DMA_Abort_IT+0xe0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00a      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x8a>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_DMA_Abort_IT+0xe4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d102      	bne.n	8001c18 <HAL_DMA_Abort_IT+0x84>
 8001c12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c16:	e00e      	b.n	8001c36 <HAL_DMA_Abort_IT+0xa2>
 8001c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c1c:	e00b      	b.n	8001c36 <HAL_DMA_Abort_IT+0xa2>
 8001c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c22:	e008      	b.n	8001c36 <HAL_DMA_Abort_IT+0xa2>
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	e005      	b.n	8001c36 <HAL_DMA_Abort_IT+0xa2>
 8001c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2e:	e002      	b.n	8001c36 <HAL_DMA_Abort_IT+0xa2>
 8001c30:	2310      	movs	r3, #16
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_Abort_IT+0xa2>
 8001c34:	2301      	movs	r3, #1
 8001c36:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_DMA_Abort_IT+0xe8>)
 8001c38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
    } 
  }
  return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020008 	.word	0x40020008
 8001c68:	4002001c 	.word	0x4002001c
 8001c6c:	40020030 	.word	0x40020030
 8001c70:	40020044 	.word	0x40020044
 8001c74:	40020058 	.word	0x40020058
 8001c78:	4002006c 	.word	0x4002006c
 8001c7c:	40020000 	.word	0x40020000

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	e169      	b.n	8001f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c94:	2201      	movs	r2, #1
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8158 	bne.w	8001f62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a9a      	ldr	r2, [pc, #616]	; (8001f20 <HAL_GPIO_Init+0x2a0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d05e      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cbc:	4a98      	ldr	r2, [pc, #608]	; (8001f20 <HAL_GPIO_Init+0x2a0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d875      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cc2:	4a98      	ldr	r2, [pc, #608]	; (8001f24 <HAL_GPIO_Init+0x2a4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d058      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cc8:	4a96      	ldr	r2, [pc, #600]	; (8001f24 <HAL_GPIO_Init+0x2a4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d86f      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cce:	4a96      	ldr	r2, [pc, #600]	; (8001f28 <HAL_GPIO_Init+0x2a8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d052      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cd4:	4a94      	ldr	r2, [pc, #592]	; (8001f28 <HAL_GPIO_Init+0x2a8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d869      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cda:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <HAL_GPIO_Init+0x2ac>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d04c      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001ce0:	4a92      	ldr	r2, [pc, #584]	; (8001f2c <HAL_GPIO_Init+0x2ac>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d863      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001ce6:	4a92      	ldr	r2, [pc, #584]	; (8001f30 <HAL_GPIO_Init+0x2b0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d046      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
 8001cec:	4a90      	ldr	r2, [pc, #576]	; (8001f30 <HAL_GPIO_Init+0x2b0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d85d      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d82a      	bhi.n	8001d4c <HAL_GPIO_Init+0xcc>
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d859      	bhi.n	8001dae <HAL_GPIO_Init+0x12e>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <HAL_GPIO_Init+0x80>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d7b 	.word	0x08001d7b
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001d67 	.word	0x08001d67
 8001d0c:	08001da9 	.word	0x08001da9
 8001d10:	08001daf 	.word	0x08001daf
 8001d14:	08001daf 	.word	0x08001daf
 8001d18:	08001daf 	.word	0x08001daf
 8001d1c:	08001daf 	.word	0x08001daf
 8001d20:	08001daf 	.word	0x08001daf
 8001d24:	08001daf 	.word	0x08001daf
 8001d28:	08001daf 	.word	0x08001daf
 8001d2c:	08001daf 	.word	0x08001daf
 8001d30:	08001daf 	.word	0x08001daf
 8001d34:	08001daf 	.word	0x08001daf
 8001d38:	08001daf 	.word	0x08001daf
 8001d3c:	08001daf 	.word	0x08001daf
 8001d40:	08001daf 	.word	0x08001daf
 8001d44:	08001d5d 	.word	0x08001d5d
 8001d48:	08001d71 	.word	0x08001d71
 8001d4c:	4a79      	ldr	r2, [pc, #484]	; (8001f34 <HAL_GPIO_Init+0x2b4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d52:	e02c      	b.n	8001dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e029      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	3304      	adds	r3, #4
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e024      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e01f      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	330c      	adds	r3, #12
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e01a      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d82:	2304      	movs	r3, #4
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e013      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d90:	2308      	movs	r3, #8
 8001d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	611a      	str	r2, [r3, #16]
          break;
 8001d9a:	e009      	b.n	8001db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	615a      	str	r2, [r3, #20]
          break;
 8001da6:	e003      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x130>
          break;
 8001dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	; 0xff
 8001db4:	d801      	bhi.n	8001dba <HAL_GPIO_Init+0x13a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	e001      	b.n	8001dbe <HAL_GPIO_Init+0x13e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d802      	bhi.n	8001dcc <HAL_GPIO_Init+0x14c>
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	e002      	b.n	8001dd2 <HAL_GPIO_Init+0x152>
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	3b08      	subs	r3, #8
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	210f      	movs	r1, #15
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	6a39      	ldr	r1, [r7, #32]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80b1 	beq.w	8001f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_GPIO_Init+0x2b8>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_GPIO_Init+0x2b8>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e18:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a40      	ldr	r2, [pc, #256]	; (8001f40 <HAL_GPIO_Init+0x2c0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_GPIO_Init+0x1ec>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3f      	ldr	r2, [pc, #252]	; (8001f44 <HAL_GPIO_Init+0x2c4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00d      	beq.n	8001e68 <HAL_GPIO_Init+0x1e8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3e      	ldr	r2, [pc, #248]	; (8001f48 <HAL_GPIO_Init+0x2c8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <HAL_GPIO_Init+0x1e4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3d      	ldr	r2, [pc, #244]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e006      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e004      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_GPIO_Init+0x1ee>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e7e:	492f      	ldr	r1, [pc, #188]	; (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	492c      	ldr	r1, [pc, #176]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4928      	ldr	r1, [pc, #160]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ec0:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	491e      	ldr	r1, [pc, #120]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4918      	ldr	r1, [pc, #96]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4914      	ldr	r1, [pc, #80]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d021      	beq.n	8001f54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
 8001f1c:	e021      	b.n	8001f62 <HAL_GPIO_Init+0x2e2>
 8001f1e:	bf00      	nop
 8001f20:	10320000 	.word	0x10320000
 8001f24:	10310000 	.word	0x10310000
 8001f28:	10220000 	.word	0x10220000
 8001f2c:	10210000 	.word	0x10210000
 8001f30:	10120000 	.word	0x10120000
 8001f34:	10110000 	.word	0x10110000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40010c00 	.word	0x40010c00
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	40011400 	.word	0x40011400
 8001f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4909      	ldr	r1, [pc, #36]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	3301      	adds	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f ae8e 	bne.w	8001c94 <HAL_GPIO_Init+0x14>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	372c      	adds	r7, #44	; 0x2c
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40010400 	.word	0x40010400

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa4:	e003      	b.n	8001fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	611a      	str	r2, [r3, #16]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe2c 	bl	8000c34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e272      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002008:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b04      	cmp	r3, #4
 8002012:	d00c      	beq.n	800202e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002014:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d112      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
 8002020:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d10b      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d06c      	beq.n	8002114 <HAL_RCC_OscConfig+0x12c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d168      	bne.n	8002114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e24c      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x76>
 8002050:	4b80      	ldr	r3, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a7f      	ldr	r2, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e02e      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7a      	ldr	r2, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b78      	ldr	r3, [pc, #480]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a77      	ldr	r2, [pc, #476]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0xbc>
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a71      	ldr	r2, [pc, #452]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 80020a4:	4b6b      	ldr	r3, [pc, #428]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a67      	ldr	r2, [pc, #412]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fc1e 	bl	8001904 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fc1a 	bl	8001904 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e200      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xe4>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fc0a 	bl	8001904 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fc06 	bl	8001904 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1ec      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x10c>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1c0      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4939      	ldr	r1, [pc, #228]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fbbf 	bl	8001904 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fbbb 	bl	8001904 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1a1      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4927      	ldr	r1, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_RCC_OscConfig+0x270>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fb9e 	bl	8001904 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fb9a 	bl	8001904 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e180      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03a      	beq.n	800226c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_RCC_OscConfig+0x274>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff fb7e 	bl	8001904 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fb7a 	bl	8001904 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e160      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fb08 	bl	8002840 <RCC_Delay>
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_RCC_OscConfig+0x274>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff fb64 	bl	8001904 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fb60 	bl	8001904 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d908      	bls.n	8002260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e146      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	42420000 	.word	0x42420000
 800225c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b92      	ldr	r3, [pc, #584]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e9      	bne.n	8002240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a6 	beq.w	80023c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b8b      	ldr	r3, [pc, #556]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b88      	ldr	r3, [pc, #544]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a87      	ldr	r2, [pc, #540]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7e      	ldr	r2, [pc, #504]	; (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7ff fb21 	bl	8001904 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7ff fb1d 	bl	8001904 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	; 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e103      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x312>
 80022ec:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a6e      	ldr	r2, [pc, #440]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e02d      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x334>
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a69      	ldr	r2, [pc, #420]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a66      	ldr	r2, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	e01c      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x356>
 8002324:	4b61      	ldr	r3, [pc, #388]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a60      	ldr	r2, [pc, #384]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a5d      	ldr	r2, [pc, #372]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800233e:	4b5b      	ldr	r3, [pc, #364]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff fad1 	bl	8001904 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff facd 	bl	8001904 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0b1      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ee      	beq.n	8002366 <HAL_RCC_OscConfig+0x37e>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fabb 	bl	8001904 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fab7 	bl	8001904 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e09b      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	4b40      	ldr	r3, [pc, #256]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8087 	beq.w	80024de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d061      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d146      	bne.n	8002472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fa8b 	bl	8001904 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff fa87 	bl	8001904 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e06d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4921      	ldr	r1, [pc, #132]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a19      	ldr	r1, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	430b      	orrs	r3, r1
 800243e:	491b      	ldr	r1, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fa5b 	bl	8001904 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff fa57 	bl	8001904 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x46a>
 8002470:	e035      	b.n	80024de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fa44 	bl	8001904 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fa40 	bl	8001904 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e026      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x498>
 800249e:	e01e      	b.n	80024de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e019      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_OscConfig+0x500>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0d0      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d910      	bls.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4965      	ldr	r1, [pc, #404]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b63      	ldr	r3, [pc, #396]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0b8      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a58      	ldr	r2, [pc, #352]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a52      	ldr	r2, [pc, #328]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800256a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	494d      	ldr	r1, [pc, #308]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d040      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d115      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07f      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e073      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4936      	ldr	r1, [pc, #216]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff f992 	bl	8001904 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff f98e 	bl	8001904 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e053      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d210      	bcs.n	800263c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4922      	ldr	r1, [pc, #136]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e032      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4916      	ldr	r1, [pc, #88]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	490e      	ldr	r1, [pc, #56]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267a:	f000 f821 	bl	80026c0 <HAL_RCC_GetSysClockFreq>
 800267e:	4602      	mov	r2, r0
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	490a      	ldr	r1, [pc, #40]	; (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	5ccb      	ldrb	r3, [r1, r3]
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe ff5e 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40021000 	.word	0x40021000
 80026b4:	0800c4fc 	.word	0x0800c4fc
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000004 	.word	0x20000004

080026c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c0:	b490      	push	{r4, r7}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_RCC_GetSysClockFreq+0xac>)
 80026c8:	1d3c      	adds	r4, r7, #4
 80026ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026d0:	f240 2301 	movw	r3, #513	; 0x201
 80026d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x40>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x46>
 80026fe:	e02b      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002702:	623b      	str	r3, [r7, #32]
      break;
 8002704:	e02b      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	0c9b      	lsrs	r3, r3, #18
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3328      	adds	r3, #40	; 0x28
 8002710:	443b      	add	r3, r7
 8002712:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002716:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0c5b      	lsrs	r3, r3, #17
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	3328      	adds	r3, #40	; 0x28
 800272e:	443b      	add	r3, r7
 8002730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002734:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb4>)
 800273a:	fb03 f202 	mul.w	r2, r3, r2
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e004      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	623b      	str	r3, [r7, #32]
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetSysClockFreq+0xb4>)
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	6a3b      	ldr	r3, [r7, #32]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bc90      	pop	{r4, r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	0800c478 	.word	0x0800c478
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200
 8002778:	003d0900 	.word	0x003d0900

0800277c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <HAL_RCC_GetHCLKFreq+0x10>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002794:	f7ff fff2 	bl	800277c <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	0800c50c 	.word	0x0800c50c

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff ffde 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0adb      	lsrs	r3, r3, #11
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	0800c50c 	.word	0x0800c50c

080027e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	220f      	movs	r2, #15
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCC_GetClockConfig+0x58>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetClockConfig+0x5c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0207 	and.w	r2, r3, #7
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	40022000 	.word	0x40022000

08002840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <RCC_Delay+0x34>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <RCC_Delay+0x38>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800285c:	bf00      	nop
  }
  while (Delay --);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <RCC_Delay+0x1c>
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000000 	.word	0x20000000
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fde4 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fa70 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e03a      	b.n	80029aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <HAL_TIM_Base_Start_IT+0x98>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x58>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d009      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x58>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x58>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d010      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	e007      	b.n	80029a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800

080029c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d122      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d11b      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0202 	mvn.w	r2, #2
 80029ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9b1 	bl	8002d6a <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f9a4 	bl	8002d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f9b3 	bl	8002d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0204 	mvn.w	r2, #4
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2202      	movs	r2, #2
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f987 	bl	8002d6a <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f97a 	bl	8002d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f989 	bl	8002d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0208 	mvn.w	r2, #8
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f95d 	bl	8002d6a <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f950 	bl	8002d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f95f 	bl	8002d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0210 	mvn.w	r2, #16
 8002ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2208      	movs	r2, #8
 8002aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f933 	bl	8002d6a <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f926 	bl	8002d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f935 	bl	8002d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0201 	mvn.w	r2, #1
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fc46 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa77 	bl	800305e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8f9 	bl	8002d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d107      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0220 	mvn.w	r2, #32
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa42 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_ConfigClockSource+0x18>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0b3      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x180>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c20:	d03e      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0xd0>
 8002c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c26:	f200 8087 	bhi.w	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	f000 8085 	beq.w	8002d3c <HAL_TIM_ConfigClockSource+0x16c>
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c36:	d87f      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c38:	2b70      	cmp	r3, #112	; 0x70
 8002c3a:	d01a      	beq.n	8002c72 <HAL_TIM_ConfigClockSource+0xa2>
 8002c3c:	2b70      	cmp	r3, #112	; 0x70
 8002c3e:	d87b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c40:	2b60      	cmp	r3, #96	; 0x60
 8002c42:	d050      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x116>
 8002c44:	2b60      	cmp	r3, #96	; 0x60
 8002c46:	d877      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c48:	2b50      	cmp	r3, #80	; 0x50
 8002c4a:	d03c      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0xf6>
 8002c4c:	2b50      	cmp	r3, #80	; 0x50
 8002c4e:	d873      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d058      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x136>
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d86f      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c58:	2b30      	cmp	r3, #48	; 0x30
 8002c5a:	d064      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x156>
 8002c5c:	2b30      	cmp	r3, #48	; 0x30
 8002c5e:	d86b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d060      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x156>
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d867      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d05c      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x156>
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d05a      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c70:	e062      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f000 f966 	bl	8002f52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	609a      	str	r2, [r3, #8]
      break;
 8002c9e:	e04e      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6899      	ldr	r1, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f000 f94f 	bl	8002f52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc2:	609a      	str	r2, [r3, #8]
      break;
 8002cc4:	e03b      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f000 f8c6 	bl	8002e64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2150      	movs	r1, #80	; 0x50
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f91d 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e02b      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 f8e4 	bl	8002ec0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2160      	movs	r1, #96	; 0x60
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f90d 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002d04:	e01b      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 f8a6 	bl	8002e64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2140      	movs	r1, #64	; 0x40
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f8fd 	bl	8002f1e <TIM_ITRx_SetConfig>
      break;
 8002d24:	e00b      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f000 f8f4 	bl	8002f1e <TIM_ITRx_SetConfig>
        break;
 8002d36:	e002      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a29      	ldr	r2, [pc, #164]	; (8002e58 <TIM_Base_SetConfig+0xb8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <TIM_Base_SetConfig+0x30>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d007      	beq.n	8002dd0 <TIM_Base_SetConfig+0x30>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <TIM_Base_SetConfig+0xbc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_Base_SetConfig+0x30>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <TIM_Base_SetConfig+0xc0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d108      	bne.n	8002de2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <TIM_Base_SetConfig+0xb8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <TIM_Base_SetConfig+0xbc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <TIM_Base_SetConfig+0xc0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <TIM_Base_SetConfig+0xb8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800

08002e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0201 	bic.w	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f023 030a 	bic.w	r3, r3, #10
 8002ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f023 0210 	bic.w	r2, r3, #16
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	031b      	lsls	r3, r3, #12
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002efc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	621a      	str	r2, [r3, #32]
}
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f043 0307 	orr.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	609a      	str	r2, [r3, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	021a      	lsls	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e046      	b.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00e      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d009      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10c      	bne.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	4313      	orrs	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e03f      	b.n	8003102 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fa0e 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fc85 	bl	80039c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b08a      	sub	sp, #40	; 0x28
 800310e:	af02      	add	r7, sp, #8
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	d17c      	bne.n	8003224 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_UART_Transmit+0x2c>
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e075      	b.n	8003226 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_UART_Transmit+0x3e>
 8003144:	2302      	movs	r3, #2
 8003146:	e06e      	b.n	8003226 <HAL_UART_Transmit+0x11c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2221      	movs	r2, #33	; 0x21
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315e:	f7fe fbd1 	bl	8001904 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d108      	bne.n	800318c <HAL_UART_Transmit+0x82>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e003      	b.n	8003194 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800319c:	e02a      	b.n	80031f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa38 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e036      	b.n	8003226 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3302      	adds	r3, #2
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	e007      	b.n	80031e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3301      	adds	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1cf      	bne.n	800319e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2140      	movs	r1, #64	; 0x40
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fa08 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e006      	b.n	8003226 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	4613      	mov	r3, r2
 800323a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b20      	cmp	r3, #32
 8003246:	d11d      	bne.n	8003284 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_UART_Receive_IT+0x26>
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e016      	b.n	8003286 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_UART_Receive_IT+0x38>
 8003262:	2302      	movs	r3, #2
 8003264:	e00f      	b.n	8003286 <HAL_UART_Receive_IT+0x58>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	461a      	mov	r2, r3
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa19 	bl	80036b2 <UART_Start_Receive_IT>
 8003280:	4603      	mov	r3, r0
 8003282:	e000      	b.n	8003286 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_UART_IRQHandler+0x52>
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fac9 	bl	8003872 <UART_Receive_IT>
      return;
 80032e0:	e17b      	b.n	80035da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b1 	beq.w	800344c <HAL_UART_IRQHandler+0x1bc>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_UART_IRQHandler+0x70>
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a6 	beq.w	800344c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_UART_IRQHandler+0x90>
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_UART_IRQHandler+0xb0>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0202 	orr.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_UART_IRQHandler+0xd0>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00f      	beq.n	800338a <HAL_UART_IRQHandler+0xfa>
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_UART_IRQHandler+0xee>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f043 0208 	orr.w	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 811e 	beq.w	80035d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_UART_IRQHandler+0x11e>
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fa62 	bl	8003872 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <HAL_UART_IRQHandler+0x146>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d031      	beq.n	800343a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f9a4 	bl	8003724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d023      	beq.n	8003432 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d013      	beq.n	800342a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4a76      	ldr	r2, [pc, #472]	; (80035e0 <HAL_UART_IRQHandler+0x350>)
 8003408:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fbc0 	bl	8001b94 <HAL_DMA_Abort_IT>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003424:	4610      	mov	r0, r2
 8003426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	e00e      	b.n	8003448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8e3 	bl	80035f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	e00a      	b.n	8003448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8df 	bl	80035f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	e006      	b.n	8003448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8db 	bl	80035f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003446:	e0c3      	b.n	80035d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	bf00      	nop
    return;
 800344a:	e0c1      	b.n	80035d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b01      	cmp	r3, #1
 8003452:	f040 80a1 	bne.w	8003598 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 809b 	beq.w	8003598 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8095 	beq.w	8003598 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04e      	beq.n	8003530 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800349c:	8a3b      	ldrh	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8098 	beq.w	80035d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a8:	8a3a      	ldrh	r2, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	f080 8092 	bcs.w	80035d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8a3a      	ldrh	r2, [r7, #16]
 80034b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d02b      	beq.n	8003518 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0210 	bic.w	r2, r2, #16
 800350c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fb03 	bl	8001b1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003520:	b29b      	uxth	r3, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b29b      	uxth	r3, r3
 8003526:	4619      	mov	r1, r3
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f86d 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800352e:	e051      	b.n	80035d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003538:	b29b      	uxth	r3, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d047      	beq.n	80035d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003548:	8a7b      	ldrh	r3, [r7, #18]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d044      	beq.n	80035d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800355c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0210 	bic.w	r2, r2, #16
 800358a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800358c:	8a7b      	ldrh	r3, [r7, #18]
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f839 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003596:	e01f      	b.n	80035d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_UART_IRQHandler+0x324>
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8f9 	bl	80037a4 <UART_Transmit_IT>
    return;
 80035b2:	e012      	b.n	80035da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <HAL_UART_IRQHandler+0x34a>
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f93a 	bl	8003842 <UART_EndTransmit_IT>
    return;
 80035ce:	e004      	b.n	80035da <HAL_UART_IRQHandler+0x34a>
    return;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <HAL_UART_IRQHandler+0x34a>
      return;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_UART_IRQHandler+0x34a>
      return;
 80035d8:	bf00      	nop
  }
}
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	0800377d 	.word	0x0800377d

080035e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	e02c      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d028      	beq.n	800368a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x30>
 800363e:	f7fe f961 	bl	8001904 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	429a      	cmp	r2, r3
 800364c:	d21d      	bcs.n	800368a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800365c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e00f      	b.n	80036aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d0c3      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	4613      	mov	r3, r2
 80036be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2222      	movs	r2, #34	; 0x22
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0220 	orr.w	r2, r2, #32
 8003716:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800373a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	2b01      	cmp	r3, #1
 8003752:	d107      	bne.n	8003764 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0210 	bic.w	r2, r2, #16
 8003762:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff ff2d 	bl	80035f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b21      	cmp	r3, #33	; 0x21
 80037b6:	d13e      	bne.n	8003836 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d114      	bne.n	80037ec <UART_Transmit_IT+0x48>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d110      	bne.n	80037ec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	1c9a      	adds	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	621a      	str	r2, [r3, #32]
 80037ea:	e008      	b.n	80037fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6211      	str	r1, [r2, #32]
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4619      	mov	r1, r3
 800380c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003820:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003830:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003858:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff febe 	bl	80035e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b22      	cmp	r3, #34	; 0x22
 8003884:	f040 8099 	bne.w	80039ba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d117      	bne.n	80038c2 <UART_Receive_IT+0x50>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d113      	bne.n	80038c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	1c9a      	adds	r2, r3, #2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
 80038c0:	e026      	b.n	8003910 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d007      	beq.n	80038e6 <UART_Receive_IT+0x74>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <UART_Receive_IT+0x82>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e008      	b.n	8003906 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003900:	b2da      	uxtb	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29b      	uxth	r3, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4619      	mov	r1, r3
 800391e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003920:	2b00      	cmp	r3, #0
 8003922:	d148      	bne.n	80039b6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0220 	bic.w	r2, r2, #32
 8003932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	2b01      	cmp	r3, #1
 8003962:	d123      	bne.n	80039ac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0210 	bic.w	r2, r2, #16
 8003978:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b10      	cmp	r3, #16
 8003986:	d10a      	bne.n	800399e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff fe2f 	bl	8003608 <HAL_UARTEx_RxEventCallback>
 80039aa:	e002      	b.n	80039b2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f913 	bl	8000bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e002      	b.n	80039bc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039fe:	f023 030c 	bic.w	r3, r3, #12
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <UART_SetConfig+0x114>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fec4 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	e002      	b.n	8003a3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7fe feac 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 8003a38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009a      	lsls	r2, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <UART_SetConfig+0x118>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	0119      	lsls	r1, r3, #4
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009a      	lsls	r2, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a70:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <UART_SetConfig+0x118>)
 8003a72:	fba3 0302 	umull	r0, r3, r3, r2
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2064      	movs	r0, #100	; 0x64
 8003a7a:	fb00 f303 	mul.w	r3, r0, r3
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	3332      	adds	r3, #50	; 0x32
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <UART_SetConfig+0x118>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a90:	4419      	add	r1, r3
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <UART_SetConfig+0x118>)
 8003aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2064      	movs	r0, #100	; 0x64
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	440a      	add	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	51eb851f 	.word	0x51eb851f

08003ae0 <CLCD_Delay>:
#include "Lcd.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd ff13 	bl	8001918 <HAL_Delay>

}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70fb      	strb	r3, [r7, #3]
 8003b06:	4613      	mov	r3, r2
 8003b08:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 8003b0a:	78bb      	ldrb	r3, [r7, #2]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d108      	bne.n	8003b22 <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6858      	ldr	r0, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	891b      	ldrh	r3, [r3, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fe fa34 	bl	8001f88 <HAL_GPIO_WritePin>
 8003b20:	e00a      	b.n	8003b38 <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 8003b22:	78bb      	ldrb	r3, [r7, #2]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6858      	ldr	r0, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	891b      	ldrh	r3, [r3, #8]
 8003b30:	2201      	movs	r2, #1
 8003b32:	4619      	mov	r1, r3
 8003b34:	f7fe fa28 	bl	8001f88 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6958      	ldr	r0, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8b19      	ldrh	r1, [r3, #24]
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f7fe fa1d 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69d8      	ldr	r0, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8c19      	ldrh	r1, [r3, #32]
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fe fa10 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f7fe fa03 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	f7fe f9f6 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f7fe f9e9 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f7fe f9db 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	f7fe f9cd 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	09db      	lsrs	r3, r3, #7
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fe f9c2 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68d8      	ldr	r0, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8a1b      	ldrh	r3, [r3, #16]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7fe f9ba 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7ff ff63 	bl	8003ae0 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68d8      	ldr	r0, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8a1b      	ldrh	r3, [r3, #16]
 8003c22:	2201      	movs	r2, #1
 8003c24:	4619      	mov	r1, r3
 8003c26:	f7fe f9af 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7ff ff58 	bl	8003ae0 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68d8      	ldr	r0, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8a1b      	ldrh	r3, [r3, #16]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7fe f9a4 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003c40:	2001      	movs	r0, #1
 8003c42:	f7ff ff4d 	bl	8003ae0 <CLCD_Delay>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 8003c68:	78bb      	ldrb	r3, [r7, #2]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6858      	ldr	r0, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	891b      	ldrh	r3, [r3, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fe f985 	bl	8001f88 <HAL_GPIO_WritePin>
 8003c7e:	e00a      	b.n	8003c96 <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8003c80:	78bb      	ldrb	r3, [r7, #2]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d107      	bne.n	8003c96 <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6858      	ldr	r0, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	891b      	ldrh	r3, [r3, #8]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fe f979 	bl	8001f88 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f7fe f96e 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f7fe f960 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7fe f952 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7fe f944 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68d8      	ldr	r0, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8a1b      	ldrh	r3, [r3, #16]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fe f93c 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003d10:	2001      	movs	r0, #1
 8003d12:	f7ff fee5 	bl	8003ae0 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68d8      	ldr	r0, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8a1b      	ldrh	r3, [r3, #16]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4619      	mov	r1, r3
 8003d22:	f7fe f931 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7ff feda 	bl	8003ae0 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68d8      	ldr	r0, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8a1b      	ldrh	r3, [r3, #16]
 8003d34:	2200      	movs	r2, #0
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7fe f926 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7ff fecf 	bl	8003ae0 <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	f7fe f918 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f7fe f90a 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8003d7e:	7bbb      	ldrb	r3, [r7, #14]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f7fe f8fc 	bl	8001f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003d9a:	7bbb      	ldrb	r3, [r7, #14]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	f7fe f8ee 	bl	8001f88 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68d8      	ldr	r0, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8a1b      	ldrh	r3, [r3, #16]
 8003db4:	2200      	movs	r2, #0
 8003db6:	4619      	mov	r1, r3
 8003db8:	f7fe f8e6 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f7ff fe8f 	bl	8003ae0 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68d8      	ldr	r0, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8a1b      	ldrh	r3, [r3, #16]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fe f8db 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f7ff fe84 	bl	8003ae0 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68d8      	ldr	r0, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8a1b      	ldrh	r3, [r3, #16]
 8003de0:	2200      	movs	r2, #0
 8003de2:	4619      	mov	r1, r3
 8003de4:	f7fe f8d0 	bl	8001f88 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7ff fe79 	bl	8003ae0 <CLCD_Delay>
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	72fb      	strb	r3, [r7, #11]
 8003e04:	4613      	mov	r3, r2
 8003e06:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	7afa      	ldrb	r2, [r7, #11]
 8003e12:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	7aba      	ldrb	r2, [r7, #10]
 8003e18:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8b3a      	ldrh	r2, [r7, #24]
 8003e24:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8c3a      	ldrh	r2, [r7, #32]
 8003e30:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e36:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e3c:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e42:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003e56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5e:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003e66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2228      	movs	r2, #40	; 0x28
 8003e6e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2206      	movs	r2, #6
 8003e76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	220c      	movs	r2, #12
 8003e7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2214      	movs	r2, #20
 8003e86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	CLCD_Delay(50);
 8003e8a:	2032      	movs	r0, #50	; 0x32
 8003e8c:	f7ff fe28 	bl	8003ae0 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2133      	movs	r1, #51	; 0x33
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff feda 	bl	8003c4e <CLCD_Write4>
	CLCD_Delay(5);
 8003e9a:	2005      	movs	r0, #5
 8003e9c:	f7ff fe20 	bl	8003ae0 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2133      	movs	r1, #51	; 0x33
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fed2 	bl	8003c4e <CLCD_Write4>
	CLCD_Delay(5);
 8003eaa:	2005      	movs	r0, #5
 8003eac:	f7ff fe18 	bl	8003ae0 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2132      	movs	r1, #50	; 0x32
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff feca 	bl	8003c4e <CLCD_Write4>
	CLCD_Delay(5);
 8003eba:	2005      	movs	r0, #5
 8003ebc:	f7ff fe10 	bl	8003ae0 <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff febf 	bl	8003c4e <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff feb7 	bl	8003c4e <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff feaf 	bl	8003c4e <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fea7 	bl	8003c4e <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2101      	movs	r1, #1
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fea2 	bl	8003c4e <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fe9d 	bl	8003c4e <CLCD_Write4>
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <CLCD_SetCursor+0x8c>)
 8003f32:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d303      	bcc.n	8003f46 <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	785b      	ldrb	r3, [r3, #1]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	789b      	ldrb	r3, [r3, #2]
 8003f4a:	78ba      	ldrb	r2, [r7, #2]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d303      	bcc.n	8003f58 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	789b      	ldrb	r3, [r3, #2]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8003f58:	78bb      	ldrb	r3, [r7, #2]
 8003f5a:	3310      	adds	r3, #16
 8003f5c:	443b      	add	r3, r7
 8003f5e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	4413      	add	r3, r2
 8003f66:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d109      	bne.n	8003f84 <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fdbc 	bl	8003afa <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 8003f82:	e00c      	b.n	8003f9e <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d108      	bne.n	8003f9e <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2200      	movs	r2, #0
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fe58 	bl	8003c4e <CLCD_Write4>
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	54144000 	.word	0x54144000

08003fac <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b10      	cmp	r3, #16
 8003fbe:	d106      	bne.n	8003fce <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fd97 	bl	8003afa <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8003fcc:	e009      	b.n	8003fe2 <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff fe36 	bl	8003c4e <CLCD_Write4>
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_WriteChar(LCD, *String++);
 8003ff4:	e007      	b.n	8004006 <CLCD_WriteString+0x1c>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	603a      	str	r2, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ffd3 	bl	8003fac <CLCD_WriteChar>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f3      	bne.n	8003ff6 <CLCD_WriteString+0xc>
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <CLCD_Clear>:
void CLCD_Clear(CLCD_Name* LCD)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b10      	cmp	r3, #16
 8004026:	d105      	bne.n	8004034 <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 8004028:	2200      	movs	r2, #0
 800402a:	2101      	movs	r1, #1
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fd64 	bl	8003afa <CLCD_Write8>
 8004032:	e008      	b.n	8004046 <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 800403c:	2200      	movs	r2, #0
 800403e:	2101      	movs	r1, #1
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fe04 	bl	8003c4e <CLCD_Write4>
	}
	CLCD_Delay(5);
 8004046:	2005      	movs	r0, #5
 8004048:	f7ff fd4a 	bl	8003ae0 <CLCD_Delay>
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <crc16>:

extern UART_HandleTypeDef huart2;


uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8004060:	23ff      	movs	r3, #255	; 0xff
 8004062:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8004064:	23ff      	movs	r3, #255	; 0xff
 8004066:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8004068:	e013      	b.n	8004092 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	7bbb      	ldrb	r3, [r7, #14]
 8004074:	4053      	eors	r3, r2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <crc16+0x64>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4413      	add	r3, r2
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	4053      	eors	r3, r2
 8004086:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8004088:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <crc16+0x68>)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4413      	add	r3, r2
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	1e5a      	subs	r2, r3, #1
 8004096:	807a      	strh	r2, [r7, #2]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e6      	bne.n	800406a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	b21a      	sxth	r2, r3
 80040a2:	7bbb      	ldrb	r3, [r7, #14]
 80040a4:	b21b      	sxth	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	b29b      	uxth	r3, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	0800c514 	.word	0x0800c514
 80040bc:	0800c614 	.word	0x0800c614

080040c0 <checkcrc16>:

// buffer: data nhan duoc de kiem tra checksum
// index: size cua data
// Vd truyen vao data có 7 byte: index = 7
uint8_t checkcrc16(uint8_t *buffer, uint8_t index)
{
 80040c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040c4:	b089      	sub	sp, #36	; 0x24
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
 80040ce:	466b      	mov	r3, sp
 80040d0:	461e      	mov	r6, r3
	uint8_t transform[index], a;
 80040d2:	78f9      	ldrb	r1, [r7, #3]
 80040d4:	460b      	mov	r3, r1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	b2cb      	uxtb	r3, r1
 80040dc:	2200      	movs	r2, #0
 80040de:	4698      	mov	r8, r3
 80040e0:	4691      	mov	r9, r2
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f6:	b2cb      	uxtb	r3, r1
 80040f8:	2200      	movs	r2, #0
 80040fa:	461c      	mov	r4, r3
 80040fc:	4615      	mov	r5, r2
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	00eb      	lsls	r3, r5, #3
 8004108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410c:	00e2      	lsls	r2, r4, #3
 800410e:	460b      	mov	r3, r1
 8004110:	3307      	adds	r3, #7
 8004112:	08db      	lsrs	r3, r3, #3
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	ebad 0d03 	sub.w	sp, sp, r3
 800411a:	466b      	mov	r3, sp
 800411c:	3300      	adds	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < index - 2; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e00b      	b.n	800413e <checkcrc16+0x7e>
	{
		transform[i] = buffer[i];
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	7819      	ldrb	r1, [r3, #0]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	460a      	mov	r2, r1
 8004136:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < index - 2; i++)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3301      	adds	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	3b02      	subs	r3, #2
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	429a      	cmp	r2, r3
 8004146:	dbee      	blt.n	8004126 <checkcrc16+0x66>
	}
	uint16_t crc = crc16(transform, index - 2);
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b02      	subs	r3, #2
 800414e:	b29b      	uxth	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	6938      	ldr	r0, [r7, #16]
 8004154:	f7ff ff7e 	bl	8004054 <crc16>
 8004158:	4603      	mov	r3, r0
 800415a:	81fb      	strh	r3, [r7, #14]
	transform[index - 2] = crc&0xFF;   // CRC LOW
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	3b02      	subs	r3, #2
 8004160:	89fa      	ldrh	r2, [r7, #14]
 8004162:	b2d1      	uxtb	r1, r2
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	54d1      	strb	r1, [r2, r3]
	transform[index - 1] = (crc>>8)&0xFF;  // CRC HIGH
 8004168:	89fb      	ldrh	r3, [r7, #14]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b29a      	uxth	r2, r3
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2d1      	uxtb	r1, r2
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	54d1      	strb	r1, [r2, r3]
	if ((transform[index - 2] == buffer[index - 2]) && (transform[index - 2] == buffer[index - 2]))
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	3b02      	subs	r3, #2
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	5cd2      	ldrb	r2, [r2, r3]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	3b02      	subs	r3, #2
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	440b      	add	r3, r1
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d10d      	bne.n	80041aa <checkcrc16+0xea>
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	3b02      	subs	r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	5cd2      	ldrb	r2, [r2, r3]
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	3b02      	subs	r3, #2
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	440b      	add	r3, r1
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d102      	bne.n	80041aa <checkcrc16+0xea>
	{
		a = 1;
 80041a4:	2301      	movs	r3, #1
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	e001      	b.n	80041ae <checkcrc16+0xee>
	}
	else
	{
		a = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	76fb      	strb	r3, [r7, #27]
	}
	return a;
 80041ae:	7efb      	ldrb	r3, [r7, #27]
 80041b0:	46b5      	mov	sp, r6
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080041bc <unpack754_32>:
    return f;
}

// Chuyen float 32 bit sang so thuc
float unpack754_32( uint32_t floatingToIntValue )
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	 myfloat ieee754;
	 unsigned int mantissa = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
	 unsigned int exponent = 0 ;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
	 unsigned int sign = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

	 sign = NTH_BIT(floatingToIntValue, 31);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0fdb      	lsrs	r3, r3, #31
 80041d4:	60fb      	str	r3, [r7, #12]
	 for( int ix=0; ix<8; ix++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e00e      	b.n	80041fa <unpack754_32+0x3e>
	   exponent = (exponent | (NTH_BIT(floatingToIntValue, (30-ix))))<<1;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f1c3 031e 	rsb	r3, r3, #30
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	f003 0201 	and.w	r2, r3, #1
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<8; ix++)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b07      	cmp	r3, #7
 80041fe:	dded      	ble.n	80041dc <unpack754_32+0x20>
	 exponent = exponent>>1;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<23; ix++)
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e00e      	b.n	800422a <unpack754_32+0x6e>
	   mantissa = (mantissa | (NTH_BIT(floatingToIntValue, (22-ix))))<<1;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f1c3 0316 	rsb	r3, r3, #22
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
 8004218:	f003 0201 	and.w	r2, r3, #1
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
	 for( int ix=0; ix<23; ix++)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	3301      	adds	r3, #1
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b16      	cmp	r3, #22
 800422e:	dded      	ble.n	800420c <unpack754_32+0x50>
	 mantissa = mantissa >> 1;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	61fb      	str	r3, [r7, #28]

	 ieee754.raw.sign = sign;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	b2da      	uxtb	r2, r3
 800423e:	7afb      	ldrb	r3, [r7, #11]
 8004240:	f362 13c7 	bfi	r3, r2, #7, #1
 8004244:	72fb      	strb	r3, [r7, #11]
	 ieee754.raw.exponent = exponent;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	f362 13ce 	bfi	r3, r2, #7, #8
 8004250:	817b      	strh	r3, [r7, #10]
	 ieee754.raw.mantissa = mantissa;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f362 0316 	bfi	r3, r2, #0, #23
 800425e:	60bb      	str	r3, [r7, #8]
	 return ieee754.f;
 8004260:	68bb      	ldr	r3, [r7, #8]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3724      	adds	r7, #36	; 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <Send_Error_Status>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Status(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8004272:	23f0      	movs	r3, #240	; 0xf0
 8004274:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8004276:	2303      	movs	r3, #3
 8004278:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 800427a:	2302      	movs	r3, #2
 800427c:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	71fb      	strb	r3, [r7, #7]
	// 0x0200: Error Status Address

	TxData[4] = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 8004286:	2301      	movs	r3, #1
 8004288:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	2106      	movs	r1, #6
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fee0 	bl	8004054 <crc16>
 8004294:	4603      	mov	r3, r0
 8004296:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004298:	89fb      	ldrh	r3, [r7, #14]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800429e:	89fb      	ldrh	r3, [r7, #14]
 80042a0:	0a1b      	lsrs	r3, r3, #8
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80042a8:	1d39      	adds	r1, r7, #4
 80042aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ae:	2208      	movs	r2, #8
 80042b0:	4803      	ldr	r0, [pc, #12]	; (80042c0 <Send_Error_Status+0x54>)
 80042b2:	f7fe ff2a 	bl	800310a <HAL_UART_Transmit>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000248 	.word	0x20000248

080042c4 <Receive_Error_Status>:
uint32_t Receive_Error_Status(uint16_t data)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
	if (data == 0x01)
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <Receive_Error_Status+0x16>
		return No_Error;
 80042d4:	f240 73d1 	movw	r3, #2001	; 0x7d1
 80042d8:	e001      	b.n	80042de <Receive_Error_Status+0x1a>
	else
		return Have_Errors;
 80042da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <Send_Error_Code>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Code(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 80042ee:	23f0      	movs	r3, #240	; 0xf0
 80042f0:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80042f2:	2303      	movs	r3, #3
 80042f4:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 80042f6:	2302      	movs	r3, #2
 80042f8:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x03;
 80042fa:	2303      	movs	r3, #3
 80042fc:	71fb      	strb	r3, [r7, #7]
	// 0x0203: Error Code

	TxData[4] = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 8004302:	2302      	movs	r3, #2
 8004304:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	2106      	movs	r1, #6
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fea2 	bl	8004054 <crc16>
 8004310:	4603      	mov	r3, r0
 8004312:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004314:	89fb      	ldrh	r3, [r7, #14]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	b29b      	uxth	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004324:	1d39      	adds	r1, r7, #4
 8004326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800432a:	2208      	movs	r2, #8
 800432c:	4803      	ldr	r0, [pc, #12]	; (800433c <Send_Error_Code+0x54>)
 800432e:	f7fe feec 	bl	800310a <HAL_UART_Transmit>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000248 	.word	0x20000248

08004340 <Receive_Error_Code>:
uint32_t Receive_Error_Code(uint16_t data)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <Receive_Error_Code+0x16>
		return Status_OK;
 8004350:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004354:	e01f      	b.n	8004396 <Receive_Error_Code+0x56>
	else if (data == 0x01)
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <Receive_Error_Code+0x22>
		return Temp_Measur_Err;
 800435c:	f640 33b9 	movw	r3, #3001	; 0xbb9
 8004360:	e019      	b.n	8004396 <Receive_Error_Code+0x56>
	else if (data == 0x02)
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d102      	bne.n	800436e <Receive_Error_Code+0x2e>
		return Hum_Measur_Err;
 8004368:	f640 33ba 	movw	r3, #3002	; 0xbba
 800436c:	e013      	b.n	8004396 <Receive_Error_Code+0x56>
	else if (data == 0x04)
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d102      	bne.n	800437a <Receive_Error_Code+0x3a>
		return Humi_Sen_Fail;
 8004374:	f640 33bb 	movw	r3, #3003	; 0xbbb
 8004378:	e00d      	b.n	8004396 <Receive_Error_Code+0x56>
	else if (data == 0x08)
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d102      	bne.n	8004386 <Receive_Error_Code+0x46>
		return Capa_Re_Err;
 8004380:	f640 33bc 	movw	r3, #3004	; 0xbbc
 8004384:	e007      	b.n	8004396 <Receive_Error_Code+0x56>
	else if (data == 0x10)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d102      	bne.n	8004392 <Receive_Error_Code+0x52>
		return Temp_Out_Range;
 800438c:	f640 33bd 	movw	r3, #3005	; 0xbbd
 8004390:	e001      	b.n	8004396 <Receive_Error_Code+0x56>
	else
		return Sensor_Heat_Err;
 8004392:	f640 33be 	movw	r3, #3006	; 0xbbe

}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <Send_Error_Temp>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Temp(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 80043a6:	23f0      	movs	r3, #240	; 0xf0
 80043a8:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80043aa:	2303      	movs	r3, #3
 80043ac:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 80043ae:	2302      	movs	r3, #2
 80043b0:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x08;
 80043b2:	2308      	movs	r3, #8
 80043b4:	71fb      	strb	r3, [r7, #7]
	// T measurement status

	TxData[4] = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 80043ba:	2301      	movs	r3, #1
 80043bc:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	2106      	movs	r1, #6
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fe46 	bl	8004054 <crc16>
 80043c8:	4603      	mov	r3, r0
 80043ca:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80043d2:	89fb      	ldrh	r3, [r7, #14]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80043dc:	1d39      	adds	r1, r7, #4
 80043de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e2:	2208      	movs	r2, #8
 80043e4:	4803      	ldr	r0, [pc, #12]	; (80043f4 <Send_Error_Temp+0x54>)
 80043e6:	f7fe fe90 	bl	800310a <HAL_UART_Transmit>
}
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000248 	.word	0x20000248

080043f8 <Receive_Error_Temp>:
uint32_t Receive_Error_Temp(uint16_t data)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <Receive_Error_Temp+0x16>
		return Status_OK;
 8004408:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800440c:	e025      	b.n	800445a <Receive_Error_Temp+0x62>
	else if (data == 0x01)
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d102      	bne.n	800441a <Receive_Error_Temp+0x22>
		return Measur_Not_Avai;
 8004414:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8004418:	e01f      	b.n	800445a <Receive_Error_Temp+0x62>
	else if (data == 0x02)
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d102      	bne.n	8004426 <Receive_Error_Temp+0x2e>
		return Measur_Not_Reliable;
 8004420:	f640 73a2 	movw	r3, #4002	; 0xfa2
 8004424:	e019      	b.n	800445a <Receive_Error_Temp+0x62>
	else if (data == 0x04)
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d102      	bne.n	8004432 <Receive_Error_Temp+0x3a>
		return UnderRange;
 800442c:	f640 73a3 	movw	r3, #4003	; 0xfa3
 8004430:	e013      	b.n	800445a <Receive_Error_Temp+0x62>
	else if (data == 0x08)
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d102      	bne.n	800443e <Receive_Error_Temp+0x46>
		return Overrange;
 8004438:	f640 73a4 	movw	r3, #4004	; 0xfa4
 800443c:	e00d      	b.n	800445a <Receive_Error_Temp+0x62>
	else if (data == 0x20)
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d102      	bne.n	800444a <Receive_Error_Temp+0x52>
		return Value_Locked;
 8004444:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8004448:	e007      	b.n	800445a <Receive_Error_Temp+0x62>
	else if (data == 0x80)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d102      	bne.n	8004456 <Receive_Error_Temp+0x5e>
		return Sensor_Failure;
 8004450:	f640 73a6 	movw	r3, #4006	; 0xfa6
 8004454:	e001      	b.n	800445a <Receive_Error_Temp+0x62>
	else
		return Measur_Not_Ready;
 8004456:	f640 73a7 	movw	r3, #4007	; 0xfa7
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <Send_Error_RH>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_RH(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800446a:	23f0      	movs	r3, #240	; 0xf0
 800446c:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 800446e:	2303      	movs	r3, #3
 8004470:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 8004472:	2302      	movs	r3, #2
 8004474:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x07;
 8004476:	2307      	movs	r3, #7
 8004478:	71fb      	strb	r3, [r7, #7]
	// RH measurement status

	TxData[4] = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 800447e:	2301      	movs	r3, #1
 8004480:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2106      	movs	r1, #6
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fde4 	bl	8004054 <crc16>
 800448c:	4603      	mov	r3, r0
 800448e:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004490:	89fb      	ldrh	r3, [r7, #14]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	b29b      	uxth	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80044a0:	1d39      	adds	r1, r7, #4
 80044a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a6:	2208      	movs	r2, #8
 80044a8:	4803      	ldr	r0, [pc, #12]	; (80044b8 <Send_Error_RH+0x54>)
 80044aa:	f7fe fe2e 	bl	800310a <HAL_UART_Transmit>
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000248 	.word	0x20000248

080044bc <Receive_Error_RH>:
uint32_t Receive_Error_RH(uint16_t data)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <Receive_Error_RH+0x16>
		return Status_OK;
 80044cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80044d0:	e025      	b.n	800451e <Receive_Error_RH+0x62>
	else if (data == 0x01)
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d102      	bne.n	80044de <Receive_Error_RH+0x22>
		return Measur_Not_Avai;
 80044d8:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80044dc:	e01f      	b.n	800451e <Receive_Error_RH+0x62>
	else if (data == 0x02)
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d102      	bne.n	80044ea <Receive_Error_RH+0x2e>
		return Measur_Not_Reliable;
 80044e4:	f640 73a2 	movw	r3, #4002	; 0xfa2
 80044e8:	e019      	b.n	800451e <Receive_Error_RH+0x62>
	else if (data == 0x04)
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d102      	bne.n	80044f6 <Receive_Error_RH+0x3a>
		return UnderRange;
 80044f0:	f640 73a3 	movw	r3, #4003	; 0xfa3
 80044f4:	e013      	b.n	800451e <Receive_Error_RH+0x62>
	else if (data == 0x08)
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d102      	bne.n	8004502 <Receive_Error_RH+0x46>
		return Overrange;
 80044fc:	f640 73a4 	movw	r3, #4004	; 0xfa4
 8004500:	e00d      	b.n	800451e <Receive_Error_RH+0x62>
	else if (data == 0x20)
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	2b20      	cmp	r3, #32
 8004506:	d102      	bne.n	800450e <Receive_Error_RH+0x52>
		return Value_Locked;
 8004508:	f640 73a5 	movw	r3, #4005	; 0xfa5
 800450c:	e007      	b.n	800451e <Receive_Error_RH+0x62>
	else if (data == 0x80)
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d102      	bne.n	800451a <Receive_Error_RH+0x5e>
		return Sensor_Failure;
 8004514:	f640 73a6 	movw	r3, #4006	; 0xfa6
 8004518:	e001      	b.n	800451e <Receive_Error_RH+0x62>
	else
		return Measur_Not_Ready;
 800451a:	f640 73a7 	movw	r3, #4007	; 0xfa7
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <Send_Error_Device>:
/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Device(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800452e:	23f0      	movs	r3, #240	; 0xf0
 8004530:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8004532:	2303      	movs	r3, #3
 8004534:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 8004536:	2302      	movs	r3, #2
 8004538:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x0A;
 800453a:	230a      	movs	r3, #10
 800453c:	71fb      	strb	r3, [r7, #7]
	//Error Device

	TxData[4] = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 8004542:	2301      	movs	r3, #1
 8004544:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	2106      	movs	r1, #6
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fd82 	bl	8004054 <crc16>
 8004550:	4603      	mov	r3, r0
 8004552:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800455a:	89fb      	ldrh	r3, [r7, #14]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	b29b      	uxth	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004564:	1d39      	adds	r1, r7, #4
 8004566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456a:	2208      	movs	r2, #8
 800456c:	4803      	ldr	r0, [pc, #12]	; (800457c <Send_Error_Device+0x54>)
 800456e:	f7fe fdcc 	bl	800310a <HAL_UART_Transmit>
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000248 	.word	0x20000248

08004580 <Receive_Error_Device>:
uint32_t Receive_Error_Device(uint16_t data)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <Receive_Error_Device+0x16>
		return Status_OK;
 8004590:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004594:	e019      	b.n	80045ca <Receive_Error_Device+0x4a>
	else if (data == 0x01)
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <Receive_Error_Device+0x22>
		return Need_Maintance;
 800459c:	f241 3388 	movw	r3, #5000	; 0x1388
 80045a0:	e013      	b.n	80045ca <Receive_Error_Device+0x4a>
	else if (data == 0x02)
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d102      	bne.n	80045ae <Receive_Error_Device+0x2e>
		return Recover_Auto;
 80045a8:	f241 3389 	movw	r3, #5001	; 0x1389
 80045ac:	e00d      	b.n	80045ca <Receive_Error_Device+0x4a>
	else if (data == 0x04)
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d102      	bne.n	80045ba <Receive_Error_Device+0x3a>
		return Warning;
 80045b4:	f241 338a 	movw	r3, #5002	; 0x138a
 80045b8:	e007      	b.n	80045ca <Receive_Error_Device+0x4a>
	else if (data == 0x08)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d102      	bne.n	80045c6 <Receive_Error_Device+0x46>
		return Notification;
 80045c0:	f241 338b 	movw	r3, #5003	; 0x138b
 80045c4:	e001      	b.n	80045ca <Receive_Error_Device+0x4a>
	else
		return Calib_Mode_Active;
 80045c6:	f241 338c 	movw	r3, #5004	; 0x138c
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <Read_Temp>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Read_Temp(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 80045da:	23f0      	movs	r3, #240	; 0xf0
 80045dc:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80045de:	2303      	movs	r3, #3
 80045e0:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x02;
 80045e6:	2302      	movs	r3, #2
 80045e8:	71fb      	strb	r3, [r7, #7]
	//  Temp Address

	TxData[4] = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 80045ee:	2302      	movs	r3, #2
 80045f0:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	2106      	movs	r1, #6
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fd2c 	bl	8004054 <crc16>
 80045fc:	4603      	mov	r3, r0
 80045fe:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8004606:	89fb      	ldrh	r3, [r7, #14]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	b29b      	uxth	r3, r3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004610:	1d39      	adds	r1, r7, #4
 8004612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004616:	2208      	movs	r2, #8
 8004618:	4803      	ldr	r0, [pc, #12]	; (8004628 <Read_Temp+0x54>)
 800461a:	f7fe fd76 	bl	800310a <HAL_UART_Transmit>
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000248 	.word	0x20000248

0800462c <Read_Water>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Read_Water(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8004632:	23f0      	movs	r3, #240	; 0xf0
 8004634:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8004636:	2303      	movs	r3, #3
 8004638:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x22;
 800463e:	2322      	movs	r3, #34	; 0x22
 8004640:	71fb      	strb	r3, [r7, #7]
	// Ham luong nuoc trong dau

	TxData[4] = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 8004646:	2302      	movs	r3, #2
 8004648:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 800464a:	1d3b      	adds	r3, r7, #4
 800464c:	2106      	movs	r1, #6
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fd00 	bl	8004054 <crc16>
 8004654:	4603      	mov	r3, r0
 8004656:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	b29b      	uxth	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8004668:	1d39      	adds	r1, r7, #4
 800466a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800466e:	2208      	movs	r2, #8
 8004670:	4803      	ldr	r0, [pc, #12]	; (8004680 <Read_Water+0x54>)
 8004672:	f7fe fd4a 	bl	800310a <HAL_UART_Transmit>
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000248 	.word	0x20000248

08004684 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468a:	f3ef 8305 	mrs	r3, IPSR
 800468e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004690:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004696:	f3ef 8310 	mrs	r3, PRIMASK
 800469a:	607b      	str	r3, [r7, #4]
  return(result);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <osKernelInitialize+0x32>
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <osKernelInitialize+0x60>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d109      	bne.n	80046be <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046aa:	f3ef 8311 	mrs	r3, BASEPRI
 80046ae:	603b      	str	r3, [r7, #0]
  return(result);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046b6:	f06f 0305 	mvn.w	r3, #5
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e00c      	b.n	80046d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <osKernelInitialize+0x60>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <osKernelInitialize+0x60>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e002      	b.n	80046d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046d8:	68fb      	ldr	r3, [r7, #12]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	200003c4 	.word	0x200003c4

080046e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ee:	f3ef 8305 	mrs	r3, IPSR
 80046f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80046f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fa:	f3ef 8310 	mrs	r3, PRIMASK
 80046fe:	607b      	str	r3, [r7, #4]
  return(result);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <osKernelStart+0x32>
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <osKernelStart+0x64>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d109      	bne.n	8004722 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470e:	f3ef 8311 	mrs	r3, BASEPRI
 8004712:	603b      	str	r3, [r7, #0]
  return(result);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <osKernelStart+0x3a>
    stat = osErrorISR;
 800471a:	f06f 0305 	mvn.w	r3, #5
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e00e      	b.n	8004740 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <osKernelStart+0x64>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <osKernelStart+0x64>)
 800472c:	2202      	movs	r2, #2
 800472e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004730:	f001 fc58 	bl	8005fe4 <vTaskStartScheduler>
      stat = osOK;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e002      	b.n	8004740 <osKernelStart+0x58>
    } else {
      stat = osError;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004740:	68fb      	ldr	r3, [r7, #12]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200003c4 	.word	0x200003c4

08004750 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b092      	sub	sp, #72	; 0x48
 8004754:	af04      	add	r7, sp, #16
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004760:	f3ef 8305 	mrs	r3, IPSR
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 8094 	bne.w	8004896 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	623b      	str	r3, [r7, #32]
  return(result);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 808d 	bne.w	8004896 <osThreadNew+0x146>
 800477c:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <osThreadNew+0x150>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d106      	bne.n	8004792 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004784:	f3ef 8311 	mrs	r3, BASEPRI
 8004788:	61fb      	str	r3, [r7, #28]
  return(result);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f040 8082 	bne.w	8004896 <osThreadNew+0x146>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d07e      	beq.n	8004896 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800479c:	2318      	movs	r3, #24
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80047a0:	2300      	movs	r3, #0
 80047a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80047a4:	f107 031b 	add.w	r3, r7, #27
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d045      	beq.n	8004842 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <osThreadNew+0x74>
        name = attr->name;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <osThreadNew+0x9a>
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	2b38      	cmp	r3, #56	; 0x38
 80047dc:	d805      	bhi.n	80047ea <osThreadNew+0x9a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <osThreadNew+0x9e>
        return (NULL);
 80047ea:	2300      	movs	r3, #0
 80047ec:	e054      	b.n	8004898 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <osThreadNew+0xd4>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2bbb      	cmp	r3, #187	; 0xbb
 800480c:	d90a      	bls.n	8004824 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <osThreadNew+0xd4>
        mem = 1;
 800481e:	2301      	movs	r3, #1
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	e010      	b.n	8004846 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10c      	bne.n	8004846 <osThreadNew+0xf6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d108      	bne.n	8004846 <osThreadNew+0xf6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <osThreadNew+0xf6>
          mem = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004840:	e001      	b.n	8004846 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	2b01      	cmp	r3, #1
 800484a:	d110      	bne.n	800486e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004854:	9202      	str	r2, [sp, #8]
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004860:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f001 f9da 	bl	8005c1c <xTaskCreateStatic>
 8004868:	4603      	mov	r3, r0
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	e013      	b.n	8004896 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	b29a      	uxth	r2, r3
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f001 fa24 	bl	8005cd4 <xTaskCreate>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d001      	beq.n	8004896 <osThreadNew+0x146>
          hTask = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004896:	697b      	ldr	r3, [r7, #20]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3738      	adds	r7, #56	; 0x38
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	200003c4 	.word	0x200003c4

080048a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ac:	f3ef 8305 	mrs	r3, IPSR
 80048b0:	613b      	str	r3, [r7, #16]
  return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10f      	bne.n	80048d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b8:	f3ef 8310 	mrs	r3, PRIMASK
 80048bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <osDelay+0x34>
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <osDelay+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d109      	bne.n	80048e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048cc:	f3ef 8311 	mrs	r3, BASEPRI
 80048d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <osDelay+0x3c>
    stat = osErrorISR;
 80048d8:	f06f 0305 	mvn.w	r3, #5
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e007      	b.n	80048f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f001 fb46 	bl	8005f7c <vTaskDelay>
    }
  }

  return (stat);
 80048f0:	697b      	ldr	r3, [r7, #20]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200003c4 	.word	0x200003c4

08004900 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b08c      	sub	sp, #48	; 0x30
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004910:	f3ef 8305 	mrs	r3, IPSR
 8004914:	61bb      	str	r3, [r7, #24]
  return(result);
 8004916:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004918:	2b00      	cmp	r3, #0
 800491a:	f040 8086 	bne.w	8004a2a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8310 	mrs	r3, PRIMASK
 8004922:	617b      	str	r3, [r7, #20]
  return(result);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d17f      	bne.n	8004a2a <osSemaphoreNew+0x12a>
 800492a:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <osSemaphoreNew+0x134>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d105      	bne.n	800493e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004932:	f3ef 8311 	mrs	r3, BASEPRI
 8004936:	613b      	str	r3, [r7, #16]
  return(result);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d175      	bne.n	8004a2a <osSemaphoreNew+0x12a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d072      	beq.n	8004a2a <osSemaphoreNew+0x12a>
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	429a      	cmp	r2, r3
 800494a:	d86e      	bhi.n	8004a2a <osSemaphoreNew+0x12a>
    mem = -1;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <osSemaphoreNew+0x6e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b4f      	cmp	r3, #79	; 0x4f
 8004966:	d902      	bls.n	800496e <osSemaphoreNew+0x6e>
        mem = 1;
 8004968:	2301      	movs	r3, #1
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	e00c      	b.n	8004988 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <osSemaphoreNew+0x88>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <osSemaphoreNew+0x88>
          mem = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	e001      	b.n	8004988 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d04c      	beq.n	8004a2a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d128      	bne.n	80049e8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10a      	bne.n	80049b2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2203      	movs	r2, #3
 80049a2:	9200      	str	r2, [sp, #0]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	2001      	movs	r0, #1
 80049aa:	f000 fa15 	bl	8004dd8 <xQueueGenericCreateStatic>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24
 80049b0:	e005      	b.n	80049be <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80049b2:	2203      	movs	r2, #3
 80049b4:	2100      	movs	r1, #0
 80049b6:	2001      	movs	r0, #1
 80049b8:	f000 fa85 	bl	8004ec6 <xQueueGenericCreate>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d022      	beq.n	8004a0a <osSemaphoreNew+0x10a>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01f      	beq.n	8004a0a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	2200      	movs	r2, #0
 80049ce:	2100      	movs	r1, #0
 80049d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d2:	f000 fb43 	bl	800505c <xQueueGenericSend>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d016      	beq.n	8004a0a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80049dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049de:	f000 ff4d 	bl	800587c <vQueueDelete>
            hSemaphore = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e010      	b.n	8004a0a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d108      	bne.n	8004a00 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fac6 	bl	8004f88 <xQueueCreateCountingSemaphoreStatic>
 80049fc:	6278      	str	r0, [r7, #36]	; 0x24
 80049fe:	e004      	b.n	8004a0a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 faf7 	bl	8004ff6 <xQueueCreateCountingSemaphore>
 8004a08:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <osSemaphoreNew+0x11e>
          name = attr->name;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e001      	b.n	8004a22 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a22:	69f9      	ldr	r1, [r7, #28]
 8004a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a26:	f001 f873 	bl	8005b10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200003c4 	.word	0x200003c4

08004a38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	; 0x30
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a48:	f3ef 8305 	mrs	r3, IPSR
 8004a4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a4e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d16f      	bne.n	8004b34 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	617b      	str	r3, [r7, #20]
  return(result);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d169      	bne.n	8004b34 <osMessageQueueNew+0xfc>
 8004a60:	4b37      	ldr	r3, [pc, #220]	; (8004b40 <osMessageQueueNew+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d105      	bne.n	8004a74 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a68:	f3ef 8311 	mrs	r3, BASEPRI
 8004a6c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d15f      	bne.n	8004b34 <osMessageQueueNew+0xfc>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d05c      	beq.n	8004b34 <osMessageQueueNew+0xfc>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d059      	beq.n	8004b34 <osMessageQueueNew+0xfc>
    mem = -1;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
 8004a84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d029      	beq.n	8004ae0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <osMessageQueueNew+0x82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b4f      	cmp	r3, #79	; 0x4f
 8004a9a:	d90e      	bls.n	8004aba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <osMessageQueueNew+0x82>
        mem = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	e014      	b.n	8004ae4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d110      	bne.n	8004ae4 <osMessageQueueNew+0xac>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d104      	bne.n	8004ae4 <osMessageQueueNew+0xac>
          mem = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e001      	b.n	8004ae4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10b      	bne.n	8004b02 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2100      	movs	r1, #0
 8004af4:	9100      	str	r1, [sp, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f96d 	bl	8004dd8 <xQueueGenericCreateStatic>
 8004afe:	6278      	str	r0, [r7, #36]	; 0x24
 8004b00:	e008      	b.n	8004b14 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f9da 	bl	8004ec6 <xQueueGenericCreate>
 8004b12:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e001      	b.n	8004b2c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b2c:	69f9      	ldr	r1, [r7, #28]
 8004b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b30:	f000 ffee 	bl	8005b10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200003c4 	.word	0x200003c4

08004b44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a06      	ldr	r2, [pc, #24]	; (8004b6c <vApplicationGetIdleTaskMemory+0x28>)
 8004b54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4a05      	ldr	r2, [pc, #20]	; (8004b70 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	601a      	str	r2, [r3, #0]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	200003c8 	.word	0x200003c8
 8004b70:	20000484 	.word	0x20000484

08004b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8004b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000684 	.word	0x20000684
 8004ba4:	20000740 	.word	0x20000740

08004ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0208 	add.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f103 0208 	add.w	r2, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f103 0208 	add.w	r2, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d103      	bne.n	8004c64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e00c      	b.n	8004c7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3308      	adds	r3, #8
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e002      	b.n	8004c72 <vListInsert+0x2e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d2f6      	bcs.n	8004c6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d103      	bne.n	8004ce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d32:	f002 fba3 	bl	800747c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	3b01      	subs	r3, #1
 8004d64:	68f9      	ldr	r1, [r7, #12]
 8004d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	441a      	add	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	22ff      	movs	r2, #255	; 0xff
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d114      	bne.n	8004db2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3310      	adds	r3, #16
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fbc1 	bl	800651c <xTaskRemoveFromEventList>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <xQueueGenericReset+0xcc>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	e009      	b.n	8004dc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fef6 	bl	8004ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3324      	adds	r3, #36	; 0x24
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fef1 	bl	8004ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dc6:	f002 fb89 	bl	80074dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dca:	2301      	movs	r3, #1
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	; 0x38
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <xQueueGenericCreateStatic+0x52>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <xQueueGenericCreateStatic+0x56>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <xQueueGenericCreateStatic+0x58>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	623b      	str	r3, [r7, #32]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xQueueGenericCreateStatic+0x7e>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xQueueGenericCreateStatic+0x82>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueGenericCreateStatic+0x84>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	61fb      	str	r3, [r7, #28]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e76:	2350      	movs	r3, #80	; 0x50
 8004e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d00a      	beq.n	8004e96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61bb      	str	r3, [r7, #24]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f843 	bl	8004f42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	; 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08a      	sub	sp, #40	; 0x28
 8004eca:	af02      	add	r7, sp, #8
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	613b      	str	r3, [r7, #16]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e004      	b.n	8004f06 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
 8004f04:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3350      	adds	r3, #80	; 0x50
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 fbb6 	bl	800767c <pvPortMalloc>
 8004f10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00f      	beq.n	8004f38 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3350      	adds	r3, #80	; 0x50
 8004f1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f26:	79fa      	ldrb	r2, [r7, #7]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f805 	bl	8004f42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f38:	69bb      	ldr	r3, [r7, #24]
	}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e002      	b.n	8004f64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f70:	2101      	movs	r1, #1
 8004f72:	69b8      	ldr	r0, [r7, #24]
 8004f74:	f7ff fec8 	bl	8004d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	61bb      	str	r3, [r7, #24]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d90a      	bls.n	8004fce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	617b      	str	r3, [r7, #20]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fce:	2302      	movs	r3, #2
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fefd 	bl	8004dd8 <xQueueGenericCreateStatic>
 8004fde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fec:	69fb      	ldr	r3, [r7, #28]
	}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	613b      	str	r3, [r7, #16]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d90a      	bls.n	800503a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800503a:	2202      	movs	r2, #2
 800503c:	2100      	movs	r1, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ff41 	bl	8004ec6 <xQueueGenericCreate>
 8005044:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005052:	697b      	ldr	r3, [r7, #20]
	}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	; 0x38
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xQueueGenericSend+0x32>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <xQueueGenericSend+0x40>
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <xQueueGenericSend+0x44>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <xQueueGenericSend+0x46>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <xQueueGenericSend+0x60>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d103      	bne.n	80050ca <xQueueGenericSend+0x6e>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <xQueueGenericSend+0x72>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueGenericSend+0x74>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xQueueGenericSend+0x8e>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ea:	f001 fbdd 	bl	80068a8 <xTaskGetSchedulerState>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <xQueueGenericSend+0x9e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <xQueueGenericSend+0xa2>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueGenericSend+0xa4>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericSend+0xbe>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	61fb      	str	r3, [r7, #28]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800511a:	f002 f9af 	bl	800747c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <xQueueGenericSend+0xd4>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d129      	bne.n	8005184 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005136:	f000 fbdb 	bl	80058f0 <prvCopyDataToQueue>
 800513a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	3324      	adds	r3, #36	; 0x24
 8005148:	4618      	mov	r0, r3
 800514a:	f001 f9e7 	bl	800651c <xTaskRemoveFromEventList>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005154:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <xQueueGenericSend+0x1f8>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	e00a      	b.n	800517c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800516c:	4b39      	ldr	r3, [pc, #228]	; (8005254 <xQueueGenericSend+0x1f8>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800517c:	f002 f9ae 	bl	80074dc <vPortExitCritical>
				return pdPASS;
 8005180:	2301      	movs	r3, #1
 8005182:	e063      	b.n	800524c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800518a:	f002 f9a7 	bl	80074dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800518e:	2300      	movs	r3, #0
 8005190:	e05c      	b.n	800524c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fa21 	bl	80065e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051a6:	f002 f999 	bl	80074dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051aa:	f000 ff8b 	bl	80060c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ae:	f002 f965 	bl	800747c <vPortEnterCritical>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d103      	bne.n	80051c8 <xQueueGenericSend+0x16c>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d103      	bne.n	80051de <xQueueGenericSend+0x182>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051de:	f002 f97d 	bl	80074dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051e2:	1d3a      	adds	r2, r7, #4
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fa10 	bl	8006610 <xTaskCheckForTimeOut>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d124      	bne.n	8005240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f8:	f000 fc72 	bl	8005ae0 <prvIsQueueFull>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	3310      	adds	r3, #16
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f001 f936 	bl	800647c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005212:	f000 fbfd 	bl	8005a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005216:	f000 ff63 	bl	80060e0 <xTaskResumeAll>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f47f af7c 	bne.w	800511a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <xQueueGenericSend+0x1f8>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	e772      	b.n	800511a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 fbeb 	bl	8005a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800523a:	f000 ff51 	bl	80060e0 <xTaskResumeAll>
 800523e:	e76c      	b.n	800511a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005242:	f000 fbe5 	bl	8005a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005246:	f000 ff4b 	bl	80060e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800524a:	2300      	movs	r3, #0
		}
	}
}
 800524c:	4618      	mov	r0, r3
 800524e:	3738      	adds	r7, #56	; 0x38
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08e      	sub	sp, #56	; 0x38
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <xQueueGenericSendFromISR+0x3c>
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <xQueueGenericSendFromISR+0x40>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <xQueueGenericSendFromISR+0x42>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	623b      	str	r3, [r7, #32]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSendFromISR+0x6a>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericSendFromISR+0x6e>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericSendFromISR+0x70>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	61fb      	str	r3, [r7, #28]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052e2:	f002 f98d 	bl	8007600 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052e6:	f3ef 8211 	mrs	r2, BASEPRI
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	61ba      	str	r2, [r7, #24]
 80052fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <xQueueGenericSendFromISR+0xbc>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d12c      	bne.n	800536e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005324:	f000 fae4 	bl	80058f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005328:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d112      	bne.n	8005358 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f001 f8ec 	bl	800651c <xTaskRemoveFromEventList>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e007      	b.n	8005368 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800535c:	3301      	adds	r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	b25a      	sxtb	r2, r3
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005368:	2301      	movs	r3, #1
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800536c:	e001      	b.n	8005372 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800537c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005380:	4618      	mov	r0, r3
 8005382:	3738      	adds	r7, #56	; 0x38
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	623b      	str	r3, [r7, #32]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	61fb      	str	r3, [r7, #28]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <xQueueGiveFromISR+0x58>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <xQueueGiveFromISR+0x5c>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <xQueueGiveFromISR+0x5e>
 80053e4:	2300      	movs	r3, #0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <xQueueGiveFromISR+0x78>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	61bb      	str	r3, [r7, #24]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005400:	f002 f8fe 	bl	8007600 <vPortValidateInterruptPriority>
	__asm volatile
 8005404:	f3ef 8211 	mrs	r2, BASEPRI
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	617a      	str	r2, [r7, #20]
 800541a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800541c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	429a      	cmp	r2, r3
 800542e:	d22b      	bcs.n	8005488 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005442:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d112      	bne.n	8005472 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f001 f85f 	bl	800651c <xTaskRemoveFromEventList>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00e      	beq.n	8005482 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e007      	b.n	8005482 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005476:	3301      	adds	r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	b25a      	sxtb	r2, r3
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005482:	2301      	movs	r3, #1
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	e001      	b.n	800548c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005488:	2300      	movs	r3, #0
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f383 8811 	msr	BASEPRI, r3
}
 8005496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800549a:	4618      	mov	r0, r3
 800549c:	3738      	adds	r7, #56	; 0x38
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <xQueueReceive+0x30>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	623b      	str	r3, [r7, #32]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <xQueueReceive+0x3e>
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <xQueueReceive+0x42>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <xQueueReceive+0x44>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueReceive+0x5e>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61fb      	str	r3, [r7, #28]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005502:	f001 f9d1 	bl	80068a8 <xTaskGetSchedulerState>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <xQueueReceive+0x6e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueReceive+0x72>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueReceive+0x74>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueReceive+0x8e>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61bb      	str	r3, [r7, #24]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005532:	f001 ffa3 	bl	800747c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01f      	beq.n	8005582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f000 fa3d 	bl	80059c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00f      	beq.n	800557a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	3310      	adds	r3, #16
 800555e:	4618      	mov	r0, r3
 8005560:	f000 ffdc 	bl	800651c <xTaskRemoveFromEventList>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800556a:	4b3d      	ldr	r3, [pc, #244]	; (8005660 <xQueueReceive+0x1bc>)
 800556c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800557a:	f001 ffaf 	bl	80074dc <vPortExitCritical>
				return pdPASS;
 800557e:	2301      	movs	r3, #1
 8005580:	e069      	b.n	8005656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005588:	f001 ffa8 	bl	80074dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800558c:	2300      	movs	r3, #0
 800558e:	e062      	b.n	8005656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005596:	f107 0310 	add.w	r3, r7, #16
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f822 	bl	80065e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a4:	f001 ff9a 	bl	80074dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055a8:	f000 fd8c 	bl	80060c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ac:	f001 ff66 	bl	800747c <vPortEnterCritical>
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b6:	b25b      	sxtb	r3, r3
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d103      	bne.n	80055c6 <xQueueReceive+0x122>
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d103      	bne.n	80055dc <xQueueReceive+0x138>
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055dc:	f001 ff7e 	bl	80074dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e0:	1d3a      	adds	r2, r7, #4
 80055e2:	f107 0310 	add.w	r3, r7, #16
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f811 	bl	8006610 <xTaskCheckForTimeOut>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d123      	bne.n	800563c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f000 fa5d 	bl	8005ab4 <prvIsQueueEmpty>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	3324      	adds	r3, #36	; 0x24
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ff37 	bl	800647c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800560e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005610:	f000 f9fe 	bl	8005a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005614:	f000 fd64 	bl	80060e0 <xTaskResumeAll>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d189      	bne.n	8005532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xQueueReceive+0x1bc>)
 8005620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	e780      	b.n	8005532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005632:	f000 f9ed 	bl	8005a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005636:	f000 fd53 	bl	80060e0 <xTaskResumeAll>
 800563a:	e77a      	b.n	8005532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800563c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563e:	f000 f9e7 	bl	8005a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005642:	f000 fd4d 	bl	80060e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005648:	f000 fa34 	bl	8005ab4 <prvIsQueueEmpty>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	f43f af6f 	beq.w	8005532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005656:	4618      	mov	r0, r3
 8005658:	3730      	adds	r7, #48	; 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08e      	sub	sp, #56	; 0x38
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	623b      	str	r3, [r7, #32]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	61fb      	str	r3, [r7, #28]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056b4:	f001 f8f8 	bl	80068a8 <xTaskGetSchedulerState>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <xQueueSemaphoreTake+0x60>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueSemaphoreTake+0x64>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueSemaphoreTake+0x66>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61bb      	str	r3, [r7, #24]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056e4:	f001 feca 	bl	800747c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d024      	beq.n	800573e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005704:	f001 fa50 	bl	8006ba8 <pvTaskIncrementMutexHeldCount>
 8005708:	4602      	mov	r2, r0
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00f      	beq.n	8005736 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	3310      	adds	r3, #16
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fefe 	bl	800651c <xTaskRemoveFromEventList>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005726:	4b54      	ldr	r3, [pc, #336]	; (8005878 <xQueueSemaphoreTake+0x214>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005736:	f001 fed1 	bl	80074dc <vPortExitCritical>
				return pdPASS;
 800573a:	2301      	movs	r3, #1
 800573c:	e097      	b.n	800586e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d111      	bne.n	8005768 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	617b      	str	r3, [r7, #20]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005760:	f001 febc 	bl	80074dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005764:	2300      	movs	r3, #0
 8005766:	e082      	b.n	800586e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff36 	bl	80065e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577c:	f001 feae 	bl	80074dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005780:	f000 fca0 	bl	80060c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005784:	f001 fe7a 	bl	800747c <vPortEnterCritical>
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578e:	b25b      	sxtb	r3, r3
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d103      	bne.n	800579e <xQueueSemaphoreTake+0x13a>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d103      	bne.n	80057b4 <xQueueSemaphoreTake+0x150>
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b4:	f001 fe92 	bl	80074dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b8:	463a      	mov	r2, r7
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 ff25 	bl	8006610 <xTaskCheckForTimeOut>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d132      	bne.n	8005832 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057ce:	f000 f971 	bl	8005ab4 <prvIsQueueEmpty>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d026      	beq.n	8005826 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80057e0:	f001 fe4c 	bl	800747c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f87b 	bl	80068e4 <xTaskPriorityInherit>
 80057ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057f0:	f001 fe74 	bl	80074dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fe3d 	bl	800647c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005804:	f000 f904 	bl	8005a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005808:	f000 fc6a 	bl	80060e0 <xTaskResumeAll>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	f47f af68 	bne.w	80056e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xQueueSemaphoreTake+0x214>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	e75e      	b.n	80056e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005828:	f000 f8f2 	bl	8005a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800582c:	f000 fc58 	bl	80060e0 <xTaskResumeAll>
 8005830:	e758      	b.n	80056e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005834:	f000 f8ec 	bl	8005a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005838:	f000 fc52 	bl	80060e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800583c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800583e:	f000 f939 	bl	8005ab4 <prvIsQueueEmpty>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	f43f af4d 	beq.w	80056e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005850:	f001 fe14 	bl	800747c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005856:	f000 f834 	bl	80058c2 <prvGetDisinheritPriorityAfterTimeout>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f001 f91a 	bl	8006a9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005868:	f001 fe38 	bl	80074dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800586c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800586e:	4618      	mov	r0, r3
 8005870:	3738      	adds	r7, #56	; 0x38
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <vQueueDelete+0x28>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	60bb      	str	r3, [r7, #8]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f95b 	bl	8005b60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f001 ffa5 	bl	8007804 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e001      	b.n	80058e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80058e4:	68fb      	ldr	r3, [r7, #12]
	}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d14d      	bne.n	80059b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4618      	mov	r0, r3
 800591c:	f001 f850 	bl	80069c0 <xTaskPriorityDisinherit>
 8005920:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]
 8005928:	e043      	b.n	80059b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d119      	bne.n	8005964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6898      	ldr	r0, [r3, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	461a      	mov	r2, r3
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	f002 f999 	bl	8007c72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	441a      	add	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d32b      	bcc.n	80059b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	e026      	b.n	80059b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68d8      	ldr	r0, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	461a      	mov	r2, r3
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	f002 f97f 	bl	8007c72 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	425b      	negs	r3, r3
 800597e:	441a      	add	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d207      	bcs.n	80059a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	425b      	negs	r3, r3
 800599a:	441a      	add	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d105      	bne.n	80059b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059ba:	697b      	ldr	r3, [r7, #20]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	441a      	add	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d303      	bcc.n	80059f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68d9      	ldr	r1, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	461a      	mov	r2, r3
 8005a02:	6838      	ldr	r0, [r7, #0]
 8005a04:	f002 f935 	bl	8007c72 <memcpy>
	}
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a18:	f001 fd30 	bl	800747c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a24:	e011      	b.n	8005a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3324      	adds	r3, #36	; 0x24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fd72 	bl	800651c <xTaskRemoveFromEventList>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a3e:	f000 fe49 	bl	80066d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dce9      	bgt.n	8005a26 <prvUnlockQueue+0x16>
 8005a52:	e000      	b.n	8005a56 <prvUnlockQueue+0x46>
					break;
 8005a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a5e:	f001 fd3d 	bl	80074dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a62:	f001 fd0b 	bl	800747c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a6e:	e011      	b.n	8005a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d012      	beq.n	8005a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3310      	adds	r3, #16
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fd4d 	bl	800651c <xTaskRemoveFromEventList>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a88:	f000 fe24 	bl	80066d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dce9      	bgt.n	8005a70 <prvUnlockQueue+0x60>
 8005a9c:	e000      	b.n	8005aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	22ff      	movs	r2, #255	; 0xff
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005aa8:	f001 fd18 	bl	80074dc <vPortExitCritical>
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005abc:	f001 fcde 	bl	800747c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e001      	b.n	8005ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ad2:	f001 fd03 	bl	80074dc <vPortExitCritical>

	return xReturn;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae8:	f001 fcc8 	bl	800747c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d102      	bne.n	8005afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	e001      	b.n	8005b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b02:	f001 fceb 	bl	80074dc <vPortExitCritical>

	return xReturn;
 8005b06:	68fb      	ldr	r3, [r7, #12]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e014      	b.n	8005b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b20:	4a0e      	ldr	r2, [pc, #56]	; (8005b5c <vQueueAddToRegistry+0x4c>)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b2c:	490b      	ldr	r1, [pc, #44]	; (8005b5c <vQueueAddToRegistry+0x4c>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b36:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <vQueueAddToRegistry+0x4c>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b42:	e006      	b.n	8005b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b07      	cmp	r3, #7
 8005b4e:	d9e7      	bls.n	8005b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	20000b40 	.word	0x20000b40

08005b60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e016      	b.n	8005b9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <vQueueUnregisterQueue+0x50>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d10b      	bne.n	8005b96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <vQueueUnregisterQueue+0x50>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2100      	movs	r1, #0
 8005b84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005b88:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <vQueueUnregisterQueue+0x50>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	2200      	movs	r2, #0
 8005b92:	605a      	str	r2, [r3, #4]
				break;
 8005b94:	e006      	b.n	8005ba4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b07      	cmp	r3, #7
 8005ba0:	d9e5      	bls.n	8005b6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000b40 	.word	0x20000b40

08005bb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bc4:	f001 fc5a 	bl	800747c <vPortEnterCritical>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bce:	b25b      	sxtb	r3, r3
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d103      	bne.n	8005bde <vQueueWaitForMessageRestricted+0x2a>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be4:	b25b      	sxtb	r3, r3
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d103      	bne.n	8005bf4 <vQueueWaitForMessageRestricted+0x40>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf4:	f001 fc72 	bl	80074dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3324      	adds	r3, #36	; 0x24
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fc5b 	bl	80064c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f7ff fefe 	bl	8005a10 <prvUnlockQueue>
	}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af04      	add	r7, sp, #16
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	623b      	str	r3, [r7, #32]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	61fb      	str	r3, [r7, #28]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c62:	23bc      	movs	r3, #188	; 0xbc
 8005c64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2bbc      	cmp	r3, #188	; 0xbc
 8005c6a:	d00a      	beq.n	8005c82 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	61bb      	str	r3, [r7, #24]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01e      	beq.n	8005cc6 <xTaskCreateStatic+0xaa>
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01b      	beq.n	8005cc6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9303      	str	r3, [sp, #12]
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f851 	bl	8005d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cc0:	f000 f8ec 	bl	8005e9c <prvAddNewTaskToReadyList>
 8005cc4:	e001      	b.n	8005cca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cca:	697b      	ldr	r3, [r7, #20]
	}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3728      	adds	r7, #40	; 0x28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08c      	sub	sp, #48	; 0x30
 8005cd8:	af04      	add	r7, sp, #16
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 fcc7 	bl	800767c <pvPortMalloc>
 8005cee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00e      	beq.n	8005d14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005cf6:	20bc      	movs	r0, #188	; 0xbc
 8005cf8:	f001 fcc0 	bl	800767c <pvPortMalloc>
 8005cfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30
 8005d0a:	e005      	b.n	8005d18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d0c:	6978      	ldr	r0, [r7, #20]
 8005d0e:	f001 fd79 	bl	8007804 <vPortFree>
 8005d12:	e001      	b.n	8005d18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d017      	beq.n	8005d4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	9302      	str	r3, [sp, #8]
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f80f 	bl	8005d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d42:	69f8      	ldr	r0, [r7, #28]
 8005d44:	f000 f8aa 	bl	8005e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e002      	b.n	8005d54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d54:	69bb      	ldr	r3, [r7, #24]
	}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	461a      	mov	r2, r3
 8005d78:	21a5      	movs	r1, #165	; 0xa5
 8005d7a:	f001 ff88 	bl	8007c8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f023 0307 	bic.w	r3, r3, #7
 8005d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	617b      	str	r3, [r7, #20]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db8:	2300      	movs	r3, #0
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e012      	b.n	8005de4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	7819      	ldrb	r1, [r3, #0]
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3334      	adds	r3, #52	; 0x34
 8005dce:	460a      	mov	r2, r1
 8005dd0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3301      	adds	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d9e9      	bls.n	8005dbe <prvInitialiseNewTask+0x5e>
 8005dea:	e000      	b.n	8005dee <prvInitialiseNewTask+0x8e>
		{
			break;
 8005dec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	2b37      	cmp	r3, #55	; 0x37
 8005dfa:	d901      	bls.n	8005e00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dfc:	2337      	movs	r3, #55	; 0x37
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2200      	movs	r2, #0
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fee5 	bl	8004be6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	3318      	adds	r3, #24
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe fee0 	bl	8004be6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	3354      	adds	r3, #84	; 0x54
 8005e50:	2260      	movs	r2, #96	; 0x60
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 ff1a 	bl	8007c8e <memset>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <prvInitialiseNewTask+0x130>)
 8005e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <prvInitialiseNewTask+0x134>)
 8005e64:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <prvInitialiseNewTask+0x138>)
 8005e6a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	69b8      	ldr	r0, [r7, #24]
 8005e72:	f001 fa13 	bl	800729c <pxPortInitialiseStack>
 8005e76:	4602      	mov	r2, r0
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e88:	bf00      	nop
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	0800c734 	.word	0x0800c734
 8005e94:	0800c754 	.word	0x0800c754
 8005e98:	0800c714 	.word	0x0800c714

08005e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ea4:	f001 faea 	bl	800747c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ea8:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <prvAddNewTaskToReadyList+0xc4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	4a2c      	ldr	r2, [pc, #176]	; (8005f60 <prvAddNewTaskToReadyList+0xc4>)
 8005eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eb2:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <prvAddNewTaskToReadyList+0xc8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eba:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <prvAddNewTaskToReadyList+0xc8>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ec0:	4b27      	ldr	r3, [pc, #156]	; (8005f60 <prvAddNewTaskToReadyList+0xc4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d110      	bne.n	8005eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ec8:	f000 fc28 	bl	800671c <prvInitialiseTaskLists>
 8005ecc:	e00d      	b.n	8005eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ece:	4b26      	ldr	r3, [pc, #152]	; (8005f68 <prvAddNewTaskToReadyList+0xcc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ed6:	4b23      	ldr	r3, [pc, #140]	; (8005f64 <prvAddNewTaskToReadyList+0xc8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d802      	bhi.n	8005eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <prvAddNewTaskToReadyList+0xc8>)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <prvAddNewTaskToReadyList+0xd0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <prvAddNewTaskToReadyList+0xd0>)
 8005ef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <prvAddNewTaskToReadyList+0xd0>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <prvAddNewTaskToReadyList+0xd4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d903      	bls.n	8005f10 <prvAddNewTaskToReadyList+0x74>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <prvAddNewTaskToReadyList+0xd4>)
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <prvAddNewTaskToReadyList+0xd8>)
 8005f1e:	441a      	add	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f7fe fe69 	bl	8004bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f2c:	f001 fad6 	bl	80074dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f30:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <prvAddNewTaskToReadyList+0xcc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00e      	beq.n	8005f56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvAddNewTaskToReadyList+0xc8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d207      	bcs.n	8005f56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvAddNewTaskToReadyList+0xdc>)
 8005f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20001054 	.word	0x20001054
 8005f64:	20000b80 	.word	0x20000b80
 8005f68:	20001060 	.word	0x20001060
 8005f6c:	20001070 	.word	0x20001070
 8005f70:	2000105c 	.word	0x2000105c
 8005f74:	20000b84 	.word	0x20000b84
 8005f78:	e000ed04 	.word	0xe000ed04

08005f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d017      	beq.n	8005fbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f8e:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <vTaskDelay+0x60>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <vTaskDelay+0x30>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60bb      	str	r3, [r7, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fac:	f000 f88a 	bl	80060c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fe0c 	bl	8006bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fb8:	f000 f892 	bl	80060e0 <xTaskResumeAll>
 8005fbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <vTaskDelay+0x64>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	2000107c 	.word	0x2000107c
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ff2:	463a      	mov	r2, r7
 8005ff4:	1d39      	adds	r1, r7, #4
 8005ff6:	f107 0308 	add.w	r3, r7, #8
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fda2 	bl	8004b44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	2300      	movs	r3, #0
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	460a      	mov	r2, r1
 8006012:	4924      	ldr	r1, [pc, #144]	; (80060a4 <vTaskStartScheduler+0xc0>)
 8006014:	4824      	ldr	r0, [pc, #144]	; (80060a8 <vTaskStartScheduler+0xc4>)
 8006016:	f7ff fe01 	bl	8005c1c <xTaskCreateStatic>
 800601a:	4603      	mov	r3, r0
 800601c:	4a23      	ldr	r2, [pc, #140]	; (80060ac <vTaskStartScheduler+0xc8>)
 800601e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006020:	4b22      	ldr	r3, [pc, #136]	; (80060ac <vTaskStartScheduler+0xc8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e001      	b.n	8006032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d102      	bne.n	800603e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006038:	f000 fe1e 	bl	8006c78 <xTimerCreateTimerTask>
 800603c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d11b      	bne.n	800607c <vTaskStartScheduler+0x98>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	613b      	str	r3, [r7, #16]
}
 8006056:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <vTaskStartScheduler+0xcc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3354      	adds	r3, #84	; 0x54
 800605e:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <vTaskStartScheduler+0xd0>)
 8006060:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <vTaskStartScheduler+0xd4>)
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <vTaskStartScheduler+0xd8>)
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006070:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <vTaskStartScheduler+0xdc>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006076:	f001 f98f 	bl	8007398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800607a:	e00e      	b.n	800609a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	d10a      	bne.n	800609a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60fb      	str	r3, [r7, #12]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <vTaskStartScheduler+0xb4>
}
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	0800c488 	.word	0x0800c488
 80060a8:	080066ed 	.word	0x080066ed
 80060ac:	20001078 	.word	0x20001078
 80060b0:	20000b80 	.word	0x20000b80
 80060b4:	20000010 	.word	0x20000010
 80060b8:	20001074 	.word	0x20001074
 80060bc:	20001060 	.word	0x20001060
 80060c0:	20001058 	.word	0x20001058

080060c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <vTaskSuspendAll+0x18>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	4a03      	ldr	r2, [pc, #12]	; (80060dc <vTaskSuspendAll+0x18>)
 80060d0:	6013      	str	r3, [r2, #0]
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000107c 	.word	0x2000107c

080060e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060ee:	4b42      	ldr	r3, [pc, #264]	; (80061f8 <xTaskResumeAll+0x118>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <xTaskResumeAll+0x2c>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	603b      	str	r3, [r7, #0]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800610c:	f001 f9b6 	bl	800747c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006110:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <xTaskResumeAll+0x118>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3b01      	subs	r3, #1
 8006116:	4a38      	ldr	r2, [pc, #224]	; (80061f8 <xTaskResumeAll+0x118>)
 8006118:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <xTaskResumeAll+0x118>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d162      	bne.n	80061e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006122:	4b36      	ldr	r3, [pc, #216]	; (80061fc <xTaskResumeAll+0x11c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d05e      	beq.n	80061e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800612a:	e02f      	b.n	800618c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800612c:	4b34      	ldr	r3, [pc, #208]	; (8006200 <xTaskResumeAll+0x120>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3318      	adds	r3, #24
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe fdbb 	bl	8004cb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3304      	adds	r3, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe fdb6 	bl	8004cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614c:	4b2d      	ldr	r3, [pc, #180]	; (8006204 <xTaskResumeAll+0x124>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d903      	bls.n	800615c <xTaskResumeAll+0x7c>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	4a2a      	ldr	r2, [pc, #168]	; (8006204 <xTaskResumeAll+0x124>)
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4a27      	ldr	r2, [pc, #156]	; (8006208 <xTaskResumeAll+0x128>)
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f7fe fd43 	bl	8004bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4b23      	ldr	r3, [pc, #140]	; (800620c <xTaskResumeAll+0x12c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006186:	4b22      	ldr	r3, [pc, #136]	; (8006210 <xTaskResumeAll+0x130>)
 8006188:	2201      	movs	r2, #1
 800618a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800618c:	4b1c      	ldr	r3, [pc, #112]	; (8006200 <xTaskResumeAll+0x120>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1cb      	bne.n	800612c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800619a:	f000 fb61 	bl	8006860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800619e:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <xTaskResumeAll+0x134>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061aa:	f000 f845 	bl	8006238 <xTaskIncrementTick>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061b4:	4b16      	ldr	r3, [pc, #88]	; (8006210 <xTaskResumeAll+0x130>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3b01      	subs	r3, #1
 80061be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f1      	bne.n	80061aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80061c6:	4b13      	ldr	r3, [pc, #76]	; (8006214 <xTaskResumeAll+0x134>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <xTaskResumeAll+0x130>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <xTaskResumeAll+0x138>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e8:	f001 f978 	bl	80074dc <vPortExitCritical>

	return xAlreadyYielded;
 80061ec:	68bb      	ldr	r3, [r7, #8]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	2000107c 	.word	0x2000107c
 80061fc:	20001054 	.word	0x20001054
 8006200:	20001014 	.word	0x20001014
 8006204:	2000105c 	.word	0x2000105c
 8006208:	20000b84 	.word	0x20000b84
 800620c:	20000b80 	.word	0x20000b80
 8006210:	20001068 	.word	0x20001068
 8006214:	20001064 	.word	0x20001064
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006222:	4b04      	ldr	r3, [pc, #16]	; (8006234 <xTaskGetTickCount+0x18>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006228:	687b      	ldr	r3, [r7, #4]
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	20001058 	.word	0x20001058

08006238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006242:	4b51      	ldr	r3, [pc, #324]	; (8006388 <xTaskIncrementTick+0x150>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 808e 	bne.w	8006368 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800624c:	4b4f      	ldr	r3, [pc, #316]	; (800638c <xTaskIncrementTick+0x154>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006254:	4a4d      	ldr	r2, [pc, #308]	; (800638c <xTaskIncrementTick+0x154>)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d120      	bne.n	80062a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006260:	4b4b      	ldr	r3, [pc, #300]	; (8006390 <xTaskIncrementTick+0x158>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <xTaskIncrementTick+0x48>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	603b      	str	r3, [r7, #0]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <xTaskIncrementTick+0x46>
 8006280:	4b43      	ldr	r3, [pc, #268]	; (8006390 <xTaskIncrementTick+0x158>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	4b43      	ldr	r3, [pc, #268]	; (8006394 <xTaskIncrementTick+0x15c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a41      	ldr	r2, [pc, #260]	; (8006390 <xTaskIncrementTick+0x158>)
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	4a41      	ldr	r2, [pc, #260]	; (8006394 <xTaskIncrementTick+0x15c>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	4b40      	ldr	r3, [pc, #256]	; (8006398 <xTaskIncrementTick+0x160>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	4a3f      	ldr	r2, [pc, #252]	; (8006398 <xTaskIncrementTick+0x160>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	f000 fadf 	bl	8006860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062a2:	4b3e      	ldr	r3, [pc, #248]	; (800639c <xTaskIncrementTick+0x164>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d34e      	bcc.n	800634a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ac:	4b38      	ldr	r3, [pc, #224]	; (8006390 <xTaskIncrementTick+0x158>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <xTaskIncrementTick+0x82>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xTaskIncrementTick+0x84>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c0:	4b36      	ldr	r3, [pc, #216]	; (800639c <xTaskIncrementTick+0x164>)
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295
 80062c6:	601a      	str	r2, [r3, #0]
					break;
 80062c8:	e03f      	b.n	800634a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062ca:	4b31      	ldr	r3, [pc, #196]	; (8006390 <xTaskIncrementTick+0x158>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d203      	bcs.n	80062ea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062e2:	4a2e      	ldr	r2, [pc, #184]	; (800639c <xTaskIncrementTick+0x164>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6013      	str	r3, [r2, #0]
						break;
 80062e8:	e02f      	b.n	800634a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fce0 	bl	8004cb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	3318      	adds	r3, #24
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fcd7 	bl	8004cb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <xTaskIncrementTick+0x168>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d903      	bls.n	800631a <xTaskIncrementTick+0xe2>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	4a22      	ldr	r2, [pc, #136]	; (80063a0 <xTaskIncrementTick+0x168>)
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4a1f      	ldr	r2, [pc, #124]	; (80063a4 <xTaskIncrementTick+0x16c>)
 8006328:	441a      	add	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3304      	adds	r3, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4610      	mov	r0, r2
 8006332:	f7fe fc64 	bl	8004bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <xTaskIncrementTick+0x170>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d3b3      	bcc.n	80062ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006348:	e7b0      	b.n	80062ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800634a:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <xTaskIncrementTick+0x170>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4914      	ldr	r1, [pc, #80]	; (80063a4 <xTaskIncrementTick+0x16c>)
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d907      	bls.n	8006372 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006362:	2301      	movs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	e004      	b.n	8006372 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006368:	4b10      	ldr	r3, [pc, #64]	; (80063ac <xTaskIncrementTick+0x174>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3301      	adds	r3, #1
 800636e:	4a0f      	ldr	r2, [pc, #60]	; (80063ac <xTaskIncrementTick+0x174>)
 8006370:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <xTaskIncrementTick+0x178>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800637a:	2301      	movs	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800637e:	697b      	ldr	r3, [r7, #20]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	2000107c 	.word	0x2000107c
 800638c:	20001058 	.word	0x20001058
 8006390:	2000100c 	.word	0x2000100c
 8006394:	20001010 	.word	0x20001010
 8006398:	2000106c 	.word	0x2000106c
 800639c:	20001074 	.word	0x20001074
 80063a0:	2000105c 	.word	0x2000105c
 80063a4:	20000b84 	.word	0x20000b84
 80063a8:	20000b80 	.word	0x20000b80
 80063ac:	20001064 	.word	0x20001064
 80063b0:	20001068 	.word	0x20001068

080063b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063ba:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <vTaskSwitchContext+0xb0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063c2:	4b29      	ldr	r3, [pc, #164]	; (8006468 <vTaskSwitchContext+0xb4>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063c8:	e046      	b.n	8006458 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063ca:	4b27      	ldr	r3, [pc, #156]	; (8006468 <vTaskSwitchContext+0xb4>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063d0:	4b26      	ldr	r3, [pc, #152]	; (800646c <vTaskSwitchContext+0xb8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e010      	b.n	80063fa <vTaskSwitchContext+0x46>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <vTaskSwitchContext+0x3e>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	491d      	ldr	r1, [pc, #116]	; (8006470 <vTaskSwitchContext+0xbc>)
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0e4      	beq.n	80063d8 <vTaskSwitchContext+0x24>
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <vTaskSwitchContext+0xbc>)
 800641a:	4413      	add	r3, r2
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	3308      	adds	r3, #8
 8006430:	429a      	cmp	r2, r3
 8006432:	d104      	bne.n	800643e <vTaskSwitchContext+0x8a>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4a0b      	ldr	r2, [pc, #44]	; (8006474 <vTaskSwitchContext+0xc0>)
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <vTaskSwitchContext+0xb8>)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <vTaskSwitchContext+0xc0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3354      	adds	r3, #84	; 0x54
 8006454:	4a08      	ldr	r2, [pc, #32]	; (8006478 <vTaskSwitchContext+0xc4>)
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	2000107c 	.word	0x2000107c
 8006468:	20001068 	.word	0x20001068
 800646c:	2000105c 	.word	0x2000105c
 8006470:	20000b84 	.word	0x20000b84
 8006474:	20000b80 	.word	0x20000b80
 8006478:	20000010 	.word	0x20000010

0800647c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <vTaskPlaceOnEventList+0x44>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3318      	adds	r3, #24
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fe fbca 	bl	8004c44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064b0:	2101      	movs	r1, #1
 80064b2:	6838      	ldr	r0, [r7, #0]
 80064b4:	f000 fb8c 	bl	8006bd0 <prvAddCurrentTaskToDelayedList>
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000b80 	.word	0x20000b80

080064c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	617b      	str	r3, [r7, #20]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <vTaskPlaceOnEventListRestricted+0x54>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3318      	adds	r3, #24
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f7fe fb82 	bl	8004bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	68b8      	ldr	r0, [r7, #8]
 800650a:	f000 fb61 	bl	8006bd0 <prvAddCurrentTaskToDelayedList>
	}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000b80 	.word	0x20000b80

0800651c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60fb      	str	r3, [r7, #12]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3318      	adds	r3, #24
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fbb1 	bl	8004cb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006552:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <xTaskRemoveFromEventList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d11d      	bne.n	8006596 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3304      	adds	r3, #4
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fba8 	bl	8004cb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <xTaskRemoveFromEventList+0xb4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d903      	bls.n	8006578 <xTaskRemoveFromEventList+0x5c>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <xTaskRemoveFromEventList+0xb4>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <xTaskRemoveFromEventList+0xb8>)
 8006586:	441a      	add	r2, r3
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f7fe fb35 	bl	8004bfe <vListInsertEnd>
 8006594:	e005      	b.n	80065a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3318      	adds	r3, #24
 800659a:	4619      	mov	r1, r3
 800659c:	480e      	ldr	r0, [pc, #56]	; (80065d8 <xTaskRemoveFromEventList+0xbc>)
 800659e:	f7fe fb2e 	bl	8004bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <xTaskRemoveFromEventList+0xc0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d905      	bls.n	80065bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <xTaskRemoveFromEventList+0xc4>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e001      	b.n	80065c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80065c0:	697b      	ldr	r3, [r7, #20]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2000107c 	.word	0x2000107c
 80065d0:	2000105c 	.word	0x2000105c
 80065d4:	20000b84 	.word	0x20000b84
 80065d8:	20001014 	.word	0x20001014
 80065dc:	20000b80 	.word	0x20000b80
 80065e0:	20001068 	.word	0x20001068

080065e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <vTaskInternalSetTimeOutState+0x24>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <vTaskInternalSetTimeOutState+0x28>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	605a      	str	r2, [r3, #4]
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	2000106c 	.word	0x2000106c
 800660c:	20001058 	.word	0x20001058

08006610 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	f383 8811 	msr	BASEPRI, r3
 8006628:	f3bf 8f6f 	isb	sy
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	613b      	str	r3, [r7, #16]
}
 8006632:	bf00      	nop
 8006634:	e7fe      	b.n	8006634 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006652:	f000 ff13 	bl	800747c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <xTaskCheckForTimeOut+0xbc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d102      	bne.n	8006676 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e023      	b.n	80066be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <xTaskCheckForTimeOut+0xc0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d007      	beq.n	8006692 <xTaskCheckForTimeOut+0x82>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800668c:	2301      	movs	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	e015      	b.n	80066be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	429a      	cmp	r2, r3
 800669a:	d20b      	bcs.n	80066b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	1ad2      	subs	r2, r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff9b 	bl	80065e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	e004      	b.n	80066be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066be:	f000 ff0d 	bl	80074dc <vPortExitCritical>

	return xReturn;
 80066c2:	69fb      	ldr	r3, [r7, #28]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3720      	adds	r7, #32
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20001058 	.word	0x20001058
 80066d0:	2000106c 	.word	0x2000106c

080066d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <vTaskMissedYield+0x14>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
}
 80066de:	bf00      	nop
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20001068 	.word	0x20001068

080066ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066f4:	f000 f852 	bl	800679c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <prvIdleTask+0x28>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d9f9      	bls.n	80066f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006700:	4b05      	ldr	r3, [pc, #20]	; (8006718 <prvIdleTask+0x2c>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006710:	e7f0      	b.n	80066f4 <prvIdleTask+0x8>
 8006712:	bf00      	nop
 8006714:	20000b84 	.word	0x20000b84
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	e00c      	b.n	8006742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4a12      	ldr	r2, [pc, #72]	; (800677c <prvInitialiseTaskLists+0x60>)
 8006734:	4413      	add	r3, r2
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fa36 	bl	8004ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3301      	adds	r3, #1
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b37      	cmp	r3, #55	; 0x37
 8006746:	d9ef      	bls.n	8006728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006748:	480d      	ldr	r0, [pc, #52]	; (8006780 <prvInitialiseTaskLists+0x64>)
 800674a:	f7fe fa2d 	bl	8004ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800674e:	480d      	ldr	r0, [pc, #52]	; (8006784 <prvInitialiseTaskLists+0x68>)
 8006750:	f7fe fa2a 	bl	8004ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006754:	480c      	ldr	r0, [pc, #48]	; (8006788 <prvInitialiseTaskLists+0x6c>)
 8006756:	f7fe fa27 	bl	8004ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800675a:	480c      	ldr	r0, [pc, #48]	; (800678c <prvInitialiseTaskLists+0x70>)
 800675c:	f7fe fa24 	bl	8004ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006760:	480b      	ldr	r0, [pc, #44]	; (8006790 <prvInitialiseTaskLists+0x74>)
 8006762:	f7fe fa21 	bl	8004ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <prvInitialiseTaskLists+0x78>)
 8006768:	4a05      	ldr	r2, [pc, #20]	; (8006780 <prvInitialiseTaskLists+0x64>)
 800676a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <prvInitialiseTaskLists+0x7c>)
 800676e:	4a05      	ldr	r2, [pc, #20]	; (8006784 <prvInitialiseTaskLists+0x68>)
 8006770:	601a      	str	r2, [r3, #0]
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000b84 	.word	0x20000b84
 8006780:	20000fe4 	.word	0x20000fe4
 8006784:	20000ff8 	.word	0x20000ff8
 8006788:	20001014 	.word	0x20001014
 800678c:	20001028 	.word	0x20001028
 8006790:	20001040 	.word	0x20001040
 8006794:	2000100c 	.word	0x2000100c
 8006798:	20001010 	.word	0x20001010

0800679c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067a2:	e019      	b.n	80067d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067a4:	f000 fe6a 	bl	800747c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067a8:	4b10      	ldr	r3, [pc, #64]	; (80067ec <prvCheckTasksWaitingTermination+0x50>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe fa7d 	bl	8004cb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <prvCheckTasksWaitingTermination+0x54>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3b01      	subs	r3, #1
 80067c0:	4a0b      	ldr	r2, [pc, #44]	; (80067f0 <prvCheckTasksWaitingTermination+0x54>)
 80067c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <prvCheckTasksWaitingTermination+0x58>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	4a0a      	ldr	r2, [pc, #40]	; (80067f4 <prvCheckTasksWaitingTermination+0x58>)
 80067cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ce:	f000 fe85 	bl	80074dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f810 	bl	80067f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <prvCheckTasksWaitingTermination+0x58>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e1      	bne.n	80067a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20001028 	.word	0x20001028
 80067f0:	20001054 	.word	0x20001054
 80067f4:	2000103c 	.word	0x2000103c

080067f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3354      	adds	r3, #84	; 0x54
 8006804:	4618      	mov	r0, r3
 8006806:	f002 f95b 	bl	8008ac0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006810:	2b00      	cmp	r3, #0
 8006812:	d108      	bne.n	8006826 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fff3 	bl	8007804 <vPortFree>
				vPortFree( pxTCB );
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fff0 	bl	8007804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006824:	e018      	b.n	8006858 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800682c:	2b01      	cmp	r3, #1
 800682e:	d103      	bne.n	8006838 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 ffe7 	bl	8007804 <vPortFree>
	}
 8006836:	e00f      	b.n	8006858 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800683e:	2b02      	cmp	r3, #2
 8006840:	d00a      	beq.n	8006858 <prvDeleteTCB+0x60>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <prvDeleteTCB+0x5e>
	}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <prvResetNextTaskUnblockTime+0x40>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <prvResetNextTaskUnblockTime+0x14>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <prvResetNextTaskUnblockTime+0x16>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvResetNextTaskUnblockTime+0x44>)
 800687c:	f04f 32ff 	mov.w	r2, #4294967295
 8006880:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006882:	e008      	b.n	8006896 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvResetNextTaskUnblockTime+0x40>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <prvResetNextTaskUnblockTime+0x44>)
 8006894:	6013      	str	r3, [r2, #0]
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr
 80068a0:	2000100c 	.word	0x2000100c
 80068a4:	20001074 	.word	0x20001074

080068a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <xTaskGetSchedulerState+0x34>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068b6:	2301      	movs	r3, #1
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	e008      	b.n	80068ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068bc:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <xTaskGetSchedulerState+0x38>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068c4:	2302      	movs	r3, #2
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	e001      	b.n	80068ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ca:	2300      	movs	r3, #0
 80068cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068ce:	687b      	ldr	r3, [r7, #4]
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20001060 	.word	0x20001060
 80068e0:	2000107c 	.word	0x2000107c

080068e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d056      	beq.n	80069a8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	4b2d      	ldr	r3, [pc, #180]	; (80069b4 <xTaskPriorityInherit+0xd0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	429a      	cmp	r2, r3
 8006906:	d246      	bcs.n	8006996 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	db06      	blt.n	800691e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <xTaskPriorityInherit+0xd0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6959      	ldr	r1, [r3, #20]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a22      	ldr	r2, [pc, #136]	; (80069b8 <xTaskPriorityInherit+0xd4>)
 8006930:	4413      	add	r3, r2
 8006932:	4299      	cmp	r1, r3
 8006934:	d101      	bne.n	800693a <xTaskPriorityInherit+0x56>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xTaskPriorityInherit+0x58>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d022      	beq.n	8006986 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe f9b5 	bl	8004cb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800694a:	4b1a      	ldr	r3, [pc, #104]	; (80069b4 <xTaskPriorityInherit+0xd0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	4b18      	ldr	r3, [pc, #96]	; (80069bc <xTaskPriorityInherit+0xd8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d903      	bls.n	8006968 <xTaskPriorityInherit+0x84>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <xTaskPriorityInherit+0xd8>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <xTaskPriorityInherit+0xd4>)
 8006976:	441a      	add	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7fe f93d 	bl	8004bfe <vListInsertEnd>
 8006984:	e004      	b.n	8006990 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <xTaskPriorityInherit+0xd0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006990:	2301      	movs	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e008      	b.n	80069a8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <xTaskPriorityInherit+0xd0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d201      	bcs.n	80069a8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069a8:	68fb      	ldr	r3, [r7, #12]
	}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000b80 	.word	0x20000b80
 80069b8:	20000b84 	.word	0x20000b84
 80069bc:	2000105c 	.word	0x2000105c

080069c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d056      	beq.n	8006a84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069d6:	4b2e      	ldr	r3, [pc, #184]	; (8006a90 <xTaskPriorityDisinherit+0xd0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d00a      	beq.n	80069f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	60fb      	str	r3, [r7, #12]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60bb      	str	r3, [r7, #8]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d02c      	beq.n	8006a84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d128      	bne.n	8006a84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe f93c 	bl	8004cb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <xTaskPriorityDisinherit+0xd4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d903      	bls.n	8006a64 <xTaskPriorityDisinherit+0xa4>
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a0c      	ldr	r2, [pc, #48]	; (8006a94 <xTaskPriorityDisinherit+0xd4>)
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4a09      	ldr	r2, [pc, #36]	; (8006a98 <xTaskPriorityDisinherit+0xd8>)
 8006a72:	441a      	add	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f7fe f8bf 	bl	8004bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a84:	697b      	ldr	r3, [r7, #20]
	}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000b80 	.word	0x20000b80
 8006a94:	2000105c 	.word	0x2000105c
 8006a98:	20000b84 	.word	0x20000b84

08006a9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d06f      	beq.n	8006b94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d902      	bls.n	8006ae2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e002      	b.n	8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d050      	beq.n	8006b94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d14b      	bne.n	8006b94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006afc:	4b27      	ldr	r3, [pc, #156]	; (8006b9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d10a      	bne.n	8006b1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60bb      	str	r3, [r7, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	db04      	blt.n	8006b3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	6959      	ldr	r1, [r3, #20]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b4a:	4413      	add	r3, r2
 8006b4c:	4299      	cmp	r1, r3
 8006b4e:	d101      	bne.n	8006b54 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006b54:	2300      	movs	r3, #0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01c      	beq.n	8006b94 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe f8a8 	bl	8004cb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d903      	bls.n	8006b78 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a0b      	ldr	r2, [pc, #44]	; (8006ba4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b86:	441a      	add	r2, r3
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fe f835 	bl	8004bfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b94:	bf00      	nop
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000b80 	.word	0x20000b80
 8006ba0:	20000b84 	.word	0x20000b84
 8006ba4:	2000105c 	.word	0x2000105c

08006ba8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bba:	3201      	adds	r2, #1
 8006bbc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <pvTaskIncrementMutexHeldCount+0x24>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
	}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000b80 	.word	0x20000b80

08006bd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bda:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006be0:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe f864 	bl	8004cb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d10a      	bne.n	8006c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4819      	ldr	r0, [pc, #100]	; (8006c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c04:	f7fd fffb 	bl	8004bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c08:	e026      	b.n	8006c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c12:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d209      	bcs.n	8006c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7fe f808 	bl	8004c44 <vListInsert>
}
 8006c34:	e010      	b.n	8006c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c36:	4b0e      	ldr	r3, [pc, #56]	; (8006c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fd fffe 	bl	8004c44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d202      	bcs.n	8006c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c52:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6013      	str	r3, [r2, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20001058 	.word	0x20001058
 8006c64:	20000b80 	.word	0x20000b80
 8006c68:	20001040 	.word	0x20001040
 8006c6c:	20001010 	.word	0x20001010
 8006c70:	2000100c 	.word	0x2000100c
 8006c74:	20001074 	.word	0x20001074

08006c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08a      	sub	sp, #40	; 0x28
 8006c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c82:	f000 facb 	bl	800721c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <xTimerCreateTimerTask+0x80>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d021      	beq.n	8006cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c96:	1d3a      	adds	r2, r7, #4
 8006c98:	f107 0108 	add.w	r1, r7, #8
 8006c9c:	f107 030c 	add.w	r3, r7, #12
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fd ff67 	bl	8004b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	9202      	str	r2, [sp, #8]
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	4910      	ldr	r1, [pc, #64]	; (8006cfc <xTimerCreateTimerTask+0x84>)
 8006cba:	4811      	ldr	r0, [pc, #68]	; (8006d00 <xTimerCreateTimerTask+0x88>)
 8006cbc:	f7fe ffae 	bl	8005c1c <xTaskCreateStatic>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <xTimerCreateTimerTask+0x8c>)
 8006cc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <xTimerCreateTimerTask+0x8c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	613b      	str	r3, [r7, #16]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cee:	697b      	ldr	r3, [r7, #20]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200010b0 	.word	0x200010b0
 8006cfc:	0800c490 	.word	0x0800c490
 8006d00:	08006e25 	.word	0x08006e25
 8006d04:	200010b4 	.word	0x200010b4

08006d08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	; 0x28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	623b      	str	r3, [r7, #32]
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <xTimerGenericCommand+0x98>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d02a      	beq.n	8006d94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b05      	cmp	r3, #5
 8006d4e:	dc18      	bgt.n	8006d82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d50:	f7ff fdaa 	bl	80068a8 <xTaskGetSchedulerState>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d109      	bne.n	8006d6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d5a:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <xTimerGenericCommand+0x98>)
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f107 0110 	add.w	r1, r7, #16
 8006d62:	2300      	movs	r3, #0
 8006d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d66:	f7fe f979 	bl	800505c <xQueueGenericSend>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d6c:	e012      	b.n	8006d94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <xTimerGenericCommand+0x98>)
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	f107 0110 	add.w	r1, r7, #16
 8006d76:	2300      	movs	r3, #0
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f7fe f96f 	bl	800505c <xQueueGenericSend>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d80:	e008      	b.n	8006d94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d82:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <xTimerGenericCommand+0x98>)
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	f107 0110 	add.w	r1, r7, #16
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	f7fe fa63 	bl	8005258 <xQueueGenericSendFromISR>
 8006d92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3728      	adds	r7, #40	; 0x28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200010b0 	.word	0x200010b0

08006da4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dae:	4b1c      	ldr	r3, [pc, #112]	; (8006e20 <prvProcessExpiredTimer+0x7c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fd ff79 	bl	8004cb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d122      	bne.n	8006e10 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	18d1      	adds	r1, r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	6978      	ldr	r0, [r7, #20]
 8006dd8:	f000 f8c8 	bl	8006f6c <prvInsertTimerInActiveList>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d016      	beq.n	8006e10 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de2:	2300      	movs	r3, #0
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	2100      	movs	r1, #0
 8006dec:	6978      	ldr	r0, [r7, #20]
 8006dee:	f7ff ff8b 	bl	8006d08 <xTimerGenericCommand>
 8006df2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60fb      	str	r3, [r7, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	6978      	ldr	r0, [r7, #20]
 8006e16:	4798      	blx	r3
}
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	200010a8 	.word	0x200010a8

08006e24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e2c:	f107 0308 	add.w	r3, r7, #8
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f857 	bl	8006ee4 <prvGetNextExpireTime>
 8006e36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f803 	bl	8006e48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e42:	f000 f8d5 	bl	8006ff0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e46:	e7f1      	b.n	8006e2c <prvTimerTask+0x8>

08006e48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e52:	f7ff f937 	bl	80060c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e56:	f107 0308 	add.w	r3, r7, #8
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f866 	bl	8006f2c <prvSampleTimeNow>
 8006e60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d130      	bne.n	8006eca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <prvProcessTimerOrBlockTask+0x3c>
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d806      	bhi.n	8006e84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e76:	f7ff f933 	bl	80060e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff91 	bl	8006da4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e82:	e024      	b.n	8006ece <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e8a:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <prvProcessTimerOrBlockTask+0x90>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <prvProcessTimerOrBlockTask+0x94>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f7fe fe83 	bl	8005bb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006eae:	f7ff f917 	bl	80060e0 <xTaskResumeAll>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <prvProcessTimerOrBlockTask+0x98>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
}
 8006ec8:	e001      	b.n	8006ece <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eca:	f7ff f909 	bl	80060e0 <xTaskResumeAll>
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200010ac 	.word	0x200010ac
 8006edc:	200010b0 	.word	0x200010b0
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <prvGetNextExpireTime+0x44>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f0a:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <prvGetNextExpireTime+0x44>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e001      	b.n	8006f1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	200010a8 	.word	0x200010a8

08006f2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f34:	f7ff f972 	bl	800621c <xTaskGetTickCount>
 8006f38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <prvSampleTimeNow+0x3c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d205      	bcs.n	8006f50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f44:	f000 f908 	bl	8007158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e002      	b.n	8006f56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f56:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <prvSampleTimeNow+0x3c>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200010b8 	.word	0x200010b8

08006f6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d812      	bhi.n	8006fb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e01b      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <prvInsertTimerInActiveList+0x7c>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fd fe47 	bl	8004c44 <vListInsert>
 8006fb6:	e012      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d206      	bcs.n	8006fce <prvInsertTimerInActiveList+0x62>
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e007      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <prvInsertTimerInActiveList+0x80>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fd fe33 	bl	8004c44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200010ac 	.word	0x200010ac
 8006fec:	200010a8 	.word	0x200010a8

08006ff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08e      	sub	sp, #56	; 0x38
 8006ff4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ff6:	e09d      	b.n	8007134 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da18      	bge.n	8007030 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	3304      	adds	r3, #4
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	61fb      	str	r3, [r7, #28]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007026:	6850      	ldr	r0, [r2, #4]
 8007028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702a:	6892      	ldr	r2, [r2, #8]
 800702c:	4611      	mov	r1, r2
 800702e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	db7d      	blt.n	8007132 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	3304      	adds	r3, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f7fd fe34 	bl	8004cb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800704c:	463b      	mov	r3, r7
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff ff6c 	bl	8006f2c <prvSampleTimeNow>
 8007054:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b09      	cmp	r3, #9
 800705a:	d86b      	bhi.n	8007134 <prvProcessReceivedCommands+0x144>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <prvProcessReceivedCommands+0x74>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	0800708d 	.word	0x0800708d
 8007068:	0800708d 	.word	0x0800708d
 800706c:	0800708d 	.word	0x0800708d
 8007070:	08007135 	.word	0x08007135
 8007074:	080070e9 	.word	0x080070e9
 8007078:	08007121 	.word	0x08007121
 800707c:	0800708d 	.word	0x0800708d
 8007080:	0800708d 	.word	0x0800708d
 8007084:	08007135 	.word	0x08007135
 8007088:	080070e9 	.word	0x080070e9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	18d1      	adds	r1, r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709a:	f7ff ff67 	bl	8006f6c <prvInsertTimerInActiveList>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d047      	beq.n	8007134 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d13f      	bne.n	8007134 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	441a      	add	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c6:	f7ff fe1f 	bl	8006d08 <xTimerGenericCommand>
 80070ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d130      	bne.n	8007134 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61bb      	str	r3, [r7, #24]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	617b      	str	r3, [r7, #20]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	18d1      	adds	r1, r2, r3
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f7ff ff27 	bl	8006f6c <prvInsertTimerInActiveList>
					break;
 800711e:	e009      	b.n	8007134 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d104      	bne.n	8007134 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800712a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800712c:	f000 fb6a 	bl	8007804 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007130:	e000      	b.n	8007134 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007132:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <prvProcessReceivedCommands+0x164>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	1d39      	adds	r1, r7, #4
 800713a:	2200      	movs	r2, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe f9b1 	bl	80054a4 <xQueueReceive>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	f47f af57 	bne.w	8006ff8 <prvProcessReceivedCommands+0x8>
	}
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	3730      	adds	r7, #48	; 0x30
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	200010b0 	.word	0x200010b0

08007158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800715e:	e045      	b.n	80071ec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007160:	4b2c      	ldr	r3, [pc, #176]	; (8007214 <prvSwitchTimerLists+0xbc>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800716a:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <prvSwitchTimerLists+0xbc>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fd fd9b 	bl	8004cb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d12e      	bne.n	80071ec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4413      	add	r3, r2
 8007196:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d90e      	bls.n	80071be <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <prvSwitchTimerLists+0xbc>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fd fd44 	bl	8004c44 <vListInsert>
 80071bc:	e016      	b.n	80071ec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071be:	2300      	movs	r3, #0
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	2300      	movs	r3, #0
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	2100      	movs	r1, #0
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fd9d 	bl	8006d08 <xTimerGenericCommand>
 80071ce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <prvSwitchTimerLists+0x94>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	603b      	str	r3, [r7, #0]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <prvSwitchTimerLists+0xbc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1b4      	bne.n	8007160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <prvSwitchTimerLists+0xbc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <prvSwitchTimerLists+0xc0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a04      	ldr	r2, [pc, #16]	; (8007214 <prvSwitchTimerLists+0xbc>)
 8007202:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007204:	4a04      	ldr	r2, [pc, #16]	; (8007218 <prvSwitchTimerLists+0xc0>)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	6013      	str	r3, [r2, #0]
}
 800720a:	bf00      	nop
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200010a8 	.word	0x200010a8
 8007218:	200010ac 	.word	0x200010ac

0800721c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007222:	f000 f92b 	bl	800747c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007226:	4b15      	ldr	r3, [pc, #84]	; (800727c <prvCheckForValidListAndQueue+0x60>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d120      	bne.n	8007270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800722e:	4814      	ldr	r0, [pc, #80]	; (8007280 <prvCheckForValidListAndQueue+0x64>)
 8007230:	f7fd fcba 	bl	8004ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007234:	4813      	ldr	r0, [pc, #76]	; (8007284 <prvCheckForValidListAndQueue+0x68>)
 8007236:	f7fd fcb7 	bl	8004ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800723a:	4b13      	ldr	r3, [pc, #76]	; (8007288 <prvCheckForValidListAndQueue+0x6c>)
 800723c:	4a10      	ldr	r2, [pc, #64]	; (8007280 <prvCheckForValidListAndQueue+0x64>)
 800723e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007240:	4b12      	ldr	r3, [pc, #72]	; (800728c <prvCheckForValidListAndQueue+0x70>)
 8007242:	4a10      	ldr	r2, [pc, #64]	; (8007284 <prvCheckForValidListAndQueue+0x68>)
 8007244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007246:	2300      	movs	r3, #0
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <prvCheckForValidListAndQueue+0x74>)
 800724c:	4a11      	ldr	r2, [pc, #68]	; (8007294 <prvCheckForValidListAndQueue+0x78>)
 800724e:	2110      	movs	r1, #16
 8007250:	200a      	movs	r0, #10
 8007252:	f7fd fdc1 	bl	8004dd8 <xQueueGenericCreateStatic>
 8007256:	4603      	mov	r3, r0
 8007258:	4a08      	ldr	r2, [pc, #32]	; (800727c <prvCheckForValidListAndQueue+0x60>)
 800725a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <prvCheckForValidListAndQueue+0x60>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <prvCheckForValidListAndQueue+0x60>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	490b      	ldr	r1, [pc, #44]	; (8007298 <prvCheckForValidListAndQueue+0x7c>)
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fc50 	bl	8005b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007270:	f000 f934 	bl	80074dc <vPortExitCritical>
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	200010b0 	.word	0x200010b0
 8007280:	20001080 	.word	0x20001080
 8007284:	20001094 	.word	0x20001094
 8007288:	200010a8 	.word	0x200010a8
 800728c:	200010ac 	.word	0x200010ac
 8007290:	2000115c 	.word	0x2000115c
 8007294:	200010bc 	.word	0x200010bc
 8007298:	0800c498 	.word	0x0800c498

0800729c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3b04      	subs	r3, #4
 80072ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3b04      	subs	r3, #4
 80072ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f023 0201 	bic.w	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3b04      	subs	r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072cc:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <pxPortInitialiseStack+0x54>)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3b14      	subs	r3, #20
 80072d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3b20      	subs	r3, #32
 80072e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr
 80072f0:	080072f5 	.word	0x080072f5

080072f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072fe:	4b12      	ldr	r3, [pc, #72]	; (8007348 <prvTaskExitError+0x54>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007306:	d00a      	beq.n	800731e <prvTaskExitError+0x2a>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvTaskExitError+0x28>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60bb      	str	r3, [r7, #8]
}
 8007330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007332:	bf00      	nop
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0fc      	beq.n	8007334 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	2000000c 	.word	0x2000000c
 800734c:	00000000 	.word	0x00000000

08007350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <pxCurrentTCBConst2>)
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800735a:	f380 8809 	msr	PSP, r0
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8811 	msr	BASEPRI, r0
 800736a:	f04e 0e0d 	orr.w	lr, lr, #13
 800736e:	4770      	bx	lr

08007370 <pxCurrentTCBConst2>:
 8007370:	20000b80 	.word	0x20000b80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007378:	4806      	ldr	r0, [pc, #24]	; (8007394 <prvPortStartFirstTask+0x1c>)
 800737a:	6800      	ldr	r0, [r0, #0]
 800737c:	6800      	ldr	r0, [r0, #0]
 800737e:	f380 8808 	msr	MSP, r0
 8007382:	b662      	cpsie	i
 8007384:	b661      	cpsie	f
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	df00      	svc	0
 8007390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007392:	bf00      	nop
 8007394:	e000ed08 	.word	0xe000ed08

08007398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800739e:	4b32      	ldr	r3, [pc, #200]	; (8007468 <xPortStartScheduler+0xd0>)
 80073a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	22ff      	movs	r2, #255	; 0xff
 80073ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	4b2a      	ldr	r3, [pc, #168]	; (800746c <xPortStartScheduler+0xd4>)
 80073c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073c6:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <xPortStartScheduler+0xd8>)
 80073c8:	2207      	movs	r2, #7
 80073ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073cc:	e009      	b.n	80073e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073ce:	4b28      	ldr	r3, [pc, #160]	; (8007470 <xPortStartScheduler+0xd8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4a26      	ldr	r2, [pc, #152]	; (8007470 <xPortStartScheduler+0xd8>)
 80073d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d0ef      	beq.n	80073ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073ee:	4b20      	ldr	r3, [pc, #128]	; (8007470 <xPortStartScheduler+0xd8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f1c3 0307 	rsb	r3, r3, #7
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d00a      	beq.n	8007410 <xPortStartScheduler+0x78>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60bb      	str	r3, [r7, #8]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007410:	4b17      	ldr	r3, [pc, #92]	; (8007470 <xPortStartScheduler+0xd8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	4a16      	ldr	r2, [pc, #88]	; (8007470 <xPortStartScheduler+0xd8>)
 8007418:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <xPortStartScheduler+0xd8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007422:	4a13      	ldr	r2, [pc, #76]	; (8007470 <xPortStartScheduler+0xd8>)
 8007424:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800742e:	4b11      	ldr	r3, [pc, #68]	; (8007474 <xPortStartScheduler+0xdc>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a10      	ldr	r2, [pc, #64]	; (8007474 <xPortStartScheduler+0xdc>)
 8007434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800743a:	4b0e      	ldr	r3, [pc, #56]	; (8007474 <xPortStartScheduler+0xdc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a0d      	ldr	r2, [pc, #52]	; (8007474 <xPortStartScheduler+0xdc>)
 8007440:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007444:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007446:	f000 f8b9 	bl	80075bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <xPortStartScheduler+0xe0>)
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007450:	f7ff ff92 	bl	8007378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007454:	f7fe ffae 	bl	80063b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007458:	f7ff ff4c 	bl	80072f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	e000e400 	.word	0xe000e400
 800746c:	200011ac 	.word	0x200011ac
 8007470:	200011b0 	.word	0x200011b0
 8007474:	e000ed20 	.word	0xe000ed20
 8007478:	2000000c 	.word	0x2000000c

0800747c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	607b      	str	r3, [r7, #4]
}
 8007494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007496:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <vPortEnterCritical+0x58>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	4a0d      	ldr	r2, [pc, #52]	; (80074d4 <vPortEnterCritical+0x58>)
 800749e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <vPortEnterCritical+0x58>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10f      	bne.n	80074c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074a8:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <vPortEnterCritical+0x5c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	603b      	str	r3, [r7, #0]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <vPortEnterCritical+0x4a>
	}
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	2000000c 	.word	0x2000000c
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <vPortExitCritical+0x4c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <vPortExitCritical+0x24>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	607b      	str	r3, [r7, #4]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <vPortExitCritical+0x4c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3b01      	subs	r3, #1
 8007506:	4a08      	ldr	r2, [pc, #32]	; (8007528 <vPortExitCritical+0x4c>)
 8007508:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <vPortExitCritical+0x4c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <vPortExitCritical+0x42>
 8007512:	2300      	movs	r3, #0
 8007514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f383 8811 	msr	BASEPRI, r3
}
 800751c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr
 8007528:	2000000c 	.word	0x2000000c
 800752c:	00000000 	.word	0x00000000

08007530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007530:	f3ef 8009 	mrs	r0, PSP
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <pxCurrentTCBConst>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007540:	6010      	str	r0, [r2, #0]
 8007542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800754a:	f380 8811 	msr	BASEPRI, r0
 800754e:	f7fe ff31 	bl	80063b4 <vTaskSwitchContext>
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800755e:	6819      	ldr	r1, [r3, #0]
 8007560:	6808      	ldr	r0, [r1, #0]
 8007562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007566:	f380 8809 	msr	PSP, r0
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	4770      	bx	lr

08007570 <pxCurrentTCBConst>:
 8007570:	20000b80 	.word	0x20000b80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop

08007578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007592:	f7fe fe51 	bl	8006238 <xTaskIncrementTick>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <SysTick_Handler+0x40>)
 800759e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	2300      	movs	r3, #0
 80075a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f383 8811 	msr	BASEPRI, r3
}
 80075ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <vPortSetupTimerInterrupt+0x30>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075c6:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <vPortSetupTimerInterrupt+0x34>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <vPortSetupTimerInterrupt+0x38>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <vPortSetupTimerInterrupt+0x3c>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	099b      	lsrs	r3, r3, #6
 80075d8:	4a08      	ldr	r2, [pc, #32]	; (80075fc <vPortSetupTimerInterrupt+0x40>)
 80075da:	3b01      	subs	r3, #1
 80075dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075de:	4b03      	ldr	r3, [pc, #12]	; (80075ec <vPortSetupTimerInterrupt+0x30>)
 80075e0:	2207      	movs	r2, #7
 80075e2:	601a      	str	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr
 80075ec:	e000e010 	.word	0xe000e010
 80075f0:	e000e018 	.word	0xe000e018
 80075f4:	20000000 	.word	0x20000000
 80075f8:	10624dd3 	.word	0x10624dd3
 80075fc:	e000e014 	.word	0xe000e014

08007600 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007606:	f3ef 8305 	mrs	r3, IPSR
 800760a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d914      	bls.n	800763c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <vPortValidateInterruptPriority+0x6c>)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800761c:	4b14      	ldr	r3, [pc, #80]	; (8007670 <vPortValidateInterruptPriority+0x70>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	7afa      	ldrb	r2, [r7, #11]
 8007622:	429a      	cmp	r2, r3
 8007624:	d20a      	bcs.n	800763c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	607b      	str	r3, [r7, #4]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <vPortValidateInterruptPriority+0x74>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <vPortValidateInterruptPriority+0x78>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d90a      	bls.n	8007662 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	603b      	str	r3, [r7, #0]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <vPortValidateInterruptPriority+0x60>
	}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr
 800766c:	e000e3f0 	.word	0xe000e3f0
 8007670:	200011ac 	.word	0x200011ac
 8007674:	e000ed0c 	.word	0xe000ed0c
 8007678:	200011b0 	.word	0x200011b0

0800767c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007688:	f7fe fd1c 	bl	80060c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800768c:	4b58      	ldr	r3, [pc, #352]	; (80077f0 <pvPortMalloc+0x174>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007694:	f000 f910 	bl	80078b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007698:	4b56      	ldr	r3, [pc, #344]	; (80077f4 <pvPortMalloc+0x178>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 808e 	bne.w	80077c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01d      	beq.n	80076e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076ac:	2208      	movs	r2, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4413      	add	r3, r2
 80076b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d014      	beq.n	80076e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f023 0307 	bic.w	r3, r3, #7
 80076c4:	3308      	adds	r3, #8
 80076c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <pvPortMalloc+0x6c>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	617b      	str	r3, [r7, #20]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d069      	beq.n	80077c2 <pvPortMalloc+0x146>
 80076ee:	4b42      	ldr	r3, [pc, #264]	; (80077f8 <pvPortMalloc+0x17c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d864      	bhi.n	80077c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076f8:	4b40      	ldr	r3, [pc, #256]	; (80077fc <pvPortMalloc+0x180>)
 80076fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076fc:	4b3f      	ldr	r3, [pc, #252]	; (80077fc <pvPortMalloc+0x180>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007702:	e004      	b.n	800770e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <pvPortMalloc+0xa4>
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f1      	bne.n	8007704 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007720:	4b33      	ldr	r3, [pc, #204]	; (80077f0 <pvPortMalloc+0x174>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	429a      	cmp	r2, r3
 8007728:	d04b      	beq.n	80077c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2208      	movs	r2, #8
 8007730:	4413      	add	r3, r2
 8007732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	2308      	movs	r3, #8
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	429a      	cmp	r2, r3
 800774a:	d91f      	bls.n	800778c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800774c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4413      	add	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <pvPortMalloc+0xf8>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	613b      	str	r3, [r7, #16]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007786:	69b8      	ldr	r0, [r7, #24]
 8007788:	f000 f8f8 	bl	800797c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800778c:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <pvPortMalloc+0x17c>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <pvPortMalloc+0x17c>)
 8007798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800779a:	4b17      	ldr	r3, [pc, #92]	; (80077f8 <pvPortMalloc+0x17c>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b18      	ldr	r3, [pc, #96]	; (8007800 <pvPortMalloc+0x184>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d203      	bcs.n	80077ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <pvPortMalloc+0x17c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a15      	ldr	r2, [pc, #84]	; (8007800 <pvPortMalloc+0x184>)
 80077ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <pvPortMalloc+0x178>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077c2:	f7fe fc8d 	bl	80060e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <pvPortMalloc+0x16a>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	60fb      	str	r3, [r7, #12]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <pvPortMalloc+0x168>
	return pvReturn;
 80077e6:	69fb      	ldr	r3, [r7, #28]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3728      	adds	r7, #40	; 0x28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200031bc 	.word	0x200031bc
 80077f4:	200031c8 	.word	0x200031c8
 80077f8:	200031c0 	.word	0x200031c0
 80077fc:	200031b4 	.word	0x200031b4
 8007800:	200031c4 	.word	0x200031c4

08007804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d048      	beq.n	80078a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007816:	2308      	movs	r3, #8
 8007818:	425b      	negs	r3, r3
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	4413      	add	r3, r2
 800781e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	4b21      	ldr	r3, [pc, #132]	; (80078b0 <vPortFree+0xac>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <vPortFree+0x44>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <vPortFree+0x62>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60bb      	str	r3, [r7, #8]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <vPortFree+0xac>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d019      	beq.n	80078a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d115      	bne.n	80078a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <vPortFree+0xac>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	43db      	mvns	r3, r3
 8007886:	401a      	ands	r2, r3
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800788c:	f7fe fc1a 	bl	80060c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <vPortFree+0xb0>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4413      	add	r3, r2
 800789a:	4a06      	ldr	r2, [pc, #24]	; (80078b4 <vPortFree+0xb0>)
 800789c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800789e:	6938      	ldr	r0, [r7, #16]
 80078a0:	f000 f86c 	bl	800797c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80078a4:	f7fe fc1c 	bl	80060e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078a8:	bf00      	nop
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200031c8 	.word	0x200031c8
 80078b4:	200031c0 	.word	0x200031c0

080078b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078c4:	4b27      	ldr	r3, [pc, #156]	; (8007964 <prvHeapInit+0xac>)
 80078c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00c      	beq.n	80078ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3307      	adds	r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0307 	bic.w	r3, r3, #7
 80078de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <prvHeapInit+0xac>)
 80078e8:	4413      	add	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078f0:	4a1d      	ldr	r2, [pc, #116]	; (8007968 <prvHeapInit+0xb0>)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078f6:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <prvHeapInit+0xb0>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007904:	2208      	movs	r2, #8
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0307 	bic.w	r3, r3, #7
 8007912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4a15      	ldr	r2, [pc, #84]	; (800796c <prvHeapInit+0xb4>)
 8007918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <prvHeapInit+0xb4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <prvHeapInit+0xb4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	1ad2      	subs	r2, r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <prvHeapInit+0xb4>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <prvHeapInit+0xb8>)
 8007946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4a09      	ldr	r2, [pc, #36]	; (8007974 <prvHeapInit+0xbc>)
 800794e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <prvHeapInit+0xc0>)
 8007952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007956:	601a      	str	r2, [r3, #0]
}
 8007958:	bf00      	nop
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	200011b4 	.word	0x200011b4
 8007968:	200031b4 	.word	0x200031b4
 800796c:	200031bc 	.word	0x200031bc
 8007970:	200031c4 	.word	0x200031c4
 8007974:	200031c0 	.word	0x200031c0
 8007978:	200031c8 	.word	0x200031c8

0800797c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <prvInsertBlockIntoFreeList+0xa8>)
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e002      	b.n	8007990 <prvInsertBlockIntoFreeList+0x14>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d8f7      	bhi.n	800798a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	4413      	add	r3, r2
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d108      	bne.n	80079be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	441a      	add	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	441a      	add	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d118      	bne.n	8007a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <prvInsertBlockIntoFreeList+0xac>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d00d      	beq.n	80079fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	441a      	add	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e008      	b.n	8007a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079fa:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <prvInsertBlockIntoFreeList+0xac>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	e003      	b.n	8007a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d002      	beq.n	8007a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr
 8007a24:	200031b4 	.word	0x200031b4
 8007a28:	200031bc 	.word	0x200031bc

08007a2c <__errno>:
 8007a2c:	4b01      	ldr	r3, [pc, #4]	; (8007a34 <__errno+0x8>)
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20000010 	.word	0x20000010

08007a38 <std>:
 8007a38:	2300      	movs	r3, #0
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a46:	6083      	str	r3, [r0, #8]
 8007a48:	8181      	strh	r1, [r0, #12]
 8007a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a4c:	81c2      	strh	r2, [r0, #14]
 8007a4e:	6183      	str	r3, [r0, #24]
 8007a50:	4619      	mov	r1, r3
 8007a52:	2208      	movs	r2, #8
 8007a54:	305c      	adds	r0, #92	; 0x5c
 8007a56:	f000 f91a 	bl	8007c8e <memset>
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <std+0x38>)
 8007a5c:	6224      	str	r4, [r4, #32]
 8007a5e:	6263      	str	r3, [r4, #36]	; 0x24
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <std+0x3c>)
 8007a62:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <std+0x40>)
 8007a66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <std+0x44>)
 8007a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a6c:	bd10      	pop	{r4, pc}
 8007a6e:	bf00      	nop
 8007a70:	08008be1 	.word	0x08008be1
 8007a74:	08008c03 	.word	0x08008c03
 8007a78:	08008c3b 	.word	0x08008c3b
 8007a7c:	08008c5f 	.word	0x08008c5f

08007a80 <_cleanup_r>:
 8007a80:	4901      	ldr	r1, [pc, #4]	; (8007a88 <_cleanup_r+0x8>)
 8007a82:	f000 b8af 	b.w	8007be4 <_fwalk_reent>
 8007a86:	bf00      	nop
 8007a88:	0800a7c1 	.word	0x0800a7c1

08007a8c <__sfmoreglue>:
 8007a8c:	2268      	movs	r2, #104	; 0x68
 8007a8e:	b570      	push	{r4, r5, r6, lr}
 8007a90:	1e4d      	subs	r5, r1, #1
 8007a92:	4355      	muls	r5, r2
 8007a94:	460e      	mov	r6, r1
 8007a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a9a:	f000 f921 	bl	8007ce0 <_malloc_r>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b140      	cbz	r0, 8007ab4 <__sfmoreglue+0x28>
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	60a0      	str	r0, [r4, #8]
 8007aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ab0:	f000 f8ed 	bl	8007c8e <memset>
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}

08007ab8 <__sfp_lock_acquire>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__sfp_lock_acquire+0x8>)
 8007aba:	f000 b8d8 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007abe:	bf00      	nop
 8007ac0:	200031cd 	.word	0x200031cd

08007ac4 <__sfp_lock_release>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	; (8007acc <__sfp_lock_release+0x8>)
 8007ac6:	f000 b8d3 	b.w	8007c70 <__retarget_lock_release_recursive>
 8007aca:	bf00      	nop
 8007acc:	200031cd 	.word	0x200031cd

08007ad0 <__sinit_lock_acquire>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__sinit_lock_acquire+0x8>)
 8007ad2:	f000 b8cc 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	200031ce 	.word	0x200031ce

08007adc <__sinit_lock_release>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__sinit_lock_release+0x8>)
 8007ade:	f000 b8c7 	b.w	8007c70 <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	200031ce 	.word	0x200031ce

08007ae8 <__sinit>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	f7ff fff0 	bl	8007ad0 <__sinit_lock_acquire>
 8007af0:	69a3      	ldr	r3, [r4, #24]
 8007af2:	b11b      	cbz	r3, 8007afc <__sinit+0x14>
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f7ff bff0 	b.w	8007adc <__sinit_lock_release>
 8007afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b00:	6523      	str	r3, [r4, #80]	; 0x50
 8007b02:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <__sinit+0x68>)
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <__sinit+0x6c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	bf08      	it	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	4620      	mov	r0, r4
 8007b12:	bf08      	it	eq
 8007b14:	61a3      	streq	r3, [r4, #24]
 8007b16:	f000 f81f 	bl	8007b58 <__sfp>
 8007b1a:	6060      	str	r0, [r4, #4]
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f000 f81b 	bl	8007b58 <__sfp>
 8007b22:	60a0      	str	r0, [r4, #8]
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 f817 	bl	8007b58 <__sfp>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	60e0      	str	r0, [r4, #12]
 8007b30:	6860      	ldr	r0, [r4, #4]
 8007b32:	f7ff ff81 	bl	8007a38 <std>
 8007b36:	2201      	movs	r2, #1
 8007b38:	2109      	movs	r1, #9
 8007b3a:	68a0      	ldr	r0, [r4, #8]
 8007b3c:	f7ff ff7c 	bl	8007a38 <std>
 8007b40:	2202      	movs	r2, #2
 8007b42:	2112      	movs	r1, #18
 8007b44:	68e0      	ldr	r0, [r4, #12]
 8007b46:	f7ff ff77 	bl	8007a38 <std>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	61a3      	str	r3, [r4, #24]
 8007b4e:	e7d1      	b.n	8007af4 <__sinit+0xc>
 8007b50:	0800c774 	.word	0x0800c774
 8007b54:	08007a81 	.word	0x08007a81

08007b58 <__sfp>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f7ff ffac 	bl	8007ab8 <__sfp_lock_acquire>
 8007b60:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <__sfp+0x84>)
 8007b62:	681e      	ldr	r6, [r3, #0]
 8007b64:	69b3      	ldr	r3, [r6, #24]
 8007b66:	b913      	cbnz	r3, 8007b6e <__sfp+0x16>
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff ffbd 	bl	8007ae8 <__sinit>
 8007b6e:	3648      	adds	r6, #72	; 0x48
 8007b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	d503      	bpl.n	8007b80 <__sfp+0x28>
 8007b78:	6833      	ldr	r3, [r6, #0]
 8007b7a:	b30b      	cbz	r3, 8007bc0 <__sfp+0x68>
 8007b7c:	6836      	ldr	r6, [r6, #0]
 8007b7e:	e7f7      	b.n	8007b70 <__sfp+0x18>
 8007b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b84:	b9d5      	cbnz	r5, 8007bbc <__sfp+0x64>
 8007b86:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <__sfp+0x88>)
 8007b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b8c:	60e3      	str	r3, [r4, #12]
 8007b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8007b90:	f000 f86c 	bl	8007c6c <__retarget_lock_init_recursive>
 8007b94:	f7ff ff96 	bl	8007ac4 <__sfp_lock_release>
 8007b98:	2208      	movs	r2, #8
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ba4:	6025      	str	r5, [r4, #0]
 8007ba6:	61a5      	str	r5, [r4, #24]
 8007ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bac:	f000 f86f 	bl	8007c8e <memset>
 8007bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbc:	3468      	adds	r4, #104	; 0x68
 8007bbe:	e7d9      	b.n	8007b74 <__sfp+0x1c>
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f7ff ff62 	bl	8007a8c <__sfmoreglue>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	6030      	str	r0, [r6, #0]
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d1d5      	bne.n	8007b7c <__sfp+0x24>
 8007bd0:	f7ff ff78 	bl	8007ac4 <__sfp_lock_release>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	e7ee      	b.n	8007bb8 <__sfp+0x60>
 8007bda:	bf00      	nop
 8007bdc:	0800c774 	.word	0x0800c774
 8007be0:	ffff0001 	.word	0xffff0001

08007be4 <_fwalk_reent>:
 8007be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	4606      	mov	r6, r0
 8007bea:	4688      	mov	r8, r1
 8007bec:	2700      	movs	r7, #0
 8007bee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8007bfa:	d505      	bpl.n	8007c08 <_fwalk_reent+0x24>
 8007bfc:	6824      	ldr	r4, [r4, #0]
 8007bfe:	2c00      	cmp	r4, #0
 8007c00:	d1f7      	bne.n	8007bf2 <_fwalk_reent+0xe>
 8007c02:	4638      	mov	r0, r7
 8007c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c08:	89ab      	ldrh	r3, [r5, #12]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d907      	bls.n	8007c1e <_fwalk_reent+0x3a>
 8007c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c12:	3301      	adds	r3, #1
 8007c14:	d003      	beq.n	8007c1e <_fwalk_reent+0x3a>
 8007c16:	4629      	mov	r1, r5
 8007c18:	4630      	mov	r0, r6
 8007c1a:	47c0      	blx	r8
 8007c1c:	4307      	orrs	r7, r0
 8007c1e:	3568      	adds	r5, #104	; 0x68
 8007c20:	e7e9      	b.n	8007bf6 <_fwalk_reent+0x12>
	...

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	2600      	movs	r6, #0
 8007c28:	4d0c      	ldr	r5, [pc, #48]	; (8007c5c <__libc_init_array+0x38>)
 8007c2a:	4c0d      	ldr	r4, [pc, #52]	; (8007c60 <__libc_init_array+0x3c>)
 8007c2c:	1b64      	subs	r4, r4, r5
 8007c2e:	10a4      	asrs	r4, r4, #2
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	f004 fbc4 	bl	800c3c0 <_init>
 8007c38:	2600      	movs	r6, #0
 8007c3a:	4d0a      	ldr	r5, [pc, #40]	; (8007c64 <__libc_init_array+0x40>)
 8007c3c:	4c0a      	ldr	r4, [pc, #40]	; (8007c68 <__libc_init_array+0x44>)
 8007c3e:	1b64      	subs	r4, r4, r5
 8007c40:	10a4      	asrs	r4, r4, #2
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	0800cbbc 	.word	0x0800cbbc
 8007c60:	0800cbbc 	.word	0x0800cbbc
 8007c64:	0800cbbc 	.word	0x0800cbbc
 8007c68:	0800cbc0 	.word	0x0800cbc0

08007c6c <__retarget_lock_init_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <__retarget_lock_acquire_recursive>:
 8007c6e:	4770      	bx	lr

08007c70 <__retarget_lock_release_recursive>:
 8007c70:	4770      	bx	lr

08007c72 <memcpy>:
 8007c72:	440a      	add	r2, r1
 8007c74:	4291      	cmp	r1, r2
 8007c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c7a:	d100      	bne.n	8007c7e <memcpy+0xc>
 8007c7c:	4770      	bx	lr
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c84:	4291      	cmp	r1, r2
 8007c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c8a:	d1f9      	bne.n	8007c80 <memcpy+0xe>
 8007c8c:	bd10      	pop	{r4, pc}

08007c8e <memset>:
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4402      	add	r2, r0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d100      	bne.n	8007c98 <memset+0xa>
 8007c96:	4770      	bx	lr
 8007c98:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9c:	e7f9      	b.n	8007c92 <memset+0x4>
	...

08007ca0 <sbrk_aligned>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4e0e      	ldr	r6, [pc, #56]	; (8007cdc <sbrk_aligned+0x3c>)
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	6831      	ldr	r1, [r6, #0]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	b911      	cbnz	r1, 8007cb2 <sbrk_aligned+0x12>
 8007cac:	f000 ff64 	bl	8008b78 <_sbrk_r>
 8007cb0:	6030      	str	r0, [r6, #0]
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 ff5f 	bl	8008b78 <_sbrk_r>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d00a      	beq.n	8007cd4 <sbrk_aligned+0x34>
 8007cbe:	1cc4      	adds	r4, r0, #3
 8007cc0:	f024 0403 	bic.w	r4, r4, #3
 8007cc4:	42a0      	cmp	r0, r4
 8007cc6:	d007      	beq.n	8007cd8 <sbrk_aligned+0x38>
 8007cc8:	1a21      	subs	r1, r4, r0
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 ff54 	bl	8008b78 <_sbrk_r>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d101      	bne.n	8007cd8 <sbrk_aligned+0x38>
 8007cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8007cd8:	4620      	mov	r0, r4
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
 8007cdc:	200031d4 	.word	0x200031d4

08007ce0 <_malloc_r>:
 8007ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce4:	1ccd      	adds	r5, r1, #3
 8007ce6:	f025 0503 	bic.w	r5, r5, #3
 8007cea:	3508      	adds	r5, #8
 8007cec:	2d0c      	cmp	r5, #12
 8007cee:	bf38      	it	cc
 8007cf0:	250c      	movcc	r5, #12
 8007cf2:	2d00      	cmp	r5, #0
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	db01      	blt.n	8007cfc <_malloc_r+0x1c>
 8007cf8:	42a9      	cmp	r1, r5
 8007cfa:	d905      	bls.n	8007d08 <_malloc_r+0x28>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	2600      	movs	r6, #0
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4630      	mov	r0, r6
 8007d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d08:	4e2e      	ldr	r6, [pc, #184]	; (8007dc4 <_malloc_r+0xe4>)
 8007d0a:	f003 f939 	bl	800af80 <__malloc_lock>
 8007d0e:	6833      	ldr	r3, [r6, #0]
 8007d10:	461c      	mov	r4, r3
 8007d12:	bb34      	cbnz	r4, 8007d62 <_malloc_r+0x82>
 8007d14:	4629      	mov	r1, r5
 8007d16:	4638      	mov	r0, r7
 8007d18:	f7ff ffc2 	bl	8007ca0 <sbrk_aligned>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	4604      	mov	r4, r0
 8007d20:	d14d      	bne.n	8007dbe <_malloc_r+0xde>
 8007d22:	6834      	ldr	r4, [r6, #0]
 8007d24:	4626      	mov	r6, r4
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	d140      	bne.n	8007dac <_malloc_r+0xcc>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4638      	mov	r0, r7
 8007d30:	eb04 0803 	add.w	r8, r4, r3
 8007d34:	f000 ff20 	bl	8008b78 <_sbrk_r>
 8007d38:	4580      	cmp	r8, r0
 8007d3a:	d13a      	bne.n	8007db2 <_malloc_r+0xd2>
 8007d3c:	6821      	ldr	r1, [r4, #0]
 8007d3e:	3503      	adds	r5, #3
 8007d40:	1a6d      	subs	r5, r5, r1
 8007d42:	f025 0503 	bic.w	r5, r5, #3
 8007d46:	3508      	adds	r5, #8
 8007d48:	2d0c      	cmp	r5, #12
 8007d4a:	bf38      	it	cc
 8007d4c:	250c      	movcc	r5, #12
 8007d4e:	4638      	mov	r0, r7
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7ff ffa5 	bl	8007ca0 <sbrk_aligned>
 8007d56:	3001      	adds	r0, #1
 8007d58:	d02b      	beq.n	8007db2 <_malloc_r+0xd2>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	442b      	add	r3, r5
 8007d5e:	6023      	str	r3, [r4, #0]
 8007d60:	e00e      	b.n	8007d80 <_malloc_r+0xa0>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	1b52      	subs	r2, r2, r5
 8007d66:	d41e      	bmi.n	8007da6 <_malloc_r+0xc6>
 8007d68:	2a0b      	cmp	r2, #11
 8007d6a:	d916      	bls.n	8007d9a <_malloc_r+0xba>
 8007d6c:	1961      	adds	r1, r4, r5
 8007d6e:	42a3      	cmp	r3, r4
 8007d70:	6025      	str	r5, [r4, #0]
 8007d72:	bf18      	it	ne
 8007d74:	6059      	strne	r1, [r3, #4]
 8007d76:	6863      	ldr	r3, [r4, #4]
 8007d78:	bf08      	it	eq
 8007d7a:	6031      	streq	r1, [r6, #0]
 8007d7c:	5162      	str	r2, [r4, r5]
 8007d7e:	604b      	str	r3, [r1, #4]
 8007d80:	4638      	mov	r0, r7
 8007d82:	f104 060b 	add.w	r6, r4, #11
 8007d86:	f003 f901 	bl	800af8c <__malloc_unlock>
 8007d8a:	f026 0607 	bic.w	r6, r6, #7
 8007d8e:	1d23      	adds	r3, r4, #4
 8007d90:	1af2      	subs	r2, r6, r3
 8007d92:	d0b6      	beq.n	8007d02 <_malloc_r+0x22>
 8007d94:	1b9b      	subs	r3, r3, r6
 8007d96:	50a3      	str	r3, [r4, r2]
 8007d98:	e7b3      	b.n	8007d02 <_malloc_r+0x22>
 8007d9a:	6862      	ldr	r2, [r4, #4]
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	bf0c      	ite	eq
 8007da0:	6032      	streq	r2, [r6, #0]
 8007da2:	605a      	strne	r2, [r3, #4]
 8007da4:	e7ec      	b.n	8007d80 <_malloc_r+0xa0>
 8007da6:	4623      	mov	r3, r4
 8007da8:	6864      	ldr	r4, [r4, #4]
 8007daa:	e7b2      	b.n	8007d12 <_malloc_r+0x32>
 8007dac:	4634      	mov	r4, r6
 8007dae:	6876      	ldr	r6, [r6, #4]
 8007db0:	e7b9      	b.n	8007d26 <_malloc_r+0x46>
 8007db2:	230c      	movs	r3, #12
 8007db4:	4638      	mov	r0, r7
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	f003 f8e8 	bl	800af8c <__malloc_unlock>
 8007dbc:	e7a1      	b.n	8007d02 <_malloc_r+0x22>
 8007dbe:	6025      	str	r5, [r4, #0]
 8007dc0:	e7de      	b.n	8007d80 <_malloc_r+0xa0>
 8007dc2:	bf00      	nop
 8007dc4:	200031d0 	.word	0x200031d0

08007dc8 <__cvt>:
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dce:	461f      	mov	r7, r3
 8007dd0:	bfbb      	ittet	lt
 8007dd2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007dd6:	461f      	movlt	r7, r3
 8007dd8:	2300      	movge	r3, #0
 8007dda:	232d      	movlt	r3, #45	; 0x2d
 8007ddc:	b088      	sub	sp, #32
 8007dde:	4614      	mov	r4, r2
 8007de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007de2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007de4:	7013      	strb	r3, [r2, #0]
 8007de6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007de8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007dec:	f023 0820 	bic.w	r8, r3, #32
 8007df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007df4:	d005      	beq.n	8007e02 <__cvt+0x3a>
 8007df6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dfa:	d100      	bne.n	8007dfe <__cvt+0x36>
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e000      	b.n	8007e04 <__cvt+0x3c>
 8007e02:	2303      	movs	r3, #3
 8007e04:	aa07      	add	r2, sp, #28
 8007e06:	9204      	str	r2, [sp, #16]
 8007e08:	aa06      	add	r2, sp, #24
 8007e0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007e0e:	e9cd 3500 	strd	r3, r5, [sp]
 8007e12:	4622      	mov	r2, r4
 8007e14:	463b      	mov	r3, r7
 8007e16:	f001 fe63 	bl	8009ae0 <_dtoa_r>
 8007e1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e1e:	4606      	mov	r6, r0
 8007e20:	d102      	bne.n	8007e28 <__cvt+0x60>
 8007e22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e24:	07db      	lsls	r3, r3, #31
 8007e26:	d522      	bpl.n	8007e6e <__cvt+0xa6>
 8007e28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e2c:	eb06 0905 	add.w	r9, r6, r5
 8007e30:	d110      	bne.n	8007e54 <__cvt+0x8c>
 8007e32:	7833      	ldrb	r3, [r6, #0]
 8007e34:	2b30      	cmp	r3, #48	; 0x30
 8007e36:	d10a      	bne.n	8007e4e <__cvt+0x86>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7f8 fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8007e44:	b918      	cbnz	r0, 8007e4e <__cvt+0x86>
 8007e46:	f1c5 0501 	rsb	r5, r5, #1
 8007e4a:	f8ca 5000 	str.w	r5, [sl]
 8007e4e:	f8da 3000 	ldr.w	r3, [sl]
 8007e52:	4499      	add	r9, r3
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	4620      	mov	r0, r4
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	f7f8 fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8007e60:	b108      	cbz	r0, 8007e66 <__cvt+0x9e>
 8007e62:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e66:	2230      	movs	r2, #48	; 0x30
 8007e68:	9b07      	ldr	r3, [sp, #28]
 8007e6a:	454b      	cmp	r3, r9
 8007e6c:	d307      	bcc.n	8007e7e <__cvt+0xb6>
 8007e6e:	4630      	mov	r0, r6
 8007e70:	9b07      	ldr	r3, [sp, #28]
 8007e72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e74:	1b9b      	subs	r3, r3, r6
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	b008      	add	sp, #32
 8007e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7e:	1c59      	adds	r1, r3, #1
 8007e80:	9107      	str	r1, [sp, #28]
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	e7f0      	b.n	8007e68 <__cvt+0xa0>

08007e86 <__exponent>:
 8007e86:	4603      	mov	r3, r0
 8007e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8a:	2900      	cmp	r1, #0
 8007e8c:	f803 2b02 	strb.w	r2, [r3], #2
 8007e90:	bfb6      	itet	lt
 8007e92:	222d      	movlt	r2, #45	; 0x2d
 8007e94:	222b      	movge	r2, #43	; 0x2b
 8007e96:	4249      	neglt	r1, r1
 8007e98:	2909      	cmp	r1, #9
 8007e9a:	7042      	strb	r2, [r0, #1]
 8007e9c:	dd2b      	ble.n	8007ef6 <__exponent+0x70>
 8007e9e:	f10d 0407 	add.w	r4, sp, #7
 8007ea2:	46a4      	mov	ip, r4
 8007ea4:	270a      	movs	r7, #10
 8007ea6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007eaa:	460a      	mov	r2, r1
 8007eac:	46a6      	mov	lr, r4
 8007eae:	fb07 1516 	mls	r5, r7, r6, r1
 8007eb2:	2a63      	cmp	r2, #99	; 0x63
 8007eb4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007eb8:	4631      	mov	r1, r6
 8007eba:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ebe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ec2:	dcf0      	bgt.n	8007ea6 <__exponent+0x20>
 8007ec4:	3130      	adds	r1, #48	; 0x30
 8007ec6:	f1ae 0502 	sub.w	r5, lr, #2
 8007eca:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ece:	4629      	mov	r1, r5
 8007ed0:	1c44      	adds	r4, r0, #1
 8007ed2:	4561      	cmp	r1, ip
 8007ed4:	d30a      	bcc.n	8007eec <__exponent+0x66>
 8007ed6:	f10d 0209 	add.w	r2, sp, #9
 8007eda:	eba2 020e 	sub.w	r2, r2, lr
 8007ede:	4565      	cmp	r5, ip
 8007ee0:	bf88      	it	hi
 8007ee2:	2200      	movhi	r2, #0
 8007ee4:	4413      	add	r3, r2
 8007ee6:	1a18      	subs	r0, r3, r0
 8007ee8:	b003      	add	sp, #12
 8007eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ef4:	e7ed      	b.n	8007ed2 <__exponent+0x4c>
 8007ef6:	2330      	movs	r3, #48	; 0x30
 8007ef8:	3130      	adds	r1, #48	; 0x30
 8007efa:	7083      	strb	r3, [r0, #2]
 8007efc:	70c1      	strb	r1, [r0, #3]
 8007efe:	1d03      	adds	r3, r0, #4
 8007f00:	e7f1      	b.n	8007ee6 <__exponent+0x60>
	...

08007f04 <_printf_float>:
 8007f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	b091      	sub	sp, #68	; 0x44
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007f10:	4616      	mov	r6, r2
 8007f12:	461f      	mov	r7, r3
 8007f14:	4605      	mov	r5, r0
 8007f16:	f002 fff5 	bl	800af04 <_localeconv_r>
 8007f1a:	6803      	ldr	r3, [r0, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	f7f8 f916 	bl	8000150 <strlen>
 8007f24:	2300      	movs	r3, #0
 8007f26:	930e      	str	r3, [sp, #56]	; 0x38
 8007f28:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2c:	900a      	str	r0, [sp, #40]	; 0x28
 8007f2e:	3307      	adds	r3, #7
 8007f30:	f023 0307 	bic.w	r3, r3, #7
 8007f34:	f103 0208 	add.w	r2, r3, #8
 8007f38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f3c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f40:	f8c8 2000 	str.w	r2, [r8]
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007f50:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4b9c      	ldr	r3, [pc, #624]	; (80081d0 <_printf_float+0x2cc>)
 8007f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f60:	f7f8 fd54 	bl	8000a0c <__aeabi_dcmpun>
 8007f64:	bb70      	cbnz	r0, 8007fc4 <_printf_float+0xc0>
 8007f66:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	4b98      	ldr	r3, [pc, #608]	; (80081d0 <_printf_float+0x2cc>)
 8007f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f70:	f7f8 fd2e 	bl	80009d0 <__aeabi_dcmple>
 8007f74:	bb30      	cbnz	r0, 8007fc4 <_printf_float+0xc0>
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	f7f8 fd1d 	bl	80009bc <__aeabi_dcmplt>
 8007f82:	b110      	cbz	r0, 8007f8a <_printf_float+0x86>
 8007f84:	232d      	movs	r3, #45	; 0x2d
 8007f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f8a:	4b92      	ldr	r3, [pc, #584]	; (80081d4 <_printf_float+0x2d0>)
 8007f8c:	4892      	ldr	r0, [pc, #584]	; (80081d8 <_printf_float+0x2d4>)
 8007f8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007f92:	bf94      	ite	ls
 8007f94:	4698      	movls	r8, r3
 8007f96:	4680      	movhi	r8, r0
 8007f98:	2303      	movs	r3, #3
 8007f9a:	f04f 0a00 	mov.w	sl, #0
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	f02b 0304 	bic.w	r3, fp, #4
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	4633      	mov	r3, r6
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4628      	mov	r0, r5
 8007fac:	9700      	str	r7, [sp, #0]
 8007fae:	aa0f      	add	r2, sp, #60	; 0x3c
 8007fb0:	f000 f9d4 	bl	800835c <_printf_common>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f040 8090 	bne.w	80080da <_printf_float+0x1d6>
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbe:	b011      	add	sp, #68	; 0x44
 8007fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	4653      	mov	r3, sl
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4651      	mov	r1, sl
 8007fcc:	f7f8 fd1e 	bl	8000a0c <__aeabi_dcmpun>
 8007fd0:	b148      	cbz	r0, 8007fe6 <_printf_float+0xe2>
 8007fd2:	f1ba 0f00 	cmp.w	sl, #0
 8007fd6:	bfb8      	it	lt
 8007fd8:	232d      	movlt	r3, #45	; 0x2d
 8007fda:	4880      	ldr	r0, [pc, #512]	; (80081dc <_printf_float+0x2d8>)
 8007fdc:	bfb8      	it	lt
 8007fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fe2:	4b7f      	ldr	r3, [pc, #508]	; (80081e0 <_printf_float+0x2dc>)
 8007fe4:	e7d3      	b.n	8007f8e <_printf_float+0x8a>
 8007fe6:	6863      	ldr	r3, [r4, #4]
 8007fe8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	d142      	bne.n	8008076 <_printf_float+0x172>
 8007ff0:	2306      	movs	r3, #6
 8007ff2:	6063      	str	r3, [r4, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	9206      	str	r2, [sp, #24]
 8007ff8:	aa0e      	add	r2, sp, #56	; 0x38
 8007ffa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007ffe:	aa0d      	add	r2, sp, #52	; 0x34
 8008000:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008004:	9203      	str	r2, [sp, #12]
 8008006:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800800a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	4642      	mov	r2, r8
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	4628      	mov	r0, r5
 8008018:	4653      	mov	r3, sl
 800801a:	910b      	str	r1, [sp, #44]	; 0x2c
 800801c:	f7ff fed4 	bl	8007dc8 <__cvt>
 8008020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008022:	4680      	mov	r8, r0
 8008024:	2947      	cmp	r1, #71	; 0x47
 8008026:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008028:	d108      	bne.n	800803c <_printf_float+0x138>
 800802a:	1cc8      	adds	r0, r1, #3
 800802c:	db02      	blt.n	8008034 <_printf_float+0x130>
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	4299      	cmp	r1, r3
 8008032:	dd40      	ble.n	80080b6 <_printf_float+0x1b2>
 8008034:	f1a9 0902 	sub.w	r9, r9, #2
 8008038:	fa5f f989 	uxtb.w	r9, r9
 800803c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008040:	d81f      	bhi.n	8008082 <_printf_float+0x17e>
 8008042:	464a      	mov	r2, r9
 8008044:	3901      	subs	r1, #1
 8008046:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800804a:	910d      	str	r1, [sp, #52]	; 0x34
 800804c:	f7ff ff1b 	bl	8007e86 <__exponent>
 8008050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008052:	4682      	mov	sl, r0
 8008054:	1813      	adds	r3, r2, r0
 8008056:	2a01      	cmp	r2, #1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	dc02      	bgt.n	8008062 <_printf_float+0x15e>
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	07d2      	lsls	r2, r2, #31
 8008060:	d501      	bpl.n	8008066 <_printf_float+0x162>
 8008062:	3301      	adds	r3, #1
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800806a:	2b00      	cmp	r3, #0
 800806c:	d09b      	beq.n	8007fa6 <_printf_float+0xa2>
 800806e:	232d      	movs	r3, #45	; 0x2d
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008074:	e797      	b.n	8007fa6 <_printf_float+0xa2>
 8008076:	2947      	cmp	r1, #71	; 0x47
 8008078:	d1bc      	bne.n	8007ff4 <_printf_float+0xf0>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1ba      	bne.n	8007ff4 <_printf_float+0xf0>
 800807e:	2301      	movs	r3, #1
 8008080:	e7b7      	b.n	8007ff2 <_printf_float+0xee>
 8008082:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008086:	d118      	bne.n	80080ba <_printf_float+0x1b6>
 8008088:	2900      	cmp	r1, #0
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	dd0b      	ble.n	80080a6 <_printf_float+0x1a2>
 800808e:	6121      	str	r1, [r4, #16]
 8008090:	b913      	cbnz	r3, 8008098 <_printf_float+0x194>
 8008092:	6822      	ldr	r2, [r4, #0]
 8008094:	07d0      	lsls	r0, r2, #31
 8008096:	d502      	bpl.n	800809e <_printf_float+0x19a>
 8008098:	3301      	adds	r3, #1
 800809a:	440b      	add	r3, r1
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	f04f 0a00 	mov.w	sl, #0
 80080a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80080a4:	e7df      	b.n	8008066 <_printf_float+0x162>
 80080a6:	b913      	cbnz	r3, 80080ae <_printf_float+0x1aa>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	07d2      	lsls	r2, r2, #31
 80080ac:	d501      	bpl.n	80080b2 <_printf_float+0x1ae>
 80080ae:	3302      	adds	r3, #2
 80080b0:	e7f4      	b.n	800809c <_printf_float+0x198>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7f2      	b.n	800809c <_printf_float+0x198>
 80080b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80080ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080bc:	4299      	cmp	r1, r3
 80080be:	db05      	blt.n	80080cc <_printf_float+0x1c8>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	6121      	str	r1, [r4, #16]
 80080c4:	07d8      	lsls	r0, r3, #31
 80080c6:	d5ea      	bpl.n	800809e <_printf_float+0x19a>
 80080c8:	1c4b      	adds	r3, r1, #1
 80080ca:	e7e7      	b.n	800809c <_printf_float+0x198>
 80080cc:	2900      	cmp	r1, #0
 80080ce:	bfcc      	ite	gt
 80080d0:	2201      	movgt	r2, #1
 80080d2:	f1c1 0202 	rsble	r2, r1, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	e7e0      	b.n	800809c <_printf_float+0x198>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	055a      	lsls	r2, r3, #21
 80080de:	d407      	bmi.n	80080f0 <_printf_float+0x1ec>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	4642      	mov	r2, r8
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	d12b      	bne.n	8008146 <_printf_float+0x242>
 80080ee:	e764      	b.n	8007fba <_printf_float+0xb6>
 80080f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080f4:	f240 80dd 	bls.w	80082b2 <_printf_float+0x3ae>
 80080f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080fc:	2200      	movs	r2, #0
 80080fe:	2300      	movs	r3, #0
 8008100:	f7f8 fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8008104:	2800      	cmp	r0, #0
 8008106:	d033      	beq.n	8008170 <_printf_float+0x26c>
 8008108:	2301      	movs	r3, #1
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	4a35      	ldr	r2, [pc, #212]	; (80081e4 <_printf_float+0x2e0>)
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f af51 	beq.w	8007fba <_printf_float+0xb6>
 8008118:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800811c:	429a      	cmp	r2, r3
 800811e:	db02      	blt.n	8008126 <_printf_float+0x222>
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	07d8      	lsls	r0, r3, #31
 8008124:	d50f      	bpl.n	8008146 <_printf_float+0x242>
 8008126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f af42 	beq.w	8007fba <_printf_float+0xb6>
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	f104 091a 	add.w	r9, r4, #26
 800813e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008140:	3b01      	subs	r3, #1
 8008142:	4543      	cmp	r3, r8
 8008144:	dc09      	bgt.n	800815a <_printf_float+0x256>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	079b      	lsls	r3, r3, #30
 800814a:	f100 8102 	bmi.w	8008352 <_printf_float+0x44e>
 800814e:	68e0      	ldr	r0, [r4, #12]
 8008150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008152:	4298      	cmp	r0, r3
 8008154:	bfb8      	it	lt
 8008156:	4618      	movlt	r0, r3
 8008158:	e731      	b.n	8007fbe <_printf_float+0xba>
 800815a:	2301      	movs	r3, #1
 800815c:	464a      	mov	r2, r9
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	f43f af28 	beq.w	8007fba <_printf_float+0xb6>
 800816a:	f108 0801 	add.w	r8, r8, #1
 800816e:	e7e6      	b.n	800813e <_printf_float+0x23a>
 8008170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc38      	bgt.n	80081e8 <_printf_float+0x2e4>
 8008176:	2301      	movs	r3, #1
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	4a19      	ldr	r2, [pc, #100]	; (80081e4 <_printf_float+0x2e0>)
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f af1a 	beq.w	8007fba <_printf_float+0xb6>
 8008186:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800818a:	4313      	orrs	r3, r2
 800818c:	d102      	bne.n	8008194 <_printf_float+0x290>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	07d9      	lsls	r1, r3, #31
 8008192:	d5d8      	bpl.n	8008146 <_printf_float+0x242>
 8008194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008198:	4631      	mov	r1, r6
 800819a:	4628      	mov	r0, r5
 800819c:	47b8      	blx	r7
 800819e:	3001      	adds	r0, #1
 80081a0:	f43f af0b 	beq.w	8007fba <_printf_float+0xb6>
 80081a4:	f04f 0900 	mov.w	r9, #0
 80081a8:	f104 0a1a 	add.w	sl, r4, #26
 80081ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081ae:	425b      	negs	r3, r3
 80081b0:	454b      	cmp	r3, r9
 80081b2:	dc01      	bgt.n	80081b8 <_printf_float+0x2b4>
 80081b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b6:	e794      	b.n	80080e2 <_printf_float+0x1de>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4652      	mov	r2, sl
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f aef9 	beq.w	8007fba <_printf_float+0xb6>
 80081c8:	f109 0901 	add.w	r9, r9, #1
 80081cc:	e7ee      	b.n	80081ac <_printf_float+0x2a8>
 80081ce:	bf00      	nop
 80081d0:	7fefffff 	.word	0x7fefffff
 80081d4:	0800c778 	.word	0x0800c778
 80081d8:	0800c77c 	.word	0x0800c77c
 80081dc:	0800c784 	.word	0x0800c784
 80081e0:	0800c780 	.word	0x0800c780
 80081e4:	0800c788 	.word	0x0800c788
 80081e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ec:	429a      	cmp	r2, r3
 80081ee:	bfa8      	it	ge
 80081f0:	461a      	movge	r2, r3
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	4691      	mov	r9, r2
 80081f6:	dc37      	bgt.n	8008268 <_printf_float+0x364>
 80081f8:	f04f 0b00 	mov.w	fp, #0
 80081fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008200:	f104 021a 	add.w	r2, r4, #26
 8008204:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008208:	ebaa 0309 	sub.w	r3, sl, r9
 800820c:	455b      	cmp	r3, fp
 800820e:	dc33      	bgt.n	8008278 <_printf_float+0x374>
 8008210:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008214:	429a      	cmp	r2, r3
 8008216:	db3b      	blt.n	8008290 <_printf_float+0x38c>
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	07da      	lsls	r2, r3, #31
 800821c:	d438      	bmi.n	8008290 <_printf_float+0x38c>
 800821e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008220:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008222:	eba3 020a 	sub.w	r2, r3, sl
 8008226:	eba3 0901 	sub.w	r9, r3, r1
 800822a:	4591      	cmp	r9, r2
 800822c:	bfa8      	it	ge
 800822e:	4691      	movge	r9, r2
 8008230:	f1b9 0f00 	cmp.w	r9, #0
 8008234:	dc34      	bgt.n	80082a0 <_printf_float+0x39c>
 8008236:	f04f 0800 	mov.w	r8, #0
 800823a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800823e:	f104 0a1a 	add.w	sl, r4, #26
 8008242:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	eba3 0309 	sub.w	r3, r3, r9
 800824c:	4543      	cmp	r3, r8
 800824e:	f77f af7a 	ble.w	8008146 <_printf_float+0x242>
 8008252:	2301      	movs	r3, #1
 8008254:	4652      	mov	r2, sl
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	f43f aeac 	beq.w	8007fba <_printf_float+0xb6>
 8008262:	f108 0801 	add.w	r8, r8, #1
 8008266:	e7ec      	b.n	8008242 <_printf_float+0x33e>
 8008268:	4613      	mov	r3, r2
 800826a:	4631      	mov	r1, r6
 800826c:	4642      	mov	r2, r8
 800826e:	4628      	mov	r0, r5
 8008270:	47b8      	blx	r7
 8008272:	3001      	adds	r0, #1
 8008274:	d1c0      	bne.n	80081f8 <_printf_float+0x2f4>
 8008276:	e6a0      	b.n	8007fba <_printf_float+0xb6>
 8008278:	2301      	movs	r3, #1
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f ae99 	beq.w	8007fba <_printf_float+0xb6>
 8008288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800828a:	f10b 0b01 	add.w	fp, fp, #1
 800828e:	e7b9      	b.n	8008204 <_printf_float+0x300>
 8008290:	4631      	mov	r1, r6
 8008292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	d1bf      	bne.n	800821e <_printf_float+0x31a>
 800829e:	e68c      	b.n	8007fba <_printf_float+0xb6>
 80082a0:	464b      	mov	r3, r9
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	eb08 020a 	add.w	r2, r8, sl
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	d1c2      	bne.n	8008236 <_printf_float+0x332>
 80082b0:	e683      	b.n	8007fba <_printf_float+0xb6>
 80082b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082b4:	2a01      	cmp	r2, #1
 80082b6:	dc01      	bgt.n	80082bc <_printf_float+0x3b8>
 80082b8:	07db      	lsls	r3, r3, #31
 80082ba:	d537      	bpl.n	800832c <_printf_float+0x428>
 80082bc:	2301      	movs	r3, #1
 80082be:	4642      	mov	r2, r8
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f ae77 	beq.w	8007fba <_printf_float+0xb6>
 80082cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f ae6f 	beq.w	8007fba <_printf_float+0xb6>
 80082dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	f7f8 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80082e8:	b9d8      	cbnz	r0, 8008322 <_printf_float+0x41e>
 80082ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ec:	f108 0201 	add.w	r2, r8, #1
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	d10e      	bne.n	800831a <_printf_float+0x416>
 80082fc:	e65d      	b.n	8007fba <_printf_float+0xb6>
 80082fe:	2301      	movs	r3, #1
 8008300:	464a      	mov	r2, r9
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	f43f ae56 	beq.w	8007fba <_printf_float+0xb6>
 800830e:	f108 0801 	add.w	r8, r8, #1
 8008312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008314:	3b01      	subs	r3, #1
 8008316:	4543      	cmp	r3, r8
 8008318:	dcf1      	bgt.n	80082fe <_printf_float+0x3fa>
 800831a:	4653      	mov	r3, sl
 800831c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008320:	e6e0      	b.n	80080e4 <_printf_float+0x1e0>
 8008322:	f04f 0800 	mov.w	r8, #0
 8008326:	f104 091a 	add.w	r9, r4, #26
 800832a:	e7f2      	b.n	8008312 <_printf_float+0x40e>
 800832c:	2301      	movs	r3, #1
 800832e:	4642      	mov	r2, r8
 8008330:	e7df      	b.n	80082f2 <_printf_float+0x3ee>
 8008332:	2301      	movs	r3, #1
 8008334:	464a      	mov	r2, r9
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f ae3c 	beq.w	8007fba <_printf_float+0xb6>
 8008342:	f108 0801 	add.w	r8, r8, #1
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800834a:	1a5b      	subs	r3, r3, r1
 800834c:	4543      	cmp	r3, r8
 800834e:	dcf0      	bgt.n	8008332 <_printf_float+0x42e>
 8008350:	e6fd      	b.n	800814e <_printf_float+0x24a>
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	f104 0919 	add.w	r9, r4, #25
 800835a:	e7f4      	b.n	8008346 <_printf_float+0x442>

0800835c <_printf_common>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	4616      	mov	r6, r2
 8008362:	4699      	mov	r9, r3
 8008364:	688a      	ldr	r2, [r1, #8]
 8008366:	690b      	ldr	r3, [r1, #16]
 8008368:	4607      	mov	r7, r0
 800836a:	4293      	cmp	r3, r2
 800836c:	bfb8      	it	lt
 800836e:	4613      	movlt	r3, r2
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008376:	460c      	mov	r4, r1
 8008378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800837c:	b10a      	cbz	r2, 8008382 <_printf_common+0x26>
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	0699      	lsls	r1, r3, #26
 8008386:	bf42      	ittt	mi
 8008388:	6833      	ldrmi	r3, [r6, #0]
 800838a:	3302      	addmi	r3, #2
 800838c:	6033      	strmi	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	f015 0506 	ands.w	r5, r5, #6
 8008394:	d106      	bne.n	80083a4 <_printf_common+0x48>
 8008396:	f104 0a19 	add.w	sl, r4, #25
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc28      	bgt.n	80083f6 <_printf_common+0x9a>
 80083a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083a8:	1e13      	subs	r3, r2, #0
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	0692      	lsls	r2, r2, #26
 80083b2:	d42d      	bmi.n	8008410 <_printf_common+0xb4>
 80083b4:	4649      	mov	r1, r9
 80083b6:	4638      	mov	r0, r7
 80083b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083bc:	47c0      	blx	r8
 80083be:	3001      	adds	r0, #1
 80083c0:	d020      	beq.n	8008404 <_printf_common+0xa8>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	68e5      	ldr	r5, [r4, #12]
 80083c6:	f003 0306 	and.w	r3, r3, #6
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	bf18      	it	ne
 80083ce:	2500      	movne	r5, #0
 80083d0:	6832      	ldr	r2, [r6, #0]
 80083d2:	f04f 0600 	mov.w	r6, #0
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	bf08      	it	eq
 80083da:	1aad      	subeq	r5, r5, r2
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	bf08      	it	eq
 80083e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e4:	4293      	cmp	r3, r2
 80083e6:	bfc4      	itt	gt
 80083e8:	1a9b      	subgt	r3, r3, r2
 80083ea:	18ed      	addgt	r5, r5, r3
 80083ec:	341a      	adds	r4, #26
 80083ee:	42b5      	cmp	r5, r6
 80083f0:	d11a      	bne.n	8008428 <_printf_common+0xcc>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e008      	b.n	8008408 <_printf_common+0xac>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4652      	mov	r2, sl
 80083fa:	4649      	mov	r1, r9
 80083fc:	4638      	mov	r0, r7
 80083fe:	47c0      	blx	r8
 8008400:	3001      	adds	r0, #1
 8008402:	d103      	bne.n	800840c <_printf_common+0xb0>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840c:	3501      	adds	r5, #1
 800840e:	e7c4      	b.n	800839a <_printf_common+0x3e>
 8008410:	2030      	movs	r0, #48	; 0x30
 8008412:	18e1      	adds	r1, r4, r3
 8008414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800841e:	4422      	add	r2, r4
 8008420:	3302      	adds	r3, #2
 8008422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008426:	e7c5      	b.n	80083b4 <_printf_common+0x58>
 8008428:	2301      	movs	r3, #1
 800842a:	4622      	mov	r2, r4
 800842c:	4649      	mov	r1, r9
 800842e:	4638      	mov	r0, r7
 8008430:	47c0      	blx	r8
 8008432:	3001      	adds	r0, #1
 8008434:	d0e6      	beq.n	8008404 <_printf_common+0xa8>
 8008436:	3601      	adds	r6, #1
 8008438:	e7d9      	b.n	80083ee <_printf_common+0x92>
	...

0800843c <_printf_i>:
 800843c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	7e0f      	ldrb	r7, [r1, #24]
 8008442:	4691      	mov	r9, r2
 8008444:	2f78      	cmp	r7, #120	; 0x78
 8008446:	4680      	mov	r8, r0
 8008448:	460c      	mov	r4, r1
 800844a:	469a      	mov	sl, r3
 800844c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800844e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008452:	d807      	bhi.n	8008464 <_printf_i+0x28>
 8008454:	2f62      	cmp	r7, #98	; 0x62
 8008456:	d80a      	bhi.n	800846e <_printf_i+0x32>
 8008458:	2f00      	cmp	r7, #0
 800845a:	f000 80d9 	beq.w	8008610 <_printf_i+0x1d4>
 800845e:	2f58      	cmp	r7, #88	; 0x58
 8008460:	f000 80a4 	beq.w	80085ac <_printf_i+0x170>
 8008464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800846c:	e03a      	b.n	80084e4 <_printf_i+0xa8>
 800846e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008472:	2b15      	cmp	r3, #21
 8008474:	d8f6      	bhi.n	8008464 <_printf_i+0x28>
 8008476:	a101      	add	r1, pc, #4	; (adr r1, 800847c <_printf_i+0x40>)
 8008478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084e9 	.word	0x080084e9
 8008484:	08008465 	.word	0x08008465
 8008488:	08008465 	.word	0x08008465
 800848c:	08008465 	.word	0x08008465
 8008490:	08008465 	.word	0x08008465
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008465 	.word	0x08008465
 800849c:	08008465 	.word	0x08008465
 80084a0:	08008465 	.word	0x08008465
 80084a4:	08008465 	.word	0x08008465
 80084a8:	080085f7 	.word	0x080085f7
 80084ac:	08008519 	.word	0x08008519
 80084b0:	080085d9 	.word	0x080085d9
 80084b4:	08008465 	.word	0x08008465
 80084b8:	08008465 	.word	0x08008465
 80084bc:	08008619 	.word	0x08008619
 80084c0:	08008465 	.word	0x08008465
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008465 	.word	0x08008465
 80084cc:	08008465 	.word	0x08008465
 80084d0:	080085e1 	.word	0x080085e1
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	1d1a      	adds	r2, r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	602a      	str	r2, [r5, #0]
 80084dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0a4      	b.n	8008632 <_printf_i+0x1f6>
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	6829      	ldr	r1, [r5, #0]
 80084ec:	0606      	lsls	r6, r0, #24
 80084ee:	f101 0304 	add.w	r3, r1, #4
 80084f2:	d50a      	bpl.n	800850a <_printf_i+0xce>
 80084f4:	680e      	ldr	r6, [r1, #0]
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	da03      	bge.n	8008504 <_printf_i+0xc8>
 80084fc:	232d      	movs	r3, #45	; 0x2d
 80084fe:	4276      	negs	r6, r6
 8008500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008504:	230a      	movs	r3, #10
 8008506:	485e      	ldr	r0, [pc, #376]	; (8008680 <_printf_i+0x244>)
 8008508:	e019      	b.n	800853e <_printf_i+0x102>
 800850a:	680e      	ldr	r6, [r1, #0]
 800850c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	bf18      	it	ne
 8008514:	b236      	sxthne	r6, r6
 8008516:	e7ef      	b.n	80084f8 <_printf_i+0xbc>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	6820      	ldr	r0, [r4, #0]
 800851c:	1d19      	adds	r1, r3, #4
 800851e:	6029      	str	r1, [r5, #0]
 8008520:	0601      	lsls	r1, r0, #24
 8008522:	d501      	bpl.n	8008528 <_printf_i+0xec>
 8008524:	681e      	ldr	r6, [r3, #0]
 8008526:	e002      	b.n	800852e <_printf_i+0xf2>
 8008528:	0646      	lsls	r6, r0, #25
 800852a:	d5fb      	bpl.n	8008524 <_printf_i+0xe8>
 800852c:	881e      	ldrh	r6, [r3, #0]
 800852e:	2f6f      	cmp	r7, #111	; 0x6f
 8008530:	bf0c      	ite	eq
 8008532:	2308      	moveq	r3, #8
 8008534:	230a      	movne	r3, #10
 8008536:	4852      	ldr	r0, [pc, #328]	; (8008680 <_printf_i+0x244>)
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800853e:	6865      	ldr	r5, [r4, #4]
 8008540:	2d00      	cmp	r5, #0
 8008542:	bfa8      	it	ge
 8008544:	6821      	ldrge	r1, [r4, #0]
 8008546:	60a5      	str	r5, [r4, #8]
 8008548:	bfa4      	itt	ge
 800854a:	f021 0104 	bicge.w	r1, r1, #4
 800854e:	6021      	strge	r1, [r4, #0]
 8008550:	b90e      	cbnz	r6, 8008556 <_printf_i+0x11a>
 8008552:	2d00      	cmp	r5, #0
 8008554:	d04d      	beq.n	80085f2 <_printf_i+0x1b6>
 8008556:	4615      	mov	r5, r2
 8008558:	fbb6 f1f3 	udiv	r1, r6, r3
 800855c:	fb03 6711 	mls	r7, r3, r1, r6
 8008560:	5dc7      	ldrb	r7, [r0, r7]
 8008562:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008566:	4637      	mov	r7, r6
 8008568:	42bb      	cmp	r3, r7
 800856a:	460e      	mov	r6, r1
 800856c:	d9f4      	bls.n	8008558 <_printf_i+0x11c>
 800856e:	2b08      	cmp	r3, #8
 8008570:	d10b      	bne.n	800858a <_printf_i+0x14e>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	07de      	lsls	r6, r3, #31
 8008576:	d508      	bpl.n	800858a <_printf_i+0x14e>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	6861      	ldr	r1, [r4, #4]
 800857c:	4299      	cmp	r1, r3
 800857e:	bfde      	ittt	le
 8008580:	2330      	movle	r3, #48	; 0x30
 8008582:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008586:	f105 35ff 	addle.w	r5, r5, #4294967295
 800858a:	1b52      	subs	r2, r2, r5
 800858c:	6122      	str	r2, [r4, #16]
 800858e:	464b      	mov	r3, r9
 8008590:	4621      	mov	r1, r4
 8008592:	4640      	mov	r0, r8
 8008594:	f8cd a000 	str.w	sl, [sp]
 8008598:	aa03      	add	r2, sp, #12
 800859a:	f7ff fedf 	bl	800835c <_printf_common>
 800859e:	3001      	adds	r0, #1
 80085a0:	d14c      	bne.n	800863c <_printf_i+0x200>
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	b004      	add	sp, #16
 80085a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ac:	4834      	ldr	r0, [pc, #208]	; (8008680 <_printf_i+0x244>)
 80085ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085b2:	6829      	ldr	r1, [r5, #0]
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80085ba:	6029      	str	r1, [r5, #0]
 80085bc:	061d      	lsls	r5, r3, #24
 80085be:	d514      	bpl.n	80085ea <_printf_i+0x1ae>
 80085c0:	07df      	lsls	r7, r3, #31
 80085c2:	bf44      	itt	mi
 80085c4:	f043 0320 	orrmi.w	r3, r3, #32
 80085c8:	6023      	strmi	r3, [r4, #0]
 80085ca:	b91e      	cbnz	r6, 80085d4 <_printf_i+0x198>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	f023 0320 	bic.w	r3, r3, #32
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	2310      	movs	r3, #16
 80085d6:	e7af      	b.n	8008538 <_printf_i+0xfc>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	f043 0320 	orr.w	r3, r3, #32
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	2378      	movs	r3, #120	; 0x78
 80085e2:	4828      	ldr	r0, [pc, #160]	; (8008684 <_printf_i+0x248>)
 80085e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e8:	e7e3      	b.n	80085b2 <_printf_i+0x176>
 80085ea:	0659      	lsls	r1, r3, #25
 80085ec:	bf48      	it	mi
 80085ee:	b2b6      	uxthmi	r6, r6
 80085f0:	e7e6      	b.n	80085c0 <_printf_i+0x184>
 80085f2:	4615      	mov	r5, r2
 80085f4:	e7bb      	b.n	800856e <_printf_i+0x132>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	6826      	ldr	r6, [r4, #0]
 80085fa:	1d18      	adds	r0, r3, #4
 80085fc:	6961      	ldr	r1, [r4, #20]
 80085fe:	6028      	str	r0, [r5, #0]
 8008600:	0635      	lsls	r5, r6, #24
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	d501      	bpl.n	800860a <_printf_i+0x1ce>
 8008606:	6019      	str	r1, [r3, #0]
 8008608:	e002      	b.n	8008610 <_printf_i+0x1d4>
 800860a:	0670      	lsls	r0, r6, #25
 800860c:	d5fb      	bpl.n	8008606 <_printf_i+0x1ca>
 800860e:	8019      	strh	r1, [r3, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	4615      	mov	r5, r2
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	e7ba      	b.n	800858e <_printf_i+0x152>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	2100      	movs	r1, #0
 800861c:	1d1a      	adds	r2, r3, #4
 800861e:	602a      	str	r2, [r5, #0]
 8008620:	681d      	ldr	r5, [r3, #0]
 8008622:	6862      	ldr	r2, [r4, #4]
 8008624:	4628      	mov	r0, r5
 8008626:	f002 fc9d 	bl	800af64 <memchr>
 800862a:	b108      	cbz	r0, 8008630 <_printf_i+0x1f4>
 800862c:	1b40      	subs	r0, r0, r5
 800862e:	6060      	str	r0, [r4, #4]
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	2300      	movs	r3, #0
 8008636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800863a:	e7a8      	b.n	800858e <_printf_i+0x152>
 800863c:	462a      	mov	r2, r5
 800863e:	4649      	mov	r1, r9
 8008640:	4640      	mov	r0, r8
 8008642:	6923      	ldr	r3, [r4, #16]
 8008644:	47d0      	blx	sl
 8008646:	3001      	adds	r0, #1
 8008648:	d0ab      	beq.n	80085a2 <_printf_i+0x166>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	079b      	lsls	r3, r3, #30
 800864e:	d413      	bmi.n	8008678 <_printf_i+0x23c>
 8008650:	68e0      	ldr	r0, [r4, #12]
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	4298      	cmp	r0, r3
 8008656:	bfb8      	it	lt
 8008658:	4618      	movlt	r0, r3
 800865a:	e7a4      	b.n	80085a6 <_printf_i+0x16a>
 800865c:	2301      	movs	r3, #1
 800865e:	4632      	mov	r2, r6
 8008660:	4649      	mov	r1, r9
 8008662:	4640      	mov	r0, r8
 8008664:	47d0      	blx	sl
 8008666:	3001      	adds	r0, #1
 8008668:	d09b      	beq.n	80085a2 <_printf_i+0x166>
 800866a:	3501      	adds	r5, #1
 800866c:	68e3      	ldr	r3, [r4, #12]
 800866e:	9903      	ldr	r1, [sp, #12]
 8008670:	1a5b      	subs	r3, r3, r1
 8008672:	42ab      	cmp	r3, r5
 8008674:	dcf2      	bgt.n	800865c <_printf_i+0x220>
 8008676:	e7eb      	b.n	8008650 <_printf_i+0x214>
 8008678:	2500      	movs	r5, #0
 800867a:	f104 0619 	add.w	r6, r4, #25
 800867e:	e7f5      	b.n	800866c <_printf_i+0x230>
 8008680:	0800c78a 	.word	0x0800c78a
 8008684:	0800c79b 	.word	0x0800c79b

08008688 <_scanf_float>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	b087      	sub	sp, #28
 800868e:	9303      	str	r3, [sp, #12]
 8008690:	688b      	ldr	r3, [r1, #8]
 8008692:	4617      	mov	r7, r2
 8008694:	1e5a      	subs	r2, r3, #1
 8008696:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800869a:	bf85      	ittet	hi
 800869c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80086a0:	195b      	addhi	r3, r3, r5
 80086a2:	2300      	movls	r3, #0
 80086a4:	9302      	strhi	r3, [sp, #8]
 80086a6:	bf88      	it	hi
 80086a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80086ac:	468b      	mov	fp, r1
 80086ae:	f04f 0500 	mov.w	r5, #0
 80086b2:	bf8c      	ite	hi
 80086b4:	608b      	strhi	r3, [r1, #8]
 80086b6:	9302      	strls	r3, [sp, #8]
 80086b8:	680b      	ldr	r3, [r1, #0]
 80086ba:	4680      	mov	r8, r0
 80086bc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80086c0:	f84b 3b1c 	str.w	r3, [fp], #28
 80086c4:	460c      	mov	r4, r1
 80086c6:	465e      	mov	r6, fp
 80086c8:	46aa      	mov	sl, r5
 80086ca:	46a9      	mov	r9, r5
 80086cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086d0:	9501      	str	r5, [sp, #4]
 80086d2:	68a2      	ldr	r2, [r4, #8]
 80086d4:	b152      	cbz	r2, 80086ec <_scanf_float+0x64>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b4e      	cmp	r3, #78	; 0x4e
 80086dc:	d864      	bhi.n	80087a8 <_scanf_float+0x120>
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	d83c      	bhi.n	800875c <_scanf_float+0xd4>
 80086e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80086e6:	b2c8      	uxtb	r0, r1
 80086e8:	280e      	cmp	r0, #14
 80086ea:	d93a      	bls.n	8008762 <_scanf_float+0xda>
 80086ec:	f1b9 0f00 	cmp.w	r9, #0
 80086f0:	d003      	beq.n	80086fa <_scanf_float+0x72>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086fe:	f1ba 0f01 	cmp.w	sl, #1
 8008702:	f200 8113 	bhi.w	800892c <_scanf_float+0x2a4>
 8008706:	455e      	cmp	r6, fp
 8008708:	f200 8105 	bhi.w	8008916 <_scanf_float+0x28e>
 800870c:	2501      	movs	r5, #1
 800870e:	4628      	mov	r0, r5
 8008710:	b007      	add	sp, #28
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008716:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800871a:	2a0d      	cmp	r2, #13
 800871c:	d8e6      	bhi.n	80086ec <_scanf_float+0x64>
 800871e:	a101      	add	r1, pc, #4	; (adr r1, 8008724 <_scanf_float+0x9c>)
 8008720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008724:	08008863 	.word	0x08008863
 8008728:	080086ed 	.word	0x080086ed
 800872c:	080086ed 	.word	0x080086ed
 8008730:	080086ed 	.word	0x080086ed
 8008734:	080088c3 	.word	0x080088c3
 8008738:	0800889b 	.word	0x0800889b
 800873c:	080086ed 	.word	0x080086ed
 8008740:	080086ed 	.word	0x080086ed
 8008744:	08008871 	.word	0x08008871
 8008748:	080086ed 	.word	0x080086ed
 800874c:	080086ed 	.word	0x080086ed
 8008750:	080086ed 	.word	0x080086ed
 8008754:	080086ed 	.word	0x080086ed
 8008758:	08008829 	.word	0x08008829
 800875c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008760:	e7db      	b.n	800871a <_scanf_float+0x92>
 8008762:	290e      	cmp	r1, #14
 8008764:	d8c2      	bhi.n	80086ec <_scanf_float+0x64>
 8008766:	a001      	add	r0, pc, #4	; (adr r0, 800876c <_scanf_float+0xe4>)
 8008768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800876c:	0800881b 	.word	0x0800881b
 8008770:	080086ed 	.word	0x080086ed
 8008774:	0800881b 	.word	0x0800881b
 8008778:	080088af 	.word	0x080088af
 800877c:	080086ed 	.word	0x080086ed
 8008780:	080087c9 	.word	0x080087c9
 8008784:	08008805 	.word	0x08008805
 8008788:	08008805 	.word	0x08008805
 800878c:	08008805 	.word	0x08008805
 8008790:	08008805 	.word	0x08008805
 8008794:	08008805 	.word	0x08008805
 8008798:	08008805 	.word	0x08008805
 800879c:	08008805 	.word	0x08008805
 80087a0:	08008805 	.word	0x08008805
 80087a4:	08008805 	.word	0x08008805
 80087a8:	2b6e      	cmp	r3, #110	; 0x6e
 80087aa:	d809      	bhi.n	80087c0 <_scanf_float+0x138>
 80087ac:	2b60      	cmp	r3, #96	; 0x60
 80087ae:	d8b2      	bhi.n	8008716 <_scanf_float+0x8e>
 80087b0:	2b54      	cmp	r3, #84	; 0x54
 80087b2:	d077      	beq.n	80088a4 <_scanf_float+0x21c>
 80087b4:	2b59      	cmp	r3, #89	; 0x59
 80087b6:	d199      	bne.n	80086ec <_scanf_float+0x64>
 80087b8:	2d07      	cmp	r5, #7
 80087ba:	d197      	bne.n	80086ec <_scanf_float+0x64>
 80087bc:	2508      	movs	r5, #8
 80087be:	e029      	b.n	8008814 <_scanf_float+0x18c>
 80087c0:	2b74      	cmp	r3, #116	; 0x74
 80087c2:	d06f      	beq.n	80088a4 <_scanf_float+0x21c>
 80087c4:	2b79      	cmp	r3, #121	; 0x79
 80087c6:	e7f6      	b.n	80087b6 <_scanf_float+0x12e>
 80087c8:	6821      	ldr	r1, [r4, #0]
 80087ca:	05c8      	lsls	r0, r1, #23
 80087cc:	d51a      	bpl.n	8008804 <_scanf_float+0x17c>
 80087ce:	9b02      	ldr	r3, [sp, #8]
 80087d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80087d4:	6021      	str	r1, [r4, #0]
 80087d6:	f109 0901 	add.w	r9, r9, #1
 80087da:	b11b      	cbz	r3, 80087e4 <_scanf_float+0x15c>
 80087dc:	3b01      	subs	r3, #1
 80087de:	3201      	adds	r2, #1
 80087e0:	9302      	str	r3, [sp, #8]
 80087e2:	60a2      	str	r2, [r4, #8]
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	3301      	adds	r3, #1
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	f340 8084 	ble.w	8008904 <_scanf_float+0x27c>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	3301      	adds	r3, #1
 8008800:	603b      	str	r3, [r7, #0]
 8008802:	e766      	b.n	80086d2 <_scanf_float+0x4a>
 8008804:	eb1a 0f05 	cmn.w	sl, r5
 8008808:	f47f af70 	bne.w	80086ec <_scanf_float+0x64>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008812:	6022      	str	r2, [r4, #0]
 8008814:	f806 3b01 	strb.w	r3, [r6], #1
 8008818:	e7e4      	b.n	80087e4 <_scanf_float+0x15c>
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	0610      	lsls	r0, r2, #24
 800881e:	f57f af65 	bpl.w	80086ec <_scanf_float+0x64>
 8008822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008826:	e7f4      	b.n	8008812 <_scanf_float+0x18a>
 8008828:	f1ba 0f00 	cmp.w	sl, #0
 800882c:	d10e      	bne.n	800884c <_scanf_float+0x1c4>
 800882e:	f1b9 0f00 	cmp.w	r9, #0
 8008832:	d10e      	bne.n	8008852 <_scanf_float+0x1ca>
 8008834:	6822      	ldr	r2, [r4, #0]
 8008836:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800883a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800883e:	d108      	bne.n	8008852 <_scanf_float+0x1ca>
 8008840:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008844:	f04f 0a01 	mov.w	sl, #1
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	e7e3      	b.n	8008814 <_scanf_float+0x18c>
 800884c:	f1ba 0f02 	cmp.w	sl, #2
 8008850:	d055      	beq.n	80088fe <_scanf_float+0x276>
 8008852:	2d01      	cmp	r5, #1
 8008854:	d002      	beq.n	800885c <_scanf_float+0x1d4>
 8008856:	2d04      	cmp	r5, #4
 8008858:	f47f af48 	bne.w	80086ec <_scanf_float+0x64>
 800885c:	3501      	adds	r5, #1
 800885e:	b2ed      	uxtb	r5, r5
 8008860:	e7d8      	b.n	8008814 <_scanf_float+0x18c>
 8008862:	f1ba 0f01 	cmp.w	sl, #1
 8008866:	f47f af41 	bne.w	80086ec <_scanf_float+0x64>
 800886a:	f04f 0a02 	mov.w	sl, #2
 800886e:	e7d1      	b.n	8008814 <_scanf_float+0x18c>
 8008870:	b97d      	cbnz	r5, 8008892 <_scanf_float+0x20a>
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	f47f af3c 	bne.w	80086f2 <_scanf_float+0x6a>
 800887a:	6822      	ldr	r2, [r4, #0]
 800887c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008880:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008884:	f47f af39 	bne.w	80086fa <_scanf_float+0x72>
 8008888:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800888c:	2501      	movs	r5, #1
 800888e:	6022      	str	r2, [r4, #0]
 8008890:	e7c0      	b.n	8008814 <_scanf_float+0x18c>
 8008892:	2d03      	cmp	r5, #3
 8008894:	d0e2      	beq.n	800885c <_scanf_float+0x1d4>
 8008896:	2d05      	cmp	r5, #5
 8008898:	e7de      	b.n	8008858 <_scanf_float+0x1d0>
 800889a:	2d02      	cmp	r5, #2
 800889c:	f47f af26 	bne.w	80086ec <_scanf_float+0x64>
 80088a0:	2503      	movs	r5, #3
 80088a2:	e7b7      	b.n	8008814 <_scanf_float+0x18c>
 80088a4:	2d06      	cmp	r5, #6
 80088a6:	f47f af21 	bne.w	80086ec <_scanf_float+0x64>
 80088aa:	2507      	movs	r5, #7
 80088ac:	e7b2      	b.n	8008814 <_scanf_float+0x18c>
 80088ae:	6822      	ldr	r2, [r4, #0]
 80088b0:	0591      	lsls	r1, r2, #22
 80088b2:	f57f af1b 	bpl.w	80086ec <_scanf_float+0x64>
 80088b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80088ba:	6022      	str	r2, [r4, #0]
 80088bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80088c0:	e7a8      	b.n	8008814 <_scanf_float+0x18c>
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80088c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80088cc:	d006      	beq.n	80088dc <_scanf_float+0x254>
 80088ce:	0550      	lsls	r0, r2, #21
 80088d0:	f57f af0c 	bpl.w	80086ec <_scanf_float+0x64>
 80088d4:	f1b9 0f00 	cmp.w	r9, #0
 80088d8:	f43f af0f 	beq.w	80086fa <_scanf_float+0x72>
 80088dc:	0591      	lsls	r1, r2, #22
 80088de:	bf58      	it	pl
 80088e0:	9901      	ldrpl	r1, [sp, #4]
 80088e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088e6:	bf58      	it	pl
 80088e8:	eba9 0101 	subpl.w	r1, r9, r1
 80088ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80088f0:	f04f 0900 	mov.w	r9, #0
 80088f4:	bf58      	it	pl
 80088f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	e78a      	b.n	8008814 <_scanf_float+0x18c>
 80088fe:	f04f 0a03 	mov.w	sl, #3
 8008902:	e787      	b.n	8008814 <_scanf_float+0x18c>
 8008904:	4639      	mov	r1, r7
 8008906:	4640      	mov	r0, r8
 8008908:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800890c:	4798      	blx	r3
 800890e:	2800      	cmp	r0, #0
 8008910:	f43f aedf 	beq.w	80086d2 <_scanf_float+0x4a>
 8008914:	e6ea      	b.n	80086ec <_scanf_float+0x64>
 8008916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800891a:	463a      	mov	r2, r7
 800891c:	4640      	mov	r0, r8
 800891e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008922:	4798      	blx	r3
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	3b01      	subs	r3, #1
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	e6ec      	b.n	8008706 <_scanf_float+0x7e>
 800892c:	1e6b      	subs	r3, r5, #1
 800892e:	2b06      	cmp	r3, #6
 8008930:	d825      	bhi.n	800897e <_scanf_float+0x2f6>
 8008932:	2d02      	cmp	r5, #2
 8008934:	d836      	bhi.n	80089a4 <_scanf_float+0x31c>
 8008936:	455e      	cmp	r6, fp
 8008938:	f67f aee8 	bls.w	800870c <_scanf_float+0x84>
 800893c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008940:	463a      	mov	r2, r7
 8008942:	4640      	mov	r0, r8
 8008944:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008948:	4798      	blx	r3
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	3b01      	subs	r3, #1
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	e7f1      	b.n	8008936 <_scanf_float+0x2ae>
 8008952:	9802      	ldr	r0, [sp, #8]
 8008954:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008958:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800895c:	463a      	mov	r2, r7
 800895e:	9002      	str	r0, [sp, #8]
 8008960:	4640      	mov	r0, r8
 8008962:	4798      	blx	r3
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	3b01      	subs	r3, #1
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800896e:	fa5f fa8a 	uxtb.w	sl, sl
 8008972:	f1ba 0f02 	cmp.w	sl, #2
 8008976:	d1ec      	bne.n	8008952 <_scanf_float+0x2ca>
 8008978:	3d03      	subs	r5, #3
 800897a:	b2ed      	uxtb	r5, r5
 800897c:	1b76      	subs	r6, r6, r5
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	05da      	lsls	r2, r3, #23
 8008982:	d52f      	bpl.n	80089e4 <_scanf_float+0x35c>
 8008984:	055b      	lsls	r3, r3, #21
 8008986:	d510      	bpl.n	80089aa <_scanf_float+0x322>
 8008988:	455e      	cmp	r6, fp
 800898a:	f67f aebf 	bls.w	800870c <_scanf_float+0x84>
 800898e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008992:	463a      	mov	r2, r7
 8008994:	4640      	mov	r0, r8
 8008996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800899a:	4798      	blx	r3
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	3b01      	subs	r3, #1
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	e7f1      	b.n	8008988 <_scanf_float+0x300>
 80089a4:	46aa      	mov	sl, r5
 80089a6:	9602      	str	r6, [sp, #8]
 80089a8:	e7df      	b.n	800896a <_scanf_float+0x2e2>
 80089aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	2965      	cmp	r1, #101	; 0x65
 80089b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80089b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	d00c      	beq.n	80089d8 <_scanf_float+0x350>
 80089be:	2945      	cmp	r1, #69	; 0x45
 80089c0:	d00a      	beq.n	80089d8 <_scanf_float+0x350>
 80089c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089c6:	463a      	mov	r2, r7
 80089c8:	4640      	mov	r0, r8
 80089ca:	4798      	blx	r3
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	1eb5      	subs	r5, r6, #2
 80089d6:	6123      	str	r3, [r4, #16]
 80089d8:	463a      	mov	r2, r7
 80089da:	4640      	mov	r0, r8
 80089dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089e0:	4798      	blx	r3
 80089e2:	462e      	mov	r6, r5
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	f015 0510 	ands.w	r5, r5, #16
 80089ea:	d155      	bne.n	8008a98 <_scanf_float+0x410>
 80089ec:	7035      	strb	r5, [r6, #0]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f8:	d11b      	bne.n	8008a32 <_scanf_float+0x3aa>
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	454b      	cmp	r3, r9
 80089fe:	eba3 0209 	sub.w	r2, r3, r9
 8008a02:	d123      	bne.n	8008a4c <_scanf_float+0x3c4>
 8008a04:	2200      	movs	r2, #0
 8008a06:	4659      	mov	r1, fp
 8008a08:	4640      	mov	r0, r8
 8008a0a:	f000 ff35 	bl	8009878 <_strtod_r>
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	f012 0f02 	tst.w	r2, #2
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	d021      	beq.n	8008a62 <_scanf_float+0x3da>
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	9903      	ldr	r1, [sp, #12]
 8008a22:	600a      	str	r2, [r1, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	e9c3 6700 	strd	r6, r7, [r3]
 8008a2a:	68e3      	ldr	r3, [r4, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60e3      	str	r3, [r4, #12]
 8008a30:	e66d      	b.n	800870e <_scanf_float+0x86>
 8008a32:	9b04      	ldr	r3, [sp, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0e5      	beq.n	8008a04 <_scanf_float+0x37c>
 8008a38:	9905      	ldr	r1, [sp, #20]
 8008a3a:	230a      	movs	r3, #10
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4640      	mov	r0, r8
 8008a40:	3101      	adds	r1, #1
 8008a42:	f000 ff9b 	bl	800997c <_strtol_r>
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	9e05      	ldr	r6, [sp, #20]
 8008a4a:	1ac2      	subs	r2, r0, r3
 8008a4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008a50:	429e      	cmp	r6, r3
 8008a52:	bf28      	it	cs
 8008a54:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4910      	ldr	r1, [pc, #64]	; (8008a9c <_scanf_float+0x414>)
 8008a5c:	f000 f8a0 	bl	8008ba0 <siprintf>
 8008a60:	e7d0      	b.n	8008a04 <_scanf_float+0x37c>
 8008a62:	f012 0f04 	tst.w	r2, #4
 8008a66:	f103 0204 	add.w	r2, r3, #4
 8008a6a:	d1d9      	bne.n	8008a20 <_scanf_float+0x398>
 8008a6c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008a70:	f8cc 2000 	str.w	r2, [ip]
 8008a74:	f8d3 8000 	ldr.w	r8, [r3]
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	f7f7 ffc6 	bl	8000a0c <__aeabi_dcmpun>
 8008a80:	b128      	cbz	r0, 8008a8e <_scanf_float+0x406>
 8008a82:	4807      	ldr	r0, [pc, #28]	; (8008aa0 <_scanf_float+0x418>)
 8008a84:	f000 f888 	bl	8008b98 <nanf>
 8008a88:	f8c8 0000 	str.w	r0, [r8]
 8008a8c:	e7cd      	b.n	8008a2a <_scanf_float+0x3a2>
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f8 f819 	bl	8000ac8 <__aeabi_d2f>
 8008a96:	e7f7      	b.n	8008a88 <_scanf_float+0x400>
 8008a98:	2500      	movs	r5, #0
 8008a9a:	e638      	b.n	800870e <_scanf_float+0x86>
 8008a9c:	0800c7ac 	.word	0x0800c7ac
 8008aa0:	0800cbb8 	.word	0x0800cbb8

08008aa4 <cleanup_glue>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	6809      	ldr	r1, [r1, #0]
 8008aaa:	4605      	mov	r5, r0
 8008aac:	b109      	cbz	r1, 8008ab2 <cleanup_glue+0xe>
 8008aae:	f7ff fff9 	bl	8008aa4 <cleanup_glue>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aba:	f002 bf39 	b.w	800b930 <_free_r>
	...

08008ac0 <_reclaim_reent>:
 8008ac0:	4b2c      	ldr	r3, [pc, #176]	; (8008b74 <_reclaim_reent+0xb4>)
 8008ac2:	b570      	push	{r4, r5, r6, lr}
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4283      	cmp	r3, r0
 8008aca:	d051      	beq.n	8008b70 <_reclaim_reent+0xb0>
 8008acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ace:	b143      	cbz	r3, 8008ae2 <_reclaim_reent+0x22>
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d14a      	bne.n	8008b6c <_reclaim_reent+0xac>
 8008ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad8:	6819      	ldr	r1, [r3, #0]
 8008ada:	b111      	cbz	r1, 8008ae2 <_reclaim_reent+0x22>
 8008adc:	4620      	mov	r0, r4
 8008ade:	f002 ff27 	bl	800b930 <_free_r>
 8008ae2:	6961      	ldr	r1, [r4, #20]
 8008ae4:	b111      	cbz	r1, 8008aec <_reclaim_reent+0x2c>
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f002 ff22 	bl	800b930 <_free_r>
 8008aec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008aee:	b111      	cbz	r1, 8008af6 <_reclaim_reent+0x36>
 8008af0:	4620      	mov	r0, r4
 8008af2:	f002 ff1d 	bl	800b930 <_free_r>
 8008af6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008af8:	b111      	cbz	r1, 8008b00 <_reclaim_reent+0x40>
 8008afa:	4620      	mov	r0, r4
 8008afc:	f002 ff18 	bl	800b930 <_free_r>
 8008b00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b02:	b111      	cbz	r1, 8008b0a <_reclaim_reent+0x4a>
 8008b04:	4620      	mov	r0, r4
 8008b06:	f002 ff13 	bl	800b930 <_free_r>
 8008b0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b0c:	b111      	cbz	r1, 8008b14 <_reclaim_reent+0x54>
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f002 ff0e 	bl	800b930 <_free_r>
 8008b14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b16:	b111      	cbz	r1, 8008b1e <_reclaim_reent+0x5e>
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f002 ff09 	bl	800b930 <_free_r>
 8008b1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b20:	b111      	cbz	r1, 8008b28 <_reclaim_reent+0x68>
 8008b22:	4620      	mov	r0, r4
 8008b24:	f002 ff04 	bl	800b930 <_free_r>
 8008b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2a:	b111      	cbz	r1, 8008b32 <_reclaim_reent+0x72>
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f002 feff 	bl	800b930 <_free_r>
 8008b32:	69a3      	ldr	r3, [r4, #24]
 8008b34:	b1e3      	cbz	r3, 8008b70 <_reclaim_reent+0xb0>
 8008b36:	4620      	mov	r0, r4
 8008b38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b3a:	4798      	blx	r3
 8008b3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b3e:	b1b9      	cbz	r1, 8008b70 <_reclaim_reent+0xb0>
 8008b40:	4620      	mov	r0, r4
 8008b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b46:	f7ff bfad 	b.w	8008aa4 <cleanup_glue>
 8008b4a:	5949      	ldr	r1, [r1, r5]
 8008b4c:	b941      	cbnz	r1, 8008b60 <_reclaim_reent+0xa0>
 8008b4e:	3504      	adds	r5, #4
 8008b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b52:	2d80      	cmp	r5, #128	; 0x80
 8008b54:	68d9      	ldr	r1, [r3, #12]
 8008b56:	d1f8      	bne.n	8008b4a <_reclaim_reent+0x8a>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f002 fee9 	bl	800b930 <_free_r>
 8008b5e:	e7ba      	b.n	8008ad6 <_reclaim_reent+0x16>
 8008b60:	680e      	ldr	r6, [r1, #0]
 8008b62:	4620      	mov	r0, r4
 8008b64:	f002 fee4 	bl	800b930 <_free_r>
 8008b68:	4631      	mov	r1, r6
 8008b6a:	e7ef      	b.n	8008b4c <_reclaim_reent+0x8c>
 8008b6c:	2500      	movs	r5, #0
 8008b6e:	e7ef      	b.n	8008b50 <_reclaim_reent+0x90>
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	bf00      	nop
 8008b74:	20000010 	.word	0x20000010

08008b78 <_sbrk_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4d05      	ldr	r5, [pc, #20]	; (8008b94 <_sbrk_r+0x1c>)
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7f8 fe34 	bl	80017f0 <_sbrk>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_sbrk_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_sbrk_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	200031d8 	.word	0x200031d8

08008b98 <nanf>:
 8008b98:	4800      	ldr	r0, [pc, #0]	; (8008b9c <nanf+0x4>)
 8008b9a:	4770      	bx	lr
 8008b9c:	7fc00000 	.word	0x7fc00000

08008ba0 <siprintf>:
 8008ba0:	b40e      	push	{r1, r2, r3}
 8008ba2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ba6:	b500      	push	{lr}
 8008ba8:	b09c      	sub	sp, #112	; 0x70
 8008baa:	ab1d      	add	r3, sp, #116	; 0x74
 8008bac:	9002      	str	r0, [sp, #8]
 8008bae:	9006      	str	r0, [sp, #24]
 8008bb0:	9107      	str	r1, [sp, #28]
 8008bb2:	9104      	str	r1, [sp, #16]
 8008bb4:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <siprintf+0x38>)
 8008bb6:	4909      	ldr	r1, [pc, #36]	; (8008bdc <siprintf+0x3c>)
 8008bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbc:	9105      	str	r1, [sp, #20]
 8008bbe:	6800      	ldr	r0, [r0, #0]
 8008bc0:	a902      	add	r1, sp, #8
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	f002 ff58 	bl	800ba78 <_svfiprintf_r>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	b01c      	add	sp, #112	; 0x70
 8008bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd4:	b003      	add	sp, #12
 8008bd6:	4770      	bx	lr
 8008bd8:	20000010 	.word	0x20000010
 8008bdc:	ffff0208 	.word	0xffff0208

08008be0 <__sread>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	460c      	mov	r4, r1
 8008be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be8:	f003 f846 	bl	800bc78 <_read_r>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	bfab      	itete	ge
 8008bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8008bf4:	181b      	addge	r3, r3, r0
 8008bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bfa:	bfac      	ite	ge
 8008bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bfe:	81a3      	strhlt	r3, [r4, #12]
 8008c00:	bd10      	pop	{r4, pc}

08008c02 <__swrite>:
 8008c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	461f      	mov	r7, r3
 8008c08:	898b      	ldrh	r3, [r1, #12]
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	05db      	lsls	r3, r3, #23
 8008c0e:	460c      	mov	r4, r1
 8008c10:	4616      	mov	r6, r2
 8008c12:	d505      	bpl.n	8008c20 <__swrite+0x1e>
 8008c14:	2302      	movs	r3, #2
 8008c16:	2200      	movs	r2, #0
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	f002 f976 	bl	800af0c <_lseek_r>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	4632      	mov	r2, r6
 8008c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c28:	81a3      	strh	r3, [r4, #12]
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	f000 bea3 	b.w	8009980 <_write_r>

08008c3a <__sseek>:
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c42:	f002 f963 	bl	800af0c <_lseek_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	bf15      	itete	ne
 8008c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c56:	81a3      	strheq	r3, [r4, #12]
 8008c58:	bf18      	it	ne
 8008c5a:	81a3      	strhne	r3, [r4, #12]
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <__sclose>:
 8008c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c62:	f000 be9f 	b.w	80099a4 <_close_r>

08008c66 <sulp>:
 8008c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	4690      	mov	r8, r2
 8008c6e:	f002 fd03 	bl	800b678 <__ulp>
 8008c72:	4604      	mov	r4, r0
 8008c74:	460d      	mov	r5, r1
 8008c76:	f1b8 0f00 	cmp.w	r8, #0
 8008c7a:	d011      	beq.n	8008ca0 <sulp+0x3a>
 8008c7c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dd0b      	ble.n	8008ca0 <sulp+0x3a>
 8008c88:	2400      	movs	r4, #0
 8008c8a:	051b      	lsls	r3, r3, #20
 8008c8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c94:	4622      	mov	r2, r4
 8008c96:	462b      	mov	r3, r5
 8008c98:	f7f7 fc1e 	bl	80004d8 <__aeabi_dmul>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ca8 <_strtod_l>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	469b      	mov	fp, r3
 8008cae:	2300      	movs	r3, #0
 8008cb0:	b09f      	sub	sp, #124	; 0x7c
 8008cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cb4:	4b9e      	ldr	r3, [pc, #632]	; (8008f30 <_strtod_l+0x288>)
 8008cb6:	4682      	mov	sl, r0
 8008cb8:	681f      	ldr	r7, [r3, #0]
 8008cba:	460e      	mov	r6, r1
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	9215      	str	r2, [sp, #84]	; 0x54
 8008cc0:	f7f7 fa46 	bl	8000150 <strlen>
 8008cc4:	f04f 0800 	mov.w	r8, #0
 8008cc8:	4604      	mov	r4, r0
 8008cca:	f04f 0900 	mov.w	r9, #0
 8008cce:	9619      	str	r6, [sp, #100]	; 0x64
 8008cd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008cd2:	781a      	ldrb	r2, [r3, #0]
 8008cd4:	2a2b      	cmp	r2, #43	; 0x2b
 8008cd6:	d04c      	beq.n	8008d72 <_strtod_l+0xca>
 8008cd8:	d83a      	bhi.n	8008d50 <_strtod_l+0xa8>
 8008cda:	2a0d      	cmp	r2, #13
 8008cdc:	d833      	bhi.n	8008d46 <_strtod_l+0x9e>
 8008cde:	2a08      	cmp	r2, #8
 8008ce0:	d833      	bhi.n	8008d4a <_strtod_l+0xa2>
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d03d      	beq.n	8008d62 <_strtod_l+0xba>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008cec:	782b      	ldrb	r3, [r5, #0]
 8008cee:	2b30      	cmp	r3, #48	; 0x30
 8008cf0:	f040 80aa 	bne.w	8008e48 <_strtod_l+0x1a0>
 8008cf4:	786b      	ldrb	r3, [r5, #1]
 8008cf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cfa:	2b58      	cmp	r3, #88	; 0x58
 8008cfc:	d166      	bne.n	8008dcc <_strtod_l+0x124>
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	4650      	mov	r0, sl
 8008d02:	9301      	str	r3, [sp, #4]
 8008d04:	ab1a      	add	r3, sp, #104	; 0x68
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	4a8a      	ldr	r2, [pc, #552]	; (8008f34 <_strtod_l+0x28c>)
 8008d0a:	f8cd b008 	str.w	fp, [sp, #8]
 8008d0e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d10:	a919      	add	r1, sp, #100	; 0x64
 8008d12:	f001 fdf9 	bl	800a908 <__gethex>
 8008d16:	f010 0607 	ands.w	r6, r0, #7
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	d005      	beq.n	8008d2a <_strtod_l+0x82>
 8008d1e:	2e06      	cmp	r6, #6
 8008d20:	d129      	bne.n	8008d76 <_strtod_l+0xce>
 8008d22:	2300      	movs	r3, #0
 8008d24:	3501      	adds	r5, #1
 8008d26:	9519      	str	r5, [sp, #100]	; 0x64
 8008d28:	930a      	str	r3, [sp, #40]	; 0x28
 8008d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 858a 	bne.w	8009846 <_strtod_l+0xb9e>
 8008d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d34:	b1d3      	cbz	r3, 8008d6c <_strtod_l+0xc4>
 8008d36:	4642      	mov	r2, r8
 8008d38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	b01f      	add	sp, #124	; 0x7c
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	2a20      	cmp	r2, #32
 8008d48:	d1cd      	bne.n	8008ce6 <_strtod_l+0x3e>
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d4e:	e7bf      	b.n	8008cd0 <_strtod_l+0x28>
 8008d50:	2a2d      	cmp	r2, #45	; 0x2d
 8008d52:	d1c8      	bne.n	8008ce6 <_strtod_l+0x3e>
 8008d54:	2201      	movs	r2, #1
 8008d56:	920a      	str	r2, [sp, #40]	; 0x28
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	9219      	str	r2, [sp, #100]	; 0x64
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1c3      	bne.n	8008cea <_strtod_l+0x42>
 8008d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d64:	9619      	str	r6, [sp, #100]	; 0x64
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 856b 	bne.w	8009842 <_strtod_l+0xb9a>
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	464b      	mov	r3, r9
 8008d70:	e7e4      	b.n	8008d3c <_strtod_l+0x94>
 8008d72:	2200      	movs	r2, #0
 8008d74:	e7ef      	b.n	8008d56 <_strtod_l+0xae>
 8008d76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d78:	b13a      	cbz	r2, 8008d8a <_strtod_l+0xe2>
 8008d7a:	2135      	movs	r1, #53	; 0x35
 8008d7c:	a81c      	add	r0, sp, #112	; 0x70
 8008d7e:	f002 fd7f 	bl	800b880 <__copybits>
 8008d82:	4650      	mov	r0, sl
 8008d84:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d86:	f002 f947 	bl	800b018 <_Bfree>
 8008d8a:	3e01      	subs	r6, #1
 8008d8c:	2e04      	cmp	r6, #4
 8008d8e:	d806      	bhi.n	8008d9e <_strtod_l+0xf6>
 8008d90:	e8df f006 	tbb	[pc, r6]
 8008d94:	1714030a 	.word	0x1714030a
 8008d98:	0a          	.byte	0x0a
 8008d99:	00          	.byte	0x00
 8008d9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008d9e:	0721      	lsls	r1, r4, #28
 8008da0:	d5c3      	bpl.n	8008d2a <_strtod_l+0x82>
 8008da2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008da6:	e7c0      	b.n	8008d2a <_strtod_l+0x82>
 8008da8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008daa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008dae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008db2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008db6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008dba:	e7f0      	b.n	8008d9e <_strtod_l+0xf6>
 8008dbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f38 <_strtod_l+0x290>
 8008dc0:	e7ed      	b.n	8008d9e <_strtod_l+0xf6>
 8008dc2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008dc6:	f04f 38ff 	mov.w	r8, #4294967295
 8008dca:	e7e8      	b.n	8008d9e <_strtod_l+0xf6>
 8008dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	9219      	str	r2, [sp, #100]	; 0x64
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b30      	cmp	r3, #48	; 0x30
 8008dd6:	d0f9      	beq.n	8008dcc <_strtod_l+0x124>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0a6      	beq.n	8008d2a <_strtod_l+0x82>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	9307      	str	r3, [sp, #28]
 8008de0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008de2:	220a      	movs	r2, #10
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	2300      	movs	r3, #0
 8008de8:	469b      	mov	fp, r3
 8008dea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008dee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008df0:	7805      	ldrb	r5, [r0, #0]
 8008df2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008df6:	b2d9      	uxtb	r1, r3
 8008df8:	2909      	cmp	r1, #9
 8008dfa:	d927      	bls.n	8008e4c <_strtod_l+0x1a4>
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f002 ff52 	bl	800bca8 <strncmp>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d033      	beq.n	8008e70 <_strtod_l+0x1c8>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	465c      	mov	r4, fp
 8008e0e:	4603      	mov	r3, r0
 8008e10:	9004      	str	r0, [sp, #16]
 8008e12:	2a65      	cmp	r2, #101	; 0x65
 8008e14:	d001      	beq.n	8008e1a <_strtod_l+0x172>
 8008e16:	2a45      	cmp	r2, #69	; 0x45
 8008e18:	d114      	bne.n	8008e44 <_strtod_l+0x19c>
 8008e1a:	b91c      	cbnz	r4, 8008e24 <_strtod_l+0x17c>
 8008e1c:	9a07      	ldr	r2, [sp, #28]
 8008e1e:	4302      	orrs	r2, r0
 8008e20:	d09f      	beq.n	8008d62 <_strtod_l+0xba>
 8008e22:	2400      	movs	r4, #0
 8008e24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008e26:	1c72      	adds	r2, r6, #1
 8008e28:	9219      	str	r2, [sp, #100]	; 0x64
 8008e2a:	7872      	ldrb	r2, [r6, #1]
 8008e2c:	2a2b      	cmp	r2, #43	; 0x2b
 8008e2e:	d079      	beq.n	8008f24 <_strtod_l+0x27c>
 8008e30:	2a2d      	cmp	r2, #45	; 0x2d
 8008e32:	f000 8083 	beq.w	8008f3c <_strtod_l+0x294>
 8008e36:	2700      	movs	r7, #0
 8008e38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e3c:	2909      	cmp	r1, #9
 8008e3e:	f240 8083 	bls.w	8008f48 <_strtod_l+0x2a0>
 8008e42:	9619      	str	r6, [sp, #100]	; 0x64
 8008e44:	2500      	movs	r5, #0
 8008e46:	e09f      	b.n	8008f88 <_strtod_l+0x2e0>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e7c8      	b.n	8008dde <_strtod_l+0x136>
 8008e4c:	f1bb 0f08 	cmp.w	fp, #8
 8008e50:	bfd5      	itete	le
 8008e52:	9906      	ldrle	r1, [sp, #24]
 8008e54:	9905      	ldrgt	r1, [sp, #20]
 8008e56:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e5e:	f100 0001 	add.w	r0, r0, #1
 8008e62:	bfd4      	ite	le
 8008e64:	9306      	strle	r3, [sp, #24]
 8008e66:	9305      	strgt	r3, [sp, #20]
 8008e68:	f10b 0b01 	add.w	fp, fp, #1
 8008e6c:	9019      	str	r0, [sp, #100]	; 0x64
 8008e6e:	e7be      	b.n	8008dee <_strtod_l+0x146>
 8008e70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e72:	191a      	adds	r2, r3, r4
 8008e74:	9219      	str	r2, [sp, #100]	; 0x64
 8008e76:	5d1a      	ldrb	r2, [r3, r4]
 8008e78:	f1bb 0f00 	cmp.w	fp, #0
 8008e7c:	d036      	beq.n	8008eec <_strtod_l+0x244>
 8008e7e:	465c      	mov	r4, fp
 8008e80:	9004      	str	r0, [sp, #16]
 8008e82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e86:	2b09      	cmp	r3, #9
 8008e88:	d912      	bls.n	8008eb0 <_strtod_l+0x208>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e7c1      	b.n	8008e12 <_strtod_l+0x16a>
 8008e8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e90:	3001      	adds	r0, #1
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	9219      	str	r2, [sp, #100]	; 0x64
 8008e96:	785a      	ldrb	r2, [r3, #1]
 8008e98:	2a30      	cmp	r2, #48	; 0x30
 8008e9a:	d0f8      	beq.n	8008e8e <_strtod_l+0x1e6>
 8008e9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	f200 84d5 	bhi.w	8009850 <_strtod_l+0xba8>
 8008ea6:	9004      	str	r0, [sp, #16]
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eae:	9308      	str	r3, [sp, #32]
 8008eb0:	3a30      	subs	r2, #48	; 0x30
 8008eb2:	f100 0301 	add.w	r3, r0, #1
 8008eb6:	d013      	beq.n	8008ee0 <_strtod_l+0x238>
 8008eb8:	9904      	ldr	r1, [sp, #16]
 8008eba:	1905      	adds	r5, r0, r4
 8008ebc:	4419      	add	r1, r3
 8008ebe:	9104      	str	r1, [sp, #16]
 8008ec0:	4623      	mov	r3, r4
 8008ec2:	210a      	movs	r1, #10
 8008ec4:	42ab      	cmp	r3, r5
 8008ec6:	d113      	bne.n	8008ef0 <_strtod_l+0x248>
 8008ec8:	1823      	adds	r3, r4, r0
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	f104 0401 	add.w	r4, r4, #1
 8008ed0:	4404      	add	r4, r0
 8008ed2:	dc1b      	bgt.n	8008f0c <_strtod_l+0x264>
 8008ed4:	230a      	movs	r3, #10
 8008ed6:	9906      	ldr	r1, [sp, #24]
 8008ed8:	fb03 2301 	mla	r3, r3, r1, r2
 8008edc:	9306      	str	r3, [sp, #24]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	1c51      	adds	r1, r2, #1
 8008ee6:	9119      	str	r1, [sp, #100]	; 0x64
 8008ee8:	7852      	ldrb	r2, [r2, #1]
 8008eea:	e7ca      	b.n	8008e82 <_strtod_l+0x1da>
 8008eec:	4658      	mov	r0, fp
 8008eee:	e7d3      	b.n	8008e98 <_strtod_l+0x1f0>
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	dc04      	bgt.n	8008efe <_strtod_l+0x256>
 8008ef4:	9f06      	ldr	r7, [sp, #24]
 8008ef6:	434f      	muls	r7, r1
 8008ef8:	9706      	str	r7, [sp, #24]
 8008efa:	3301      	adds	r3, #1
 8008efc:	e7e2      	b.n	8008ec4 <_strtod_l+0x21c>
 8008efe:	1c5f      	adds	r7, r3, #1
 8008f00:	2f10      	cmp	r7, #16
 8008f02:	bfde      	ittt	le
 8008f04:	9f05      	ldrle	r7, [sp, #20]
 8008f06:	434f      	mulle	r7, r1
 8008f08:	9705      	strle	r7, [sp, #20]
 8008f0a:	e7f6      	b.n	8008efa <_strtod_l+0x252>
 8008f0c:	2c10      	cmp	r4, #16
 8008f0e:	bfdf      	itttt	le
 8008f10:	230a      	movle	r3, #10
 8008f12:	9905      	ldrle	r1, [sp, #20]
 8008f14:	fb03 2301 	mlale	r3, r3, r1, r2
 8008f18:	9305      	strle	r3, [sp, #20]
 8008f1a:	e7e0      	b.n	8008ede <_strtod_l+0x236>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	2301      	movs	r3, #1
 8008f22:	e77b      	b.n	8008e1c <_strtod_l+0x174>
 8008f24:	2700      	movs	r7, #0
 8008f26:	1cb2      	adds	r2, r6, #2
 8008f28:	9219      	str	r2, [sp, #100]	; 0x64
 8008f2a:	78b2      	ldrb	r2, [r6, #2]
 8008f2c:	e784      	b.n	8008e38 <_strtod_l+0x190>
 8008f2e:	bf00      	nop
 8008f30:	0800ca00 	.word	0x0800ca00
 8008f34:	0800c7b4 	.word	0x0800c7b4
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	2701      	movs	r7, #1
 8008f3e:	e7f2      	b.n	8008f26 <_strtod_l+0x27e>
 8008f40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f42:	1c51      	adds	r1, r2, #1
 8008f44:	9119      	str	r1, [sp, #100]	; 0x64
 8008f46:	7852      	ldrb	r2, [r2, #1]
 8008f48:	2a30      	cmp	r2, #48	; 0x30
 8008f4a:	d0f9      	beq.n	8008f40 <_strtod_l+0x298>
 8008f4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f50:	2908      	cmp	r1, #8
 8008f52:	f63f af77 	bhi.w	8008e44 <_strtod_l+0x19c>
 8008f56:	f04f 0e0a 	mov.w	lr, #10
 8008f5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008f5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f60:	9209      	str	r2, [sp, #36]	; 0x24
 8008f62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f64:	1c51      	adds	r1, r2, #1
 8008f66:	9119      	str	r1, [sp, #100]	; 0x64
 8008f68:	7852      	ldrb	r2, [r2, #1]
 8008f6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f6e:	2d09      	cmp	r5, #9
 8008f70:	d935      	bls.n	8008fde <_strtod_l+0x336>
 8008f72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f74:	1b49      	subs	r1, r1, r5
 8008f76:	2908      	cmp	r1, #8
 8008f78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008f7c:	dc02      	bgt.n	8008f84 <_strtod_l+0x2dc>
 8008f7e:	4565      	cmp	r5, ip
 8008f80:	bfa8      	it	ge
 8008f82:	4665      	movge	r5, ip
 8008f84:	b107      	cbz	r7, 8008f88 <_strtod_l+0x2e0>
 8008f86:	426d      	negs	r5, r5
 8008f88:	2c00      	cmp	r4, #0
 8008f8a:	d14c      	bne.n	8009026 <_strtod_l+0x37e>
 8008f8c:	9907      	ldr	r1, [sp, #28]
 8008f8e:	4301      	orrs	r1, r0
 8008f90:	f47f aecb 	bne.w	8008d2a <_strtod_l+0x82>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f47f aee4 	bne.w	8008d62 <_strtod_l+0xba>
 8008f9a:	2a69      	cmp	r2, #105	; 0x69
 8008f9c:	d026      	beq.n	8008fec <_strtod_l+0x344>
 8008f9e:	dc23      	bgt.n	8008fe8 <_strtod_l+0x340>
 8008fa0:	2a49      	cmp	r2, #73	; 0x49
 8008fa2:	d023      	beq.n	8008fec <_strtod_l+0x344>
 8008fa4:	2a4e      	cmp	r2, #78	; 0x4e
 8008fa6:	f47f aedc 	bne.w	8008d62 <_strtod_l+0xba>
 8008faa:	499d      	ldr	r1, [pc, #628]	; (8009220 <_strtod_l+0x578>)
 8008fac:	a819      	add	r0, sp, #100	; 0x64
 8008fae:	f001 fef9 	bl	800ada4 <__match>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f43f aed5 	beq.w	8008d62 <_strtod_l+0xba>
 8008fb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b28      	cmp	r3, #40	; 0x28
 8008fbe:	d12c      	bne.n	800901a <_strtod_l+0x372>
 8008fc0:	4998      	ldr	r1, [pc, #608]	; (8009224 <_strtod_l+0x57c>)
 8008fc2:	aa1c      	add	r2, sp, #112	; 0x70
 8008fc4:	a819      	add	r0, sp, #100	; 0x64
 8008fc6:	f001 ff01 	bl	800adcc <__hexnan>
 8008fca:	2805      	cmp	r0, #5
 8008fcc:	d125      	bne.n	800901a <_strtod_l+0x372>
 8008fce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008fd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008fd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008fdc:	e6a5      	b.n	8008d2a <_strtod_l+0x82>
 8008fde:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008fe2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008fe6:	e7bc      	b.n	8008f62 <_strtod_l+0x2ba>
 8008fe8:	2a6e      	cmp	r2, #110	; 0x6e
 8008fea:	e7dc      	b.n	8008fa6 <_strtod_l+0x2fe>
 8008fec:	498e      	ldr	r1, [pc, #568]	; (8009228 <_strtod_l+0x580>)
 8008fee:	a819      	add	r0, sp, #100	; 0x64
 8008ff0:	f001 fed8 	bl	800ada4 <__match>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f aeb4 	beq.w	8008d62 <_strtod_l+0xba>
 8008ffa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ffc:	498b      	ldr	r1, [pc, #556]	; (800922c <_strtod_l+0x584>)
 8008ffe:	3b01      	subs	r3, #1
 8009000:	a819      	add	r0, sp, #100	; 0x64
 8009002:	9319      	str	r3, [sp, #100]	; 0x64
 8009004:	f001 fece 	bl	800ada4 <__match>
 8009008:	b910      	cbnz	r0, 8009010 <_strtod_l+0x368>
 800900a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800900c:	3301      	adds	r3, #1
 800900e:	9319      	str	r3, [sp, #100]	; 0x64
 8009010:	f04f 0800 	mov.w	r8, #0
 8009014:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009230 <_strtod_l+0x588>
 8009018:	e687      	b.n	8008d2a <_strtod_l+0x82>
 800901a:	4886      	ldr	r0, [pc, #536]	; (8009234 <_strtod_l+0x58c>)
 800901c:	f002 fe3e 	bl	800bc9c <nan>
 8009020:	4680      	mov	r8, r0
 8009022:	4689      	mov	r9, r1
 8009024:	e681      	b.n	8008d2a <_strtod_l+0x82>
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	f1bb 0f00 	cmp.w	fp, #0
 800902c:	bf08      	it	eq
 800902e:	46a3      	moveq	fp, r4
 8009030:	1aeb      	subs	r3, r5, r3
 8009032:	2c10      	cmp	r4, #16
 8009034:	9806      	ldr	r0, [sp, #24]
 8009036:	4626      	mov	r6, r4
 8009038:	9307      	str	r3, [sp, #28]
 800903a:	bfa8      	it	ge
 800903c:	2610      	movge	r6, #16
 800903e:	f7f7 f9d1 	bl	80003e4 <__aeabi_ui2d>
 8009042:	2c09      	cmp	r4, #9
 8009044:	4680      	mov	r8, r0
 8009046:	4689      	mov	r9, r1
 8009048:	dd13      	ble.n	8009072 <_strtod_l+0x3ca>
 800904a:	4b7b      	ldr	r3, [pc, #492]	; (8009238 <_strtod_l+0x590>)
 800904c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009050:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	4680      	mov	r8, r0
 800905a:	9805      	ldr	r0, [sp, #20]
 800905c:	4689      	mov	r9, r1
 800905e:	f7f7 f9c1 	bl	80003e4 <__aeabi_ui2d>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 f87f 	bl	800016c <__adddf3>
 800906e:	4680      	mov	r8, r0
 8009070:	4689      	mov	r9, r1
 8009072:	2c0f      	cmp	r4, #15
 8009074:	dc36      	bgt.n	80090e4 <_strtod_l+0x43c>
 8009076:	9b07      	ldr	r3, [sp, #28]
 8009078:	2b00      	cmp	r3, #0
 800907a:	f43f ae56 	beq.w	8008d2a <_strtod_l+0x82>
 800907e:	dd22      	ble.n	80090c6 <_strtod_l+0x41e>
 8009080:	2b16      	cmp	r3, #22
 8009082:	dc09      	bgt.n	8009098 <_strtod_l+0x3f0>
 8009084:	496c      	ldr	r1, [pc, #432]	; (8009238 <_strtod_l+0x590>)
 8009086:	4642      	mov	r2, r8
 8009088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800908c:	464b      	mov	r3, r9
 800908e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009092:	f7f7 fa21 	bl	80004d8 <__aeabi_dmul>
 8009096:	e7c3      	b.n	8009020 <_strtod_l+0x378>
 8009098:	9a07      	ldr	r2, [sp, #28]
 800909a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800909e:	4293      	cmp	r3, r2
 80090a0:	db20      	blt.n	80090e4 <_strtod_l+0x43c>
 80090a2:	4d65      	ldr	r5, [pc, #404]	; (8009238 <_strtod_l+0x590>)
 80090a4:	f1c4 040f 	rsb	r4, r4, #15
 80090a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80090ac:	4642      	mov	r2, r8
 80090ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b2:	464b      	mov	r3, r9
 80090b4:	f7f7 fa10 	bl	80004d8 <__aeabi_dmul>
 80090b8:	9b07      	ldr	r3, [sp, #28]
 80090ba:	1b1c      	subs	r4, r3, r4
 80090bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80090c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090c4:	e7e5      	b.n	8009092 <_strtod_l+0x3ea>
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	3316      	adds	r3, #22
 80090ca:	db0b      	blt.n	80090e4 <_strtod_l+0x43c>
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	4640      	mov	r0, r8
 80090d0:	1b5d      	subs	r5, r3, r5
 80090d2:	4b59      	ldr	r3, [pc, #356]	; (8009238 <_strtod_l+0x590>)
 80090d4:	4649      	mov	r1, r9
 80090d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80090da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090de:	f7f7 fb25 	bl	800072c <__aeabi_ddiv>
 80090e2:	e79d      	b.n	8009020 <_strtod_l+0x378>
 80090e4:	9b07      	ldr	r3, [sp, #28]
 80090e6:	1ba6      	subs	r6, r4, r6
 80090e8:	441e      	add	r6, r3
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	dd74      	ble.n	80091d8 <_strtod_l+0x530>
 80090ee:	f016 030f 	ands.w	r3, r6, #15
 80090f2:	d00a      	beq.n	800910a <_strtod_l+0x462>
 80090f4:	4950      	ldr	r1, [pc, #320]	; (8009238 <_strtod_l+0x590>)
 80090f6:	4642      	mov	r2, r8
 80090f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009100:	464b      	mov	r3, r9
 8009102:	f7f7 f9e9 	bl	80004d8 <__aeabi_dmul>
 8009106:	4680      	mov	r8, r0
 8009108:	4689      	mov	r9, r1
 800910a:	f036 060f 	bics.w	r6, r6, #15
 800910e:	d052      	beq.n	80091b6 <_strtod_l+0x50e>
 8009110:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009114:	dd27      	ble.n	8009166 <_strtod_l+0x4be>
 8009116:	f04f 0b00 	mov.w	fp, #0
 800911a:	f8cd b010 	str.w	fp, [sp, #16]
 800911e:	f8cd b020 	str.w	fp, [sp, #32]
 8009122:	f8cd b018 	str.w	fp, [sp, #24]
 8009126:	2322      	movs	r3, #34	; 0x22
 8009128:	f04f 0800 	mov.w	r8, #0
 800912c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009230 <_strtod_l+0x588>
 8009130:	f8ca 3000 	str.w	r3, [sl]
 8009134:	9b08      	ldr	r3, [sp, #32]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f43f adf7 	beq.w	8008d2a <_strtod_l+0x82>
 800913c:	4650      	mov	r0, sl
 800913e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009140:	f001 ff6a 	bl	800b018 <_Bfree>
 8009144:	4650      	mov	r0, sl
 8009146:	9906      	ldr	r1, [sp, #24]
 8009148:	f001 ff66 	bl	800b018 <_Bfree>
 800914c:	4650      	mov	r0, sl
 800914e:	9904      	ldr	r1, [sp, #16]
 8009150:	f001 ff62 	bl	800b018 <_Bfree>
 8009154:	4650      	mov	r0, sl
 8009156:	9908      	ldr	r1, [sp, #32]
 8009158:	f001 ff5e 	bl	800b018 <_Bfree>
 800915c:	4659      	mov	r1, fp
 800915e:	4650      	mov	r0, sl
 8009160:	f001 ff5a 	bl	800b018 <_Bfree>
 8009164:	e5e1      	b.n	8008d2a <_strtod_l+0x82>
 8009166:	4b35      	ldr	r3, [pc, #212]	; (800923c <_strtod_l+0x594>)
 8009168:	4640      	mov	r0, r8
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	2300      	movs	r3, #0
 800916e:	4649      	mov	r1, r9
 8009170:	461f      	mov	r7, r3
 8009172:	1136      	asrs	r6, r6, #4
 8009174:	2e01      	cmp	r6, #1
 8009176:	dc21      	bgt.n	80091bc <_strtod_l+0x514>
 8009178:	b10b      	cbz	r3, 800917e <_strtod_l+0x4d6>
 800917a:	4680      	mov	r8, r0
 800917c:	4689      	mov	r9, r1
 800917e:	4b2f      	ldr	r3, [pc, #188]	; (800923c <_strtod_l+0x594>)
 8009180:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009184:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009188:	4642      	mov	r2, r8
 800918a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800918e:	464b      	mov	r3, r9
 8009190:	f7f7 f9a2 	bl	80004d8 <__aeabi_dmul>
 8009194:	4b26      	ldr	r3, [pc, #152]	; (8009230 <_strtod_l+0x588>)
 8009196:	460a      	mov	r2, r1
 8009198:	400b      	ands	r3, r1
 800919a:	4929      	ldr	r1, [pc, #164]	; (8009240 <_strtod_l+0x598>)
 800919c:	4680      	mov	r8, r0
 800919e:	428b      	cmp	r3, r1
 80091a0:	d8b9      	bhi.n	8009116 <_strtod_l+0x46e>
 80091a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091a6:	428b      	cmp	r3, r1
 80091a8:	bf86      	itte	hi
 80091aa:	f04f 38ff 	movhi.w	r8, #4294967295
 80091ae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009244 <_strtod_l+0x59c>
 80091b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80091b6:	2300      	movs	r3, #0
 80091b8:	9305      	str	r3, [sp, #20]
 80091ba:	e07f      	b.n	80092bc <_strtod_l+0x614>
 80091bc:	07f2      	lsls	r2, r6, #31
 80091be:	d505      	bpl.n	80091cc <_strtod_l+0x524>
 80091c0:	9b05      	ldr	r3, [sp, #20]
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 f987 	bl	80004d8 <__aeabi_dmul>
 80091ca:	2301      	movs	r3, #1
 80091cc:	9a05      	ldr	r2, [sp, #20]
 80091ce:	3701      	adds	r7, #1
 80091d0:	3208      	adds	r2, #8
 80091d2:	1076      	asrs	r6, r6, #1
 80091d4:	9205      	str	r2, [sp, #20]
 80091d6:	e7cd      	b.n	8009174 <_strtod_l+0x4cc>
 80091d8:	d0ed      	beq.n	80091b6 <_strtod_l+0x50e>
 80091da:	4276      	negs	r6, r6
 80091dc:	f016 020f 	ands.w	r2, r6, #15
 80091e0:	d00a      	beq.n	80091f8 <_strtod_l+0x550>
 80091e2:	4b15      	ldr	r3, [pc, #84]	; (8009238 <_strtod_l+0x590>)
 80091e4:	4640      	mov	r0, r8
 80091e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ea:	4649      	mov	r1, r9
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	f7f7 fa9c 	bl	800072c <__aeabi_ddiv>
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	1136      	asrs	r6, r6, #4
 80091fa:	d0dc      	beq.n	80091b6 <_strtod_l+0x50e>
 80091fc:	2e1f      	cmp	r6, #31
 80091fe:	dd23      	ble.n	8009248 <_strtod_l+0x5a0>
 8009200:	f04f 0b00 	mov.w	fp, #0
 8009204:	f8cd b010 	str.w	fp, [sp, #16]
 8009208:	f8cd b020 	str.w	fp, [sp, #32]
 800920c:	f8cd b018 	str.w	fp, [sp, #24]
 8009210:	2322      	movs	r3, #34	; 0x22
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	f04f 0900 	mov.w	r9, #0
 800921a:	f8ca 3000 	str.w	r3, [sl]
 800921e:	e789      	b.n	8009134 <_strtod_l+0x48c>
 8009220:	0800c785 	.word	0x0800c785
 8009224:	0800c7c8 	.word	0x0800c7c8
 8009228:	0800c77d 	.word	0x0800c77d
 800922c:	0800c90c 	.word	0x0800c90c
 8009230:	7ff00000 	.word	0x7ff00000
 8009234:	0800cbb8 	.word	0x0800cbb8
 8009238:	0800ca98 	.word	0x0800ca98
 800923c:	0800ca70 	.word	0x0800ca70
 8009240:	7ca00000 	.word	0x7ca00000
 8009244:	7fefffff 	.word	0x7fefffff
 8009248:	f016 0310 	ands.w	r3, r6, #16
 800924c:	bf18      	it	ne
 800924e:	236a      	movne	r3, #106	; 0x6a
 8009250:	4640      	mov	r0, r8
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	4649      	mov	r1, r9
 8009256:	2300      	movs	r3, #0
 8009258:	4fb0      	ldr	r7, [pc, #704]	; (800951c <_strtod_l+0x874>)
 800925a:	07f2      	lsls	r2, r6, #31
 800925c:	d504      	bpl.n	8009268 <_strtod_l+0x5c0>
 800925e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009262:	f7f7 f939 	bl	80004d8 <__aeabi_dmul>
 8009266:	2301      	movs	r3, #1
 8009268:	1076      	asrs	r6, r6, #1
 800926a:	f107 0708 	add.w	r7, r7, #8
 800926e:	d1f4      	bne.n	800925a <_strtod_l+0x5b2>
 8009270:	b10b      	cbz	r3, 8009276 <_strtod_l+0x5ce>
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	b1c3      	cbz	r3, 80092ac <_strtod_l+0x604>
 800927a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800927e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009282:	2b00      	cmp	r3, #0
 8009284:	4649      	mov	r1, r9
 8009286:	dd11      	ble.n	80092ac <_strtod_l+0x604>
 8009288:	2b1f      	cmp	r3, #31
 800928a:	f340 8127 	ble.w	80094dc <_strtod_l+0x834>
 800928e:	2b34      	cmp	r3, #52	; 0x34
 8009290:	bfd8      	it	le
 8009292:	f04f 33ff 	movle.w	r3, #4294967295
 8009296:	f04f 0800 	mov.w	r8, #0
 800929a:	bfcf      	iteee	gt
 800929c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092a4:	fa03 f202 	lslle.w	r2, r3, r2
 80092a8:	ea02 0901 	andle.w	r9, r2, r1
 80092ac:	2200      	movs	r2, #0
 80092ae:	2300      	movs	r3, #0
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d1a1      	bne.n	8009200 <_strtod_l+0x558>
 80092bc:	9b06      	ldr	r3, [sp, #24]
 80092be:	465a      	mov	r2, fp
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4650      	mov	r0, sl
 80092c4:	4623      	mov	r3, r4
 80092c6:	9908      	ldr	r1, [sp, #32]
 80092c8:	f001 ff0e 	bl	800b0e8 <__s2b>
 80092cc:	9008      	str	r0, [sp, #32]
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f43f af21 	beq.w	8009116 <_strtod_l+0x46e>
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	f04f 0b00 	mov.w	fp, #0
 80092da:	1b5d      	subs	r5, r3, r5
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	f8cd b010 	str.w	fp, [sp, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfb4      	ite	lt
 80092e6:	462b      	movlt	r3, r5
 80092e8:	2300      	movge	r3, #0
 80092ea:	930e      	str	r3, [sp, #56]	; 0x38
 80092ec:	9b07      	ldr	r3, [sp, #28]
 80092ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092f2:	9314      	str	r3, [sp, #80]	; 0x50
 80092f4:	9b08      	ldr	r3, [sp, #32]
 80092f6:	4650      	mov	r0, sl
 80092f8:	6859      	ldr	r1, [r3, #4]
 80092fa:	f001 fe4d 	bl	800af98 <_Balloc>
 80092fe:	9006      	str	r0, [sp, #24]
 8009300:	2800      	cmp	r0, #0
 8009302:	f43f af10 	beq.w	8009126 <_strtod_l+0x47e>
 8009306:	9b08      	ldr	r3, [sp, #32]
 8009308:	300c      	adds	r0, #12
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	f103 010c 	add.w	r1, r3, #12
 8009310:	3202      	adds	r2, #2
 8009312:	0092      	lsls	r2, r2, #2
 8009314:	f7fe fcad 	bl	8007c72 <memcpy>
 8009318:	ab1c      	add	r3, sp, #112	; 0x70
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	ab1b      	add	r3, sp, #108	; 0x6c
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	4642      	mov	r2, r8
 8009322:	464b      	mov	r3, r9
 8009324:	4650      	mov	r0, sl
 8009326:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800932a:	f002 fa1f 	bl	800b76c <__d2b>
 800932e:	901a      	str	r0, [sp, #104]	; 0x68
 8009330:	2800      	cmp	r0, #0
 8009332:	f43f aef8 	beq.w	8009126 <_strtod_l+0x47e>
 8009336:	2101      	movs	r1, #1
 8009338:	4650      	mov	r0, sl
 800933a:	f001 ff6d 	bl	800b218 <__i2b>
 800933e:	4603      	mov	r3, r0
 8009340:	9004      	str	r0, [sp, #16]
 8009342:	2800      	cmp	r0, #0
 8009344:	f43f aeef 	beq.w	8009126 <_strtod_l+0x47e>
 8009348:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800934a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800934c:	2d00      	cmp	r5, #0
 800934e:	bfab      	itete	ge
 8009350:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009352:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009354:	18ee      	addge	r6, r5, r3
 8009356:	1b5c      	sublt	r4, r3, r5
 8009358:	9b05      	ldr	r3, [sp, #20]
 800935a:	bfa8      	it	ge
 800935c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800935e:	eba5 0503 	sub.w	r5, r5, r3
 8009362:	4415      	add	r5, r2
 8009364:	4b6e      	ldr	r3, [pc, #440]	; (8009520 <_strtod_l+0x878>)
 8009366:	f105 35ff 	add.w	r5, r5, #4294967295
 800936a:	bfb8      	it	lt
 800936c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800936e:	429d      	cmp	r5, r3
 8009370:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009374:	f280 80c4 	bge.w	8009500 <_strtod_l+0x858>
 8009378:	1b5b      	subs	r3, r3, r5
 800937a:	2b1f      	cmp	r3, #31
 800937c:	f04f 0701 	mov.w	r7, #1
 8009380:	eba2 0203 	sub.w	r2, r2, r3
 8009384:	f300 80b1 	bgt.w	80094ea <_strtod_l+0x842>
 8009388:	2500      	movs	r5, #0
 800938a:	fa07 f303 	lsl.w	r3, r7, r3
 800938e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009390:	18b7      	adds	r7, r6, r2
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	42be      	cmp	r6, r7
 8009396:	4414      	add	r4, r2
 8009398:	441c      	add	r4, r3
 800939a:	4633      	mov	r3, r6
 800939c:	bfa8      	it	ge
 800939e:	463b      	movge	r3, r7
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	bfa8      	it	ge
 80093a4:	4623      	movge	r3, r4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	bfc2      	ittt	gt
 80093aa:	1aff      	subgt	r7, r7, r3
 80093ac:	1ae4      	subgt	r4, r4, r3
 80093ae:	1af6      	subgt	r6, r6, r3
 80093b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dd17      	ble.n	80093e6 <_strtod_l+0x73e>
 80093b6:	461a      	mov	r2, r3
 80093b8:	4650      	mov	r0, sl
 80093ba:	9904      	ldr	r1, [sp, #16]
 80093bc:	f001 ffea 	bl	800b394 <__pow5mult>
 80093c0:	9004      	str	r0, [sp, #16]
 80093c2:	2800      	cmp	r0, #0
 80093c4:	f43f aeaf 	beq.w	8009126 <_strtod_l+0x47e>
 80093c8:	4601      	mov	r1, r0
 80093ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093cc:	4650      	mov	r0, sl
 80093ce:	f001 ff39 	bl	800b244 <__multiply>
 80093d2:	9009      	str	r0, [sp, #36]	; 0x24
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f aea6 	beq.w	8009126 <_strtod_l+0x47e>
 80093da:	4650      	mov	r0, sl
 80093dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093de:	f001 fe1b 	bl	800b018 <_Bfree>
 80093e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e4:	931a      	str	r3, [sp, #104]	; 0x68
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	f300 808e 	bgt.w	8009508 <_strtod_l+0x860>
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dd08      	ble.n	8009404 <_strtod_l+0x75c>
 80093f2:	4650      	mov	r0, sl
 80093f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093f6:	9906      	ldr	r1, [sp, #24]
 80093f8:	f001 ffcc 	bl	800b394 <__pow5mult>
 80093fc:	9006      	str	r0, [sp, #24]
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f ae91 	beq.w	8009126 <_strtod_l+0x47e>
 8009404:	2c00      	cmp	r4, #0
 8009406:	dd08      	ble.n	800941a <_strtod_l+0x772>
 8009408:	4622      	mov	r2, r4
 800940a:	4650      	mov	r0, sl
 800940c:	9906      	ldr	r1, [sp, #24]
 800940e:	f002 f81b 	bl	800b448 <__lshift>
 8009412:	9006      	str	r0, [sp, #24]
 8009414:	2800      	cmp	r0, #0
 8009416:	f43f ae86 	beq.w	8009126 <_strtod_l+0x47e>
 800941a:	2e00      	cmp	r6, #0
 800941c:	dd08      	ble.n	8009430 <_strtod_l+0x788>
 800941e:	4632      	mov	r2, r6
 8009420:	4650      	mov	r0, sl
 8009422:	9904      	ldr	r1, [sp, #16]
 8009424:	f002 f810 	bl	800b448 <__lshift>
 8009428:	9004      	str	r0, [sp, #16]
 800942a:	2800      	cmp	r0, #0
 800942c:	f43f ae7b 	beq.w	8009126 <_strtod_l+0x47e>
 8009430:	4650      	mov	r0, sl
 8009432:	9a06      	ldr	r2, [sp, #24]
 8009434:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009436:	f002 f893 	bl	800b560 <__mdiff>
 800943a:	4683      	mov	fp, r0
 800943c:	2800      	cmp	r0, #0
 800943e:	f43f ae72 	beq.w	8009126 <_strtod_l+0x47e>
 8009442:	2400      	movs	r4, #0
 8009444:	68c3      	ldr	r3, [r0, #12]
 8009446:	9904      	ldr	r1, [sp, #16]
 8009448:	60c4      	str	r4, [r0, #12]
 800944a:	930b      	str	r3, [sp, #44]	; 0x2c
 800944c:	f002 f86c 	bl	800b528 <__mcmp>
 8009450:	42a0      	cmp	r0, r4
 8009452:	da6b      	bge.n	800952c <_strtod_l+0x884>
 8009454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009456:	ea53 0308 	orrs.w	r3, r3, r8
 800945a:	f040 8091 	bne.w	8009580 <_strtod_l+0x8d8>
 800945e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 808c 	bne.w	8009580 <_strtod_l+0x8d8>
 8009468:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800946c:	0d1b      	lsrs	r3, r3, #20
 800946e:	051b      	lsls	r3, r3, #20
 8009470:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009474:	f240 8084 	bls.w	8009580 <_strtod_l+0x8d8>
 8009478:	f8db 3014 	ldr.w	r3, [fp, #20]
 800947c:	b91b      	cbnz	r3, 8009486 <_strtod_l+0x7de>
 800947e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009482:	2b01      	cmp	r3, #1
 8009484:	dd7c      	ble.n	8009580 <_strtod_l+0x8d8>
 8009486:	4659      	mov	r1, fp
 8009488:	2201      	movs	r2, #1
 800948a:	4650      	mov	r0, sl
 800948c:	f001 ffdc 	bl	800b448 <__lshift>
 8009490:	9904      	ldr	r1, [sp, #16]
 8009492:	4683      	mov	fp, r0
 8009494:	f002 f848 	bl	800b528 <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	dd71      	ble.n	8009580 <_strtod_l+0x8d8>
 800949c:	9905      	ldr	r1, [sp, #20]
 800949e:	464b      	mov	r3, r9
 80094a0:	4a20      	ldr	r2, [pc, #128]	; (8009524 <_strtod_l+0x87c>)
 80094a2:	2900      	cmp	r1, #0
 80094a4:	f000 808c 	beq.w	80095c0 <_strtod_l+0x918>
 80094a8:	ea02 0109 	and.w	r1, r2, r9
 80094ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80094b0:	f300 8086 	bgt.w	80095c0 <_strtod_l+0x918>
 80094b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094b8:	f77f aeaa 	ble.w	8009210 <_strtod_l+0x568>
 80094bc:	4640      	mov	r0, r8
 80094be:	4649      	mov	r1, r9
 80094c0:	4b19      	ldr	r3, [pc, #100]	; (8009528 <_strtod_l+0x880>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f7f7 f808 	bl	80004d8 <__aeabi_dmul>
 80094c8:	460b      	mov	r3, r1
 80094ca:	4303      	orrs	r3, r0
 80094cc:	bf08      	it	eq
 80094ce:	2322      	moveq	r3, #34	; 0x22
 80094d0:	4680      	mov	r8, r0
 80094d2:	4689      	mov	r9, r1
 80094d4:	bf08      	it	eq
 80094d6:	f8ca 3000 	streq.w	r3, [sl]
 80094da:	e62f      	b.n	800913c <_strtod_l+0x494>
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	fa02 f303 	lsl.w	r3, r2, r3
 80094e4:	ea03 0808 	and.w	r8, r3, r8
 80094e8:	e6e0      	b.n	80092ac <_strtod_l+0x604>
 80094ea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80094ee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80094f2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80094f6:	35e2      	adds	r5, #226	; 0xe2
 80094f8:	fa07 f505 	lsl.w	r5, r7, r5
 80094fc:	970f      	str	r7, [sp, #60]	; 0x3c
 80094fe:	e747      	b.n	8009390 <_strtod_l+0x6e8>
 8009500:	2301      	movs	r3, #1
 8009502:	2500      	movs	r5, #0
 8009504:	930f      	str	r3, [sp, #60]	; 0x3c
 8009506:	e743      	b.n	8009390 <_strtod_l+0x6e8>
 8009508:	463a      	mov	r2, r7
 800950a:	4650      	mov	r0, sl
 800950c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800950e:	f001 ff9b 	bl	800b448 <__lshift>
 8009512:	901a      	str	r0, [sp, #104]	; 0x68
 8009514:	2800      	cmp	r0, #0
 8009516:	f47f af69 	bne.w	80093ec <_strtod_l+0x744>
 800951a:	e604      	b.n	8009126 <_strtod_l+0x47e>
 800951c:	0800c7e0 	.word	0x0800c7e0
 8009520:	fffffc02 	.word	0xfffffc02
 8009524:	7ff00000 	.word	0x7ff00000
 8009528:	39500000 	.word	0x39500000
 800952c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009530:	d165      	bne.n	80095fe <_strtod_l+0x956>
 8009532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009534:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009538:	b35a      	cbz	r2, 8009592 <_strtod_l+0x8ea>
 800953a:	4a99      	ldr	r2, [pc, #612]	; (80097a0 <_strtod_l+0xaf8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d12b      	bne.n	8009598 <_strtod_l+0x8f0>
 8009540:	9b05      	ldr	r3, [sp, #20]
 8009542:	4641      	mov	r1, r8
 8009544:	b303      	cbz	r3, 8009588 <_strtod_l+0x8e0>
 8009546:	464a      	mov	r2, r9
 8009548:	4b96      	ldr	r3, [pc, #600]	; (80097a4 <_strtod_l+0xafc>)
 800954a:	4013      	ands	r3, r2
 800954c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	d81b      	bhi.n	800958e <_strtod_l+0x8e6>
 8009556:	0d1b      	lsrs	r3, r3, #20
 8009558:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	4299      	cmp	r1, r3
 8009562:	d119      	bne.n	8009598 <_strtod_l+0x8f0>
 8009564:	4b90      	ldr	r3, [pc, #576]	; (80097a8 <_strtod_l+0xb00>)
 8009566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009568:	429a      	cmp	r2, r3
 800956a:	d102      	bne.n	8009572 <_strtod_l+0x8ca>
 800956c:	3101      	adds	r1, #1
 800956e:	f43f adda 	beq.w	8009126 <_strtod_l+0x47e>
 8009572:	f04f 0800 	mov.w	r8, #0
 8009576:	4b8b      	ldr	r3, [pc, #556]	; (80097a4 <_strtod_l+0xafc>)
 8009578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800957a:	401a      	ands	r2, r3
 800957c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009580:	9b05      	ldr	r3, [sp, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d19a      	bne.n	80094bc <_strtod_l+0x814>
 8009586:	e5d9      	b.n	800913c <_strtod_l+0x494>
 8009588:	f04f 33ff 	mov.w	r3, #4294967295
 800958c:	e7e8      	b.n	8009560 <_strtod_l+0x8b8>
 800958e:	4613      	mov	r3, r2
 8009590:	e7e6      	b.n	8009560 <_strtod_l+0x8b8>
 8009592:	ea53 0308 	orrs.w	r3, r3, r8
 8009596:	d081      	beq.n	800949c <_strtod_l+0x7f4>
 8009598:	b1e5      	cbz	r5, 80095d4 <_strtod_l+0x92c>
 800959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959c:	421d      	tst	r5, r3
 800959e:	d0ef      	beq.n	8009580 <_strtod_l+0x8d8>
 80095a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	b1c3      	cbz	r3, 80095dc <_strtod_l+0x934>
 80095aa:	f7ff fb5c 	bl	8008c66 <sulp>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095b6:	f7f6 fdd9 	bl	800016c <__adddf3>
 80095ba:	4680      	mov	r8, r0
 80095bc:	4689      	mov	r9, r1
 80095be:	e7df      	b.n	8009580 <_strtod_l+0x8d8>
 80095c0:	4013      	ands	r3, r2
 80095c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095c6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095ca:	f04f 38ff 	mov.w	r8, #4294967295
 80095ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095d2:	e7d5      	b.n	8009580 <_strtod_l+0x8d8>
 80095d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095d6:	ea13 0f08 	tst.w	r3, r8
 80095da:	e7e0      	b.n	800959e <_strtod_l+0x8f6>
 80095dc:	f7ff fb43 	bl	8008c66 <sulp>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095e8:	f7f6 fdbe 	bl	8000168 <__aeabi_dsub>
 80095ec:	2200      	movs	r2, #0
 80095ee:	2300      	movs	r3, #0
 80095f0:	4680      	mov	r8, r0
 80095f2:	4689      	mov	r9, r1
 80095f4:	f7f7 f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d0c1      	beq.n	8009580 <_strtod_l+0x8d8>
 80095fc:	e608      	b.n	8009210 <_strtod_l+0x568>
 80095fe:	4658      	mov	r0, fp
 8009600:	9904      	ldr	r1, [sp, #16]
 8009602:	f002 f90f 	bl	800b824 <__ratio>
 8009606:	2200      	movs	r2, #0
 8009608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800960c:	4606      	mov	r6, r0
 800960e:	460f      	mov	r7, r1
 8009610:	f7f7 f9de 	bl	80009d0 <__aeabi_dcmple>
 8009614:	2800      	cmp	r0, #0
 8009616:	d070      	beq.n	80096fa <_strtod_l+0xa52>
 8009618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d042      	beq.n	80096a4 <_strtod_l+0x9fc>
 800961e:	2600      	movs	r6, #0
 8009620:	4f62      	ldr	r7, [pc, #392]	; (80097ac <_strtod_l+0xb04>)
 8009622:	4d62      	ldr	r5, [pc, #392]	; (80097ac <_strtod_l+0xb04>)
 8009624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800962a:	0d1b      	lsrs	r3, r3, #20
 800962c:	051b      	lsls	r3, r3, #20
 800962e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009632:	4b5f      	ldr	r3, [pc, #380]	; (80097b0 <_strtod_l+0xb08>)
 8009634:	429a      	cmp	r2, r3
 8009636:	f040 80c3 	bne.w	80097c0 <_strtod_l+0xb18>
 800963a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963c:	4640      	mov	r0, r8
 800963e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009642:	4649      	mov	r1, r9
 8009644:	f002 f818 	bl	800b678 <__ulp>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4630      	mov	r0, r6
 800964e:	4639      	mov	r1, r7
 8009650:	f7f6 ff42 	bl	80004d8 <__aeabi_dmul>
 8009654:	4642      	mov	r2, r8
 8009656:	464b      	mov	r3, r9
 8009658:	f7f6 fd88 	bl	800016c <__adddf3>
 800965c:	460b      	mov	r3, r1
 800965e:	4951      	ldr	r1, [pc, #324]	; (80097a4 <_strtod_l+0xafc>)
 8009660:	4a54      	ldr	r2, [pc, #336]	; (80097b4 <_strtod_l+0xb0c>)
 8009662:	4019      	ands	r1, r3
 8009664:	4291      	cmp	r1, r2
 8009666:	4680      	mov	r8, r0
 8009668:	d95d      	bls.n	8009726 <_strtod_l+0xa7e>
 800966a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800966c:	4b4e      	ldr	r3, [pc, #312]	; (80097a8 <_strtod_l+0xb00>)
 800966e:	429a      	cmp	r2, r3
 8009670:	d103      	bne.n	800967a <_strtod_l+0x9d2>
 8009672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009674:	3301      	adds	r3, #1
 8009676:	f43f ad56 	beq.w	8009126 <_strtod_l+0x47e>
 800967a:	f04f 38ff 	mov.w	r8, #4294967295
 800967e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80097a8 <_strtod_l+0xb00>
 8009682:	4650      	mov	r0, sl
 8009684:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009686:	f001 fcc7 	bl	800b018 <_Bfree>
 800968a:	4650      	mov	r0, sl
 800968c:	9906      	ldr	r1, [sp, #24]
 800968e:	f001 fcc3 	bl	800b018 <_Bfree>
 8009692:	4650      	mov	r0, sl
 8009694:	9904      	ldr	r1, [sp, #16]
 8009696:	f001 fcbf 	bl	800b018 <_Bfree>
 800969a:	4659      	mov	r1, fp
 800969c:	4650      	mov	r0, sl
 800969e:	f001 fcbb 	bl	800b018 <_Bfree>
 80096a2:	e627      	b.n	80092f4 <_strtod_l+0x64c>
 80096a4:	f1b8 0f00 	cmp.w	r8, #0
 80096a8:	d119      	bne.n	80096de <_strtod_l+0xa36>
 80096aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b0:	b9e3      	cbnz	r3, 80096ec <_strtod_l+0xa44>
 80096b2:	2200      	movs	r2, #0
 80096b4:	4630      	mov	r0, r6
 80096b6:	4639      	mov	r1, r7
 80096b8:	4b3c      	ldr	r3, [pc, #240]	; (80097ac <_strtod_l+0xb04>)
 80096ba:	f7f7 f97f 	bl	80009bc <__aeabi_dcmplt>
 80096be:	b9c8      	cbnz	r0, 80096f4 <_strtod_l+0xa4c>
 80096c0:	2200      	movs	r2, #0
 80096c2:	4630      	mov	r0, r6
 80096c4:	4639      	mov	r1, r7
 80096c6:	4b3c      	ldr	r3, [pc, #240]	; (80097b8 <_strtod_l+0xb10>)
 80096c8:	f7f6 ff06 	bl	80004d8 <__aeabi_dmul>
 80096cc:	4604      	mov	r4, r0
 80096ce:	460d      	mov	r5, r1
 80096d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80096d4:	9416      	str	r4, [sp, #88]	; 0x58
 80096d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80096d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80096dc:	e7a2      	b.n	8009624 <_strtod_l+0x97c>
 80096de:	f1b8 0f01 	cmp.w	r8, #1
 80096e2:	d103      	bne.n	80096ec <_strtod_l+0xa44>
 80096e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f43f ad92 	beq.w	8009210 <_strtod_l+0x568>
 80096ec:	2600      	movs	r6, #0
 80096ee:	2400      	movs	r4, #0
 80096f0:	4f32      	ldr	r7, [pc, #200]	; (80097bc <_strtod_l+0xb14>)
 80096f2:	e796      	b.n	8009622 <_strtod_l+0x97a>
 80096f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80096f6:	4d30      	ldr	r5, [pc, #192]	; (80097b8 <_strtod_l+0xb10>)
 80096f8:	e7ea      	b.n	80096d0 <_strtod_l+0xa28>
 80096fa:	4b2f      	ldr	r3, [pc, #188]	; (80097b8 <_strtod_l+0xb10>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fee9 	bl	80004d8 <__aeabi_dmul>
 8009706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	b933      	cbnz	r3, 800971c <_strtod_l+0xa74>
 800970e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009712:	9010      	str	r0, [sp, #64]	; 0x40
 8009714:	9311      	str	r3, [sp, #68]	; 0x44
 8009716:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800971a:	e783      	b.n	8009624 <_strtod_l+0x97c>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009724:	e7f7      	b.n	8009716 <_strtod_l+0xa6e>
 8009726:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800972a:	9b05      	ldr	r3, [sp, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1a8      	bne.n	8009682 <_strtod_l+0x9da>
 8009730:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009734:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009736:	0d1b      	lsrs	r3, r3, #20
 8009738:	051b      	lsls	r3, r3, #20
 800973a:	429a      	cmp	r2, r3
 800973c:	d1a1      	bne.n	8009682 <_strtod_l+0x9da>
 800973e:	4620      	mov	r0, r4
 8009740:	4629      	mov	r1, r5
 8009742:	f7f7 fa11 	bl	8000b68 <__aeabi_d2lz>
 8009746:	f7f6 fe99 	bl	800047c <__aeabi_l2d>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f6 fd09 	bl	8000168 <__aeabi_dsub>
 8009756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800975c:	ea43 0308 	orr.w	r3, r3, r8
 8009760:	4313      	orrs	r3, r2
 8009762:	4604      	mov	r4, r0
 8009764:	460d      	mov	r5, r1
 8009766:	d066      	beq.n	8009836 <_strtod_l+0xb8e>
 8009768:	a309      	add	r3, pc, #36	; (adr r3, 8009790 <_strtod_l+0xae8>)
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f7 f925 	bl	80009bc <__aeabi_dcmplt>
 8009772:	2800      	cmp	r0, #0
 8009774:	f47f ace2 	bne.w	800913c <_strtod_l+0x494>
 8009778:	a307      	add	r3, pc, #28	; (adr r3, 8009798 <_strtod_l+0xaf0>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	4620      	mov	r0, r4
 8009780:	4629      	mov	r1, r5
 8009782:	f7f7 f939 	bl	80009f8 <__aeabi_dcmpgt>
 8009786:	2800      	cmp	r0, #0
 8009788:	f43f af7b 	beq.w	8009682 <_strtod_l+0x9da>
 800978c:	e4d6      	b.n	800913c <_strtod_l+0x494>
 800978e:	bf00      	nop
 8009790:	94a03595 	.word	0x94a03595
 8009794:	3fdfffff 	.word	0x3fdfffff
 8009798:	35afe535 	.word	0x35afe535
 800979c:	3fe00000 	.word	0x3fe00000
 80097a0:	000fffff 	.word	0x000fffff
 80097a4:	7ff00000 	.word	0x7ff00000
 80097a8:	7fefffff 	.word	0x7fefffff
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	7fe00000 	.word	0x7fe00000
 80097b4:	7c9fffff 	.word	0x7c9fffff
 80097b8:	3fe00000 	.word	0x3fe00000
 80097bc:	bff00000 	.word	0xbff00000
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	b313      	cbz	r3, 800980a <_strtod_l+0xb62>
 80097c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097ca:	d81e      	bhi.n	800980a <_strtod_l+0xb62>
 80097cc:	a326      	add	r3, pc, #152	; (adr r3, 8009868 <_strtod_l+0xbc0>)
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f7 f8fb 	bl	80009d0 <__aeabi_dcmple>
 80097da:	b190      	cbz	r0, 8009802 <_strtod_l+0xb5a>
 80097dc:	4629      	mov	r1, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	f7f7 f952 	bl	8000a88 <__aeabi_d2uiz>
 80097e4:	2801      	cmp	r0, #1
 80097e6:	bf38      	it	cc
 80097e8:	2001      	movcc	r0, #1
 80097ea:	f7f6 fdfb 	bl	80003e4 <__aeabi_ui2d>
 80097ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097f0:	4604      	mov	r4, r0
 80097f2:	460d      	mov	r5, r1
 80097f4:	b9d3      	cbnz	r3, 800982c <_strtod_l+0xb84>
 80097f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097fa:	9012      	str	r0, [sp, #72]	; 0x48
 80097fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80097fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009804:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009808:	1a9f      	subs	r7, r3, r2
 800980a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800980e:	f001 ff33 	bl	800b678 <__ulp>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	f7f6 fe5d 	bl	80004d8 <__aeabi_dmul>
 800981e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009822:	f7f6 fca3 	bl	800016c <__adddf3>
 8009826:	4680      	mov	r8, r0
 8009828:	4689      	mov	r9, r1
 800982a:	e77e      	b.n	800972a <_strtod_l+0xa82>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009834:	e7e3      	b.n	80097fe <_strtod_l+0xb56>
 8009836:	a30e      	add	r3, pc, #56	; (adr r3, 8009870 <_strtod_l+0xbc8>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f7f7 f8be 	bl	80009bc <__aeabi_dcmplt>
 8009840:	e7a1      	b.n	8009786 <_strtod_l+0xade>
 8009842:	2300      	movs	r3, #0
 8009844:	930a      	str	r3, [sp, #40]	; 0x28
 8009846:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009848:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	f7ff ba71 	b.w	8008d32 <_strtod_l+0x8a>
 8009850:	2a65      	cmp	r2, #101	; 0x65
 8009852:	f43f ab63 	beq.w	8008f1c <_strtod_l+0x274>
 8009856:	2a45      	cmp	r2, #69	; 0x45
 8009858:	f43f ab60 	beq.w	8008f1c <_strtod_l+0x274>
 800985c:	2301      	movs	r3, #1
 800985e:	f7ff bb95 	b.w	8008f8c <_strtod_l+0x2e4>
 8009862:	bf00      	nop
 8009864:	f3af 8000 	nop.w
 8009868:	ffc00000 	.word	0xffc00000
 800986c:	41dfffff 	.word	0x41dfffff
 8009870:	94a03595 	.word	0x94a03595
 8009874:	3fcfffff 	.word	0x3fcfffff

08009878 <_strtod_r>:
 8009878:	4b01      	ldr	r3, [pc, #4]	; (8009880 <_strtod_r+0x8>)
 800987a:	f7ff ba15 	b.w	8008ca8 <_strtod_l>
 800987e:	bf00      	nop
 8009880:	20000078 	.word	0x20000078

08009884 <_strtol_l.constprop.0>:
 8009884:	2b01      	cmp	r3, #1
 8009886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800988a:	4680      	mov	r8, r0
 800988c:	d001      	beq.n	8009892 <_strtol_l.constprop.0+0xe>
 800988e:	2b24      	cmp	r3, #36	; 0x24
 8009890:	d906      	bls.n	80098a0 <_strtol_l.constprop.0+0x1c>
 8009892:	f7fe f8cb 	bl	8007a2c <__errno>
 8009896:	2316      	movs	r3, #22
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	2000      	movs	r0, #0
 800989c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a0:	460d      	mov	r5, r1
 80098a2:	4f35      	ldr	r7, [pc, #212]	; (8009978 <_strtol_l.constprop.0+0xf4>)
 80098a4:	4628      	mov	r0, r5
 80098a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098aa:	5de6      	ldrb	r6, [r4, r7]
 80098ac:	f016 0608 	ands.w	r6, r6, #8
 80098b0:	d1f8      	bne.n	80098a4 <_strtol_l.constprop.0+0x20>
 80098b2:	2c2d      	cmp	r4, #45	; 0x2d
 80098b4:	d12f      	bne.n	8009916 <_strtol_l.constprop.0+0x92>
 80098b6:	2601      	movs	r6, #1
 80098b8:	782c      	ldrb	r4, [r5, #0]
 80098ba:	1c85      	adds	r5, r0, #2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d057      	beq.n	8009970 <_strtol_l.constprop.0+0xec>
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d109      	bne.n	80098d8 <_strtol_l.constprop.0+0x54>
 80098c4:	2c30      	cmp	r4, #48	; 0x30
 80098c6:	d107      	bne.n	80098d8 <_strtol_l.constprop.0+0x54>
 80098c8:	7828      	ldrb	r0, [r5, #0]
 80098ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098ce:	2858      	cmp	r0, #88	; 0x58
 80098d0:	d149      	bne.n	8009966 <_strtol_l.constprop.0+0xe2>
 80098d2:	2310      	movs	r3, #16
 80098d4:	786c      	ldrb	r4, [r5, #1]
 80098d6:	3502      	adds	r5, #2
 80098d8:	2700      	movs	r7, #0
 80098da:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80098de:	f10e 3eff 	add.w	lr, lr, #4294967295
 80098e2:	fbbe f9f3 	udiv	r9, lr, r3
 80098e6:	4638      	mov	r0, r7
 80098e8:	fb03 ea19 	mls	sl, r3, r9, lr
 80098ec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80098f0:	f1bc 0f09 	cmp.w	ip, #9
 80098f4:	d814      	bhi.n	8009920 <_strtol_l.constprop.0+0x9c>
 80098f6:	4664      	mov	r4, ip
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	dd22      	ble.n	8009942 <_strtol_l.constprop.0+0xbe>
 80098fc:	2f00      	cmp	r7, #0
 80098fe:	db1d      	blt.n	800993c <_strtol_l.constprop.0+0xb8>
 8009900:	4581      	cmp	r9, r0
 8009902:	d31b      	bcc.n	800993c <_strtol_l.constprop.0+0xb8>
 8009904:	d101      	bne.n	800990a <_strtol_l.constprop.0+0x86>
 8009906:	45a2      	cmp	sl, r4
 8009908:	db18      	blt.n	800993c <_strtol_l.constprop.0+0xb8>
 800990a:	2701      	movs	r7, #1
 800990c:	fb00 4003 	mla	r0, r0, r3, r4
 8009910:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009914:	e7ea      	b.n	80098ec <_strtol_l.constprop.0+0x68>
 8009916:	2c2b      	cmp	r4, #43	; 0x2b
 8009918:	bf04      	itt	eq
 800991a:	782c      	ldrbeq	r4, [r5, #0]
 800991c:	1c85      	addeq	r5, r0, #2
 800991e:	e7cd      	b.n	80098bc <_strtol_l.constprop.0+0x38>
 8009920:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009924:	f1bc 0f19 	cmp.w	ip, #25
 8009928:	d801      	bhi.n	800992e <_strtol_l.constprop.0+0xaa>
 800992a:	3c37      	subs	r4, #55	; 0x37
 800992c:	e7e4      	b.n	80098f8 <_strtol_l.constprop.0+0x74>
 800992e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009932:	f1bc 0f19 	cmp.w	ip, #25
 8009936:	d804      	bhi.n	8009942 <_strtol_l.constprop.0+0xbe>
 8009938:	3c57      	subs	r4, #87	; 0x57
 800993a:	e7dd      	b.n	80098f8 <_strtol_l.constprop.0+0x74>
 800993c:	f04f 37ff 	mov.w	r7, #4294967295
 8009940:	e7e6      	b.n	8009910 <_strtol_l.constprop.0+0x8c>
 8009942:	2f00      	cmp	r7, #0
 8009944:	da07      	bge.n	8009956 <_strtol_l.constprop.0+0xd2>
 8009946:	2322      	movs	r3, #34	; 0x22
 8009948:	4670      	mov	r0, lr
 800994a:	f8c8 3000 	str.w	r3, [r8]
 800994e:	2a00      	cmp	r2, #0
 8009950:	d0a4      	beq.n	800989c <_strtol_l.constprop.0+0x18>
 8009952:	1e69      	subs	r1, r5, #1
 8009954:	e005      	b.n	8009962 <_strtol_l.constprop.0+0xde>
 8009956:	b106      	cbz	r6, 800995a <_strtol_l.constprop.0+0xd6>
 8009958:	4240      	negs	r0, r0
 800995a:	2a00      	cmp	r2, #0
 800995c:	d09e      	beq.n	800989c <_strtol_l.constprop.0+0x18>
 800995e:	2f00      	cmp	r7, #0
 8009960:	d1f7      	bne.n	8009952 <_strtol_l.constprop.0+0xce>
 8009962:	6011      	str	r1, [r2, #0]
 8009964:	e79a      	b.n	800989c <_strtol_l.constprop.0+0x18>
 8009966:	2430      	movs	r4, #48	; 0x30
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1b5      	bne.n	80098d8 <_strtol_l.constprop.0+0x54>
 800996c:	2308      	movs	r3, #8
 800996e:	e7b3      	b.n	80098d8 <_strtol_l.constprop.0+0x54>
 8009970:	2c30      	cmp	r4, #48	; 0x30
 8009972:	d0a9      	beq.n	80098c8 <_strtol_l.constprop.0+0x44>
 8009974:	230a      	movs	r3, #10
 8009976:	e7af      	b.n	80098d8 <_strtol_l.constprop.0+0x54>
 8009978:	0800c809 	.word	0x0800c809

0800997c <_strtol_r>:
 800997c:	f7ff bf82 	b.w	8009884 <_strtol_l.constprop.0>

08009980 <_write_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	2200      	movs	r2, #0
 800998a:	4d05      	ldr	r5, [pc, #20]	; (80099a0 <_write_r+0x20>)
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f7 fee2 	bl	8001758 <_write>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_write_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_write_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	200031d8 	.word	0x200031d8

080099a4 <_close_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	2300      	movs	r3, #0
 80099a8:	4d05      	ldr	r5, [pc, #20]	; (80099c0 <_close_r+0x1c>)
 80099aa:	4604      	mov	r4, r0
 80099ac:	4608      	mov	r0, r1
 80099ae:	602b      	str	r3, [r5, #0]
 80099b0:	f7f7 feee 	bl	8001790 <_close>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d102      	bne.n	80099be <_close_r+0x1a>
 80099b8:	682b      	ldr	r3, [r5, #0]
 80099ba:	b103      	cbz	r3, 80099be <_close_r+0x1a>
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	bd38      	pop	{r3, r4, r5, pc}
 80099c0:	200031d8 	.word	0x200031d8

080099c4 <quorem>:
 80099c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	6903      	ldr	r3, [r0, #16]
 80099ca:	690c      	ldr	r4, [r1, #16]
 80099cc:	4607      	mov	r7, r0
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	f2c0 8082 	blt.w	8009ad8 <quorem+0x114>
 80099d4:	3c01      	subs	r4, #1
 80099d6:	f100 0514 	add.w	r5, r0, #20
 80099da:	f101 0814 	add.w	r8, r1, #20
 80099de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ec:	3301      	adds	r3, #1
 80099ee:	429a      	cmp	r2, r3
 80099f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80099f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099fc:	d331      	bcc.n	8009a62 <quorem+0x9e>
 80099fe:	f04f 0e00 	mov.w	lr, #0
 8009a02:	4640      	mov	r0, r8
 8009a04:	46ac      	mov	ip, r5
 8009a06:	46f2      	mov	sl, lr
 8009a08:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a0c:	b293      	uxth	r3, r2
 8009a0e:	fb06 e303 	mla	r3, r6, r3, lr
 8009a12:	0c12      	lsrs	r2, r2, #16
 8009a14:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	fb06 e202 	mla	r2, r6, r2, lr
 8009a1e:	ebaa 0303 	sub.w	r3, sl, r3
 8009a22:	f8dc a000 	ldr.w	sl, [ip]
 8009a26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a2a:	fa1f fa8a 	uxth.w	sl, sl
 8009a2e:	4453      	add	r3, sl
 8009a30:	f8dc a000 	ldr.w	sl, [ip]
 8009a34:	b292      	uxth	r2, r2
 8009a36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a44:	4581      	cmp	r9, r0
 8009a46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8009a4e:	d2db      	bcs.n	8009a08 <quorem+0x44>
 8009a50:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a54:	b92b      	cbnz	r3, 8009a62 <quorem+0x9e>
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	3b04      	subs	r3, #4
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	d32f      	bcc.n	8009ac0 <quorem+0xfc>
 8009a60:	613c      	str	r4, [r7, #16]
 8009a62:	4638      	mov	r0, r7
 8009a64:	f001 fd60 	bl	800b528 <__mcmp>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	db25      	blt.n	8009ab8 <quorem+0xf4>
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f04f 0c00 	mov.w	ip, #0
 8009a72:	3601      	adds	r6, #1
 8009a74:	f858 1b04 	ldr.w	r1, [r8], #4
 8009a78:	f8d0 e000 	ldr.w	lr, [r0]
 8009a7c:	b28b      	uxth	r3, r1
 8009a7e:	ebac 0303 	sub.w	r3, ip, r3
 8009a82:	fa1f f28e 	uxth.w	r2, lr
 8009a86:	4413      	add	r3, r2
 8009a88:	0c0a      	lsrs	r2, r1, #16
 8009a8a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a98:	45c1      	cmp	r9, r8
 8009a9a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a9e:	f840 3b04 	str.w	r3, [r0], #4
 8009aa2:	d2e7      	bcs.n	8009a74 <quorem+0xb0>
 8009aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009aac:	b922      	cbnz	r2, 8009ab8 <quorem+0xf4>
 8009aae:	3b04      	subs	r3, #4
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	d30a      	bcc.n	8009acc <quorem+0x108>
 8009ab6:	613c      	str	r4, [r7, #16]
 8009ab8:	4630      	mov	r0, r6
 8009aba:	b003      	add	sp, #12
 8009abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	6812      	ldr	r2, [r2, #0]
 8009ac2:	3b04      	subs	r3, #4
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	d1cb      	bne.n	8009a60 <quorem+0x9c>
 8009ac8:	3c01      	subs	r4, #1
 8009aca:	e7c6      	b.n	8009a5a <quorem+0x96>
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	3b04      	subs	r3, #4
 8009ad0:	2a00      	cmp	r2, #0
 8009ad2:	d1f0      	bne.n	8009ab6 <quorem+0xf2>
 8009ad4:	3c01      	subs	r4, #1
 8009ad6:	e7eb      	b.n	8009ab0 <quorem+0xec>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7ee      	b.n	8009aba <quorem+0xf6>
 8009adc:	0000      	movs	r0, r0
	...

08009ae0 <_dtoa_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009aea:	b099      	sub	sp, #100	; 0x64
 8009aec:	4605      	mov	r5, r0
 8009aee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009af2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009af6:	b974      	cbnz	r4, 8009b16 <_dtoa_r+0x36>
 8009af8:	2010      	movs	r0, #16
 8009afa:	f001 fa19 	bl	800af30 <malloc>
 8009afe:	4602      	mov	r2, r0
 8009b00:	6268      	str	r0, [r5, #36]	; 0x24
 8009b02:	b920      	cbnz	r0, 8009b0e <_dtoa_r+0x2e>
 8009b04:	21ea      	movs	r1, #234	; 0xea
 8009b06:	4ba8      	ldr	r3, [pc, #672]	; (8009da8 <_dtoa_r+0x2c8>)
 8009b08:	48a8      	ldr	r0, [pc, #672]	; (8009dac <_dtoa_r+0x2cc>)
 8009b0a:	f002 f8ef 	bl	800bcec <__assert_func>
 8009b0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b12:	6004      	str	r4, [r0, #0]
 8009b14:	60c4      	str	r4, [r0, #12]
 8009b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b18:	6819      	ldr	r1, [r3, #0]
 8009b1a:	b151      	cbz	r1, 8009b32 <_dtoa_r+0x52>
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4093      	lsls	r3, r2
 8009b22:	604a      	str	r2, [r1, #4]
 8009b24:	608b      	str	r3, [r1, #8]
 8009b26:	4628      	mov	r0, r5
 8009b28:	f001 fa76 	bl	800b018 <_Bfree>
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	1e3b      	subs	r3, r7, #0
 8009b34:	bfaf      	iteee	ge
 8009b36:	2300      	movge	r3, #0
 8009b38:	2201      	movlt	r2, #1
 8009b3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b3e:	9305      	strlt	r3, [sp, #20]
 8009b40:	bfa8      	it	ge
 8009b42:	f8c8 3000 	strge.w	r3, [r8]
 8009b46:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009b4a:	4b99      	ldr	r3, [pc, #612]	; (8009db0 <_dtoa_r+0x2d0>)
 8009b4c:	bfb8      	it	lt
 8009b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8009b52:	ea33 0309 	bics.w	r3, r3, r9
 8009b56:	d119      	bne.n	8009b8c <_dtoa_r+0xac>
 8009b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b64:	4333      	orrs	r3, r6
 8009b66:	f000 857f 	beq.w	800a668 <_dtoa_r+0xb88>
 8009b6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b6c:	b953      	cbnz	r3, 8009b84 <_dtoa_r+0xa4>
 8009b6e:	4b91      	ldr	r3, [pc, #580]	; (8009db4 <_dtoa_r+0x2d4>)
 8009b70:	e022      	b.n	8009bb8 <_dtoa_r+0xd8>
 8009b72:	4b91      	ldr	r3, [pc, #580]	; (8009db8 <_dtoa_r+0x2d8>)
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	3308      	adds	r3, #8
 8009b78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	9803      	ldr	r0, [sp, #12]
 8009b7e:	b019      	add	sp, #100	; 0x64
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	4b8b      	ldr	r3, [pc, #556]	; (8009db4 <_dtoa_r+0x2d4>)
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	3303      	adds	r3, #3
 8009b8a:	e7f5      	b.n	8009b78 <_dtoa_r+0x98>
 8009b8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f7f6 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	b158      	cbz	r0, 8009bbc <_dtoa_r+0xdc>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 8558 	beq.w	800a662 <_dtoa_r+0xb82>
 8009bb2:	4882      	ldr	r0, [pc, #520]	; (8009dbc <_dtoa_r+0x2dc>)
 8009bb4:	6018      	str	r0, [r3, #0]
 8009bb6:	1e43      	subs	r3, r0, #1
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	e7df      	b.n	8009b7c <_dtoa_r+0x9c>
 8009bbc:	ab16      	add	r3, sp, #88	; 0x58
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	ab17      	add	r3, sp, #92	; 0x5c
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009bca:	f001 fdcf 	bl	800b76c <__d2b>
 8009bce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bd2:	4683      	mov	fp, r0
 8009bd4:	2c00      	cmp	r4, #0
 8009bd6:	d07f      	beq.n	8009cd8 <_dtoa_r+0x1f8>
 8009bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bde:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009bea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009bee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	4b72      	ldr	r3, [pc, #456]	; (8009dc0 <_dtoa_r+0x2e0>)
 8009bf6:	f7f6 fab7 	bl	8000168 <__aeabi_dsub>
 8009bfa:	a365      	add	r3, pc, #404	; (adr r3, 8009d90 <_dtoa_r+0x2b0>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f7f6 fc6a 	bl	80004d8 <__aeabi_dmul>
 8009c04:	a364      	add	r3, pc, #400	; (adr r3, 8009d98 <_dtoa_r+0x2b8>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 faaf 	bl	800016c <__adddf3>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	4620      	mov	r0, r4
 8009c12:	460f      	mov	r7, r1
 8009c14:	f7f6 fbf6 	bl	8000404 <__aeabi_i2d>
 8009c18:	a361      	add	r3, pc, #388	; (adr r3, 8009da0 <_dtoa_r+0x2c0>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fc5b 	bl	80004d8 <__aeabi_dmul>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 fa9f 	bl	800016c <__adddf3>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460f      	mov	r7, r1
 8009c32:	f7f6 ff01 	bl	8000a38 <__aeabi_d2iz>
 8009c36:	2200      	movs	r2, #0
 8009c38:	4682      	mov	sl, r0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 febc 	bl	80009bc <__aeabi_dcmplt>
 8009c44:	b148      	cbz	r0, 8009c5a <_dtoa_r+0x17a>
 8009c46:	4650      	mov	r0, sl
 8009c48:	f7f6 fbdc 	bl	8000404 <__aeabi_i2d>
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	f7f6 feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009c54:	b908      	cbnz	r0, 8009c5a <_dtoa_r+0x17a>
 8009c56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c5a:	f1ba 0f16 	cmp.w	sl, #22
 8009c5e:	d858      	bhi.n	8009d12 <_dtoa_r+0x232>
 8009c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c64:	4b57      	ldr	r3, [pc, #348]	; (8009dc4 <_dtoa_r+0x2e4>)
 8009c66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f7f6 fea5 	bl	80009bc <__aeabi_dcmplt>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d04f      	beq.n	8009d16 <_dtoa_r+0x236>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c80:	1b1c      	subs	r4, r3, r4
 8009c82:	1e63      	subs	r3, r4, #1
 8009c84:	9309      	str	r3, [sp, #36]	; 0x24
 8009c86:	bf49      	itett	mi
 8009c88:	f1c4 0301 	rsbmi	r3, r4, #1
 8009c8c:	2300      	movpl	r3, #0
 8009c8e:	9306      	strmi	r3, [sp, #24]
 8009c90:	2300      	movmi	r3, #0
 8009c92:	bf54      	ite	pl
 8009c94:	9306      	strpl	r3, [sp, #24]
 8009c96:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	db3d      	blt.n	8009d1a <_dtoa_r+0x23a>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009ca4:	4453      	add	r3, sl
 8009ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca8:	2300      	movs	r3, #0
 8009caa:	930a      	str	r3, [sp, #40]	; 0x28
 8009cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cae:	2b09      	cmp	r3, #9
 8009cb0:	f200 808c 	bhi.w	8009dcc <_dtoa_r+0x2ec>
 8009cb4:	2b05      	cmp	r3, #5
 8009cb6:	bfc4      	itt	gt
 8009cb8:	3b04      	subgt	r3, #4
 8009cba:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cbe:	bfc8      	it	gt
 8009cc0:	2400      	movgt	r4, #0
 8009cc2:	f1a3 0302 	sub.w	r3, r3, #2
 8009cc6:	bfd8      	it	le
 8009cc8:	2401      	movle	r4, #1
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	f200 808a 	bhi.w	8009de4 <_dtoa_r+0x304>
 8009cd0:	e8df f003 	tbb	[pc, r3]
 8009cd4:	5b4d4f2d 	.word	0x5b4d4f2d
 8009cd8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009cdc:	441c      	add	r4, r3
 8009cde:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	bfc3      	ittte	gt
 8009ce6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009cee:	fa09 f303 	lslgt.w	r3, r9, r3
 8009cf2:	f1c3 0320 	rsble	r3, r3, #32
 8009cf6:	bfc6      	itte	gt
 8009cf8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009cfc:	4318      	orrgt	r0, r3
 8009cfe:	fa06 f003 	lslle.w	r0, r6, r3
 8009d02:	f7f6 fb6f 	bl	80003e4 <__aeabi_ui2d>
 8009d06:	2301      	movs	r3, #1
 8009d08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009d0c:	3c01      	subs	r4, #1
 8009d0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d10:	e76f      	b.n	8009bf2 <_dtoa_r+0x112>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e7b2      	b.n	8009c7c <_dtoa_r+0x19c>
 8009d16:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d18:	e7b1      	b.n	8009c7e <_dtoa_r+0x19e>
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	eba3 030a 	sub.w	r3, r3, sl
 8009d20:	9306      	str	r3, [sp, #24]
 8009d22:	f1ca 0300 	rsb	r3, sl, #0
 8009d26:	930a      	str	r3, [sp, #40]	; 0x28
 8009d28:	2300      	movs	r3, #0
 8009d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d2c:	e7be      	b.n	8009cac <_dtoa_r+0x1cc>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dc58      	bgt.n	8009dea <_dtoa_r+0x30a>
 8009d38:	f04f 0901 	mov.w	r9, #1
 8009d3c:	464b      	mov	r3, r9
 8009d3e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d42:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009d46:	2200      	movs	r2, #0
 8009d48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009d4a:	6042      	str	r2, [r0, #4]
 8009d4c:	2204      	movs	r2, #4
 8009d4e:	f102 0614 	add.w	r6, r2, #20
 8009d52:	429e      	cmp	r6, r3
 8009d54:	6841      	ldr	r1, [r0, #4]
 8009d56:	d94e      	bls.n	8009df6 <_dtoa_r+0x316>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f001 f91d 	bl	800af98 <_Balloc>
 8009d5e:	9003      	str	r0, [sp, #12]
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d14c      	bne.n	8009dfe <_dtoa_r+0x31e>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d6a:	4b17      	ldr	r3, [pc, #92]	; (8009dc8 <_dtoa_r+0x2e8>)
 8009d6c:	e6cc      	b.n	8009b08 <_dtoa_r+0x28>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e7de      	b.n	8009d30 <_dtoa_r+0x250>
 8009d72:	2300      	movs	r3, #0
 8009d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d78:	eb0a 0903 	add.w	r9, sl, r3
 8009d7c:	f109 0301 	add.w	r3, r9, #1
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	9308      	str	r3, [sp, #32]
 8009d84:	bfb8      	it	lt
 8009d86:	2301      	movlt	r3, #1
 8009d88:	e7dd      	b.n	8009d46 <_dtoa_r+0x266>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e7f2      	b.n	8009d74 <_dtoa_r+0x294>
 8009d8e:	bf00      	nop
 8009d90:	636f4361 	.word	0x636f4361
 8009d94:	3fd287a7 	.word	0x3fd287a7
 8009d98:	8b60c8b3 	.word	0x8b60c8b3
 8009d9c:	3fc68a28 	.word	0x3fc68a28
 8009da0:	509f79fb 	.word	0x509f79fb
 8009da4:	3fd34413 	.word	0x3fd34413
 8009da8:	0800c916 	.word	0x0800c916
 8009dac:	0800c92d 	.word	0x0800c92d
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	0800c912 	.word	0x0800c912
 8009db8:	0800c909 	.word	0x0800c909
 8009dbc:	0800c789 	.word	0x0800c789
 8009dc0:	3ff80000 	.word	0x3ff80000
 8009dc4:	0800ca98 	.word	0x0800ca98
 8009dc8:	0800c988 	.word	0x0800c988
 8009dcc:	2401      	movs	r4, #1
 8009dce:	2300      	movs	r3, #0
 8009dd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009dd2:	9322      	str	r3, [sp, #136]	; 0x88
 8009dd4:	f04f 39ff 	mov.w	r9, #4294967295
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2312      	movs	r3, #18
 8009ddc:	f8cd 9020 	str.w	r9, [sp, #32]
 8009de0:	9223      	str	r2, [sp, #140]	; 0x8c
 8009de2:	e7b0      	b.n	8009d46 <_dtoa_r+0x266>
 8009de4:	2301      	movs	r3, #1
 8009de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009de8:	e7f4      	b.n	8009dd4 <_dtoa_r+0x2f4>
 8009dea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009dee:	464b      	mov	r3, r9
 8009df0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009df4:	e7a7      	b.n	8009d46 <_dtoa_r+0x266>
 8009df6:	3101      	adds	r1, #1
 8009df8:	6041      	str	r1, [r0, #4]
 8009dfa:	0052      	lsls	r2, r2, #1
 8009dfc:	e7a7      	b.n	8009d4e <_dtoa_r+0x26e>
 8009dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e00:	9a03      	ldr	r2, [sp, #12]
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	2b0e      	cmp	r3, #14
 8009e08:	f200 80a8 	bhi.w	8009f5c <_dtoa_r+0x47c>
 8009e0c:	2c00      	cmp	r4, #0
 8009e0e:	f000 80a5 	beq.w	8009f5c <_dtoa_r+0x47c>
 8009e12:	f1ba 0f00 	cmp.w	sl, #0
 8009e16:	dd34      	ble.n	8009e82 <_dtoa_r+0x3a2>
 8009e18:	4a9a      	ldr	r2, [pc, #616]	; (800a084 <_dtoa_r+0x5a4>)
 8009e1a:	f00a 030f 	and.w	r3, sl, #15
 8009e1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e22:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e2e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009e32:	d016      	beq.n	8009e62 <_dtoa_r+0x382>
 8009e34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e38:	4b93      	ldr	r3, [pc, #588]	; (800a088 <_dtoa_r+0x5a8>)
 8009e3a:	2703      	movs	r7, #3
 8009e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e40:	f7f6 fc74 	bl	800072c <__aeabi_ddiv>
 8009e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e48:	f004 040f 	and.w	r4, r4, #15
 8009e4c:	4e8e      	ldr	r6, [pc, #568]	; (800a088 <_dtoa_r+0x5a8>)
 8009e4e:	b954      	cbnz	r4, 8009e66 <_dtoa_r+0x386>
 8009e50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e58:	f7f6 fc68 	bl	800072c <__aeabi_ddiv>
 8009e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e60:	e029      	b.n	8009eb6 <_dtoa_r+0x3d6>
 8009e62:	2702      	movs	r7, #2
 8009e64:	e7f2      	b.n	8009e4c <_dtoa_r+0x36c>
 8009e66:	07e1      	lsls	r1, r4, #31
 8009e68:	d508      	bpl.n	8009e7c <_dtoa_r+0x39c>
 8009e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e72:	f7f6 fb31 	bl	80004d8 <__aeabi_dmul>
 8009e76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e7a:	3701      	adds	r7, #1
 8009e7c:	1064      	asrs	r4, r4, #1
 8009e7e:	3608      	adds	r6, #8
 8009e80:	e7e5      	b.n	8009e4e <_dtoa_r+0x36e>
 8009e82:	f000 80a5 	beq.w	8009fd0 <_dtoa_r+0x4f0>
 8009e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e8a:	f1ca 0400 	rsb	r4, sl, #0
 8009e8e:	4b7d      	ldr	r3, [pc, #500]	; (800a084 <_dtoa_r+0x5a4>)
 8009e90:	f004 020f 	and.w	r2, r4, #15
 8009e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 fb1c 	bl	80004d8 <__aeabi_dmul>
 8009ea0:	2702      	movs	r7, #2
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ea8:	4e77      	ldr	r6, [pc, #476]	; (800a088 <_dtoa_r+0x5a8>)
 8009eaa:	1124      	asrs	r4, r4, #4
 8009eac:	2c00      	cmp	r4, #0
 8009eae:	f040 8084 	bne.w	8009fba <_dtoa_r+0x4da>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1d2      	bne.n	8009e5c <_dtoa_r+0x37c>
 8009eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 808b 	beq.w	8009fd4 <_dtoa_r+0x4f4>
 8009ebe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009ec2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ec6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4b6f      	ldr	r3, [pc, #444]	; (800a08c <_dtoa_r+0x5ac>)
 8009ece:	f7f6 fd75 	bl	80009bc <__aeabi_dcmplt>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d07e      	beq.n	8009fd4 <_dtoa_r+0x4f4>
 8009ed6:	9b08      	ldr	r3, [sp, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d07b      	beq.n	8009fd4 <_dtoa_r+0x4f4>
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	dd38      	ble.n	8009f54 <_dtoa_r+0x474>
 8009ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4b69      	ldr	r3, [pc, #420]	; (800a090 <_dtoa_r+0x5b0>)
 8009eea:	f7f6 faf5 	bl	80004d8 <__aeabi_dmul>
 8009eee:	464c      	mov	r4, r9
 8009ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ef4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009ef8:	3701      	adds	r7, #1
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7f6 fa82 	bl	8000404 <__aeabi_i2d>
 8009f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f04:	f7f6 fae8 	bl	80004d8 <__aeabi_dmul>
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4b62      	ldr	r3, [pc, #392]	; (800a094 <_dtoa_r+0x5b4>)
 8009f0c:	f7f6 f92e 	bl	800016c <__adddf3>
 8009f10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f18:	9611      	str	r6, [sp, #68]	; 0x44
 8009f1a:	2c00      	cmp	r4, #0
 8009f1c:	d15d      	bne.n	8009fda <_dtoa_r+0x4fa>
 8009f1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f22:	2200      	movs	r2, #0
 8009f24:	4b5c      	ldr	r3, [pc, #368]	; (800a098 <_dtoa_r+0x5b8>)
 8009f26:	f7f6 f91f 	bl	8000168 <__aeabi_dsub>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f32:	4633      	mov	r3, r6
 8009f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f36:	f7f6 fd5f 	bl	80009f8 <__aeabi_dcmpgt>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	f040 829c 	bne.w	800a478 <_dtoa_r+0x998>
 8009f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f4a:	f7f6 fd37 	bl	80009bc <__aeabi_dcmplt>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f040 8290 	bne.w	800a474 <_dtoa_r+0x994>
 8009f54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009f58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f2c0 8152 	blt.w	800a208 <_dtoa_r+0x728>
 8009f64:	f1ba 0f0e 	cmp.w	sl, #14
 8009f68:	f300 814e 	bgt.w	800a208 <_dtoa_r+0x728>
 8009f6c:	4b45      	ldr	r3, [pc, #276]	; (800a084 <_dtoa_r+0x5a4>)
 8009f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f280 80db 	bge.w	800a138 <_dtoa_r+0x658>
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f300 80d7 	bgt.w	800a138 <_dtoa_r+0x658>
 8009f8a:	f040 8272 	bne.w	800a472 <_dtoa_r+0x992>
 8009f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f92:	2200      	movs	r2, #0
 8009f94:	4b40      	ldr	r3, [pc, #256]	; (800a098 <_dtoa_r+0x5b8>)
 8009f96:	f7f6 fa9f 	bl	80004d8 <__aeabi_dmul>
 8009f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f9e:	f7f6 fd21 	bl	80009e4 <__aeabi_dcmpge>
 8009fa2:	9c08      	ldr	r4, [sp, #32]
 8009fa4:	4626      	mov	r6, r4
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f040 8248 	bne.w	800a43c <_dtoa_r+0x95c>
 8009fac:	2331      	movs	r3, #49	; 0x31
 8009fae:	9f03      	ldr	r7, [sp, #12]
 8009fb0:	f10a 0a01 	add.w	sl, sl, #1
 8009fb4:	f807 3b01 	strb.w	r3, [r7], #1
 8009fb8:	e244      	b.n	800a444 <_dtoa_r+0x964>
 8009fba:	07e2      	lsls	r2, r4, #31
 8009fbc:	d505      	bpl.n	8009fca <_dtoa_r+0x4ea>
 8009fbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fc2:	f7f6 fa89 	bl	80004d8 <__aeabi_dmul>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	3701      	adds	r7, #1
 8009fca:	1064      	asrs	r4, r4, #1
 8009fcc:	3608      	adds	r6, #8
 8009fce:	e76d      	b.n	8009eac <_dtoa_r+0x3cc>
 8009fd0:	2702      	movs	r7, #2
 8009fd2:	e770      	b.n	8009eb6 <_dtoa_r+0x3d6>
 8009fd4:	46d0      	mov	r8, sl
 8009fd6:	9c08      	ldr	r4, [sp, #32]
 8009fd8:	e78f      	b.n	8009efa <_dtoa_r+0x41a>
 8009fda:	9903      	ldr	r1, [sp, #12]
 8009fdc:	4b29      	ldr	r3, [pc, #164]	; (800a084 <_dtoa_r+0x5a4>)
 8009fde:	4421      	add	r1, r4
 8009fe0:	9112      	str	r1, [sp, #72]	; 0x48
 8009fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fe8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009fec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ff0:	2900      	cmp	r1, #0
 8009ff2:	d055      	beq.n	800a0a0 <_dtoa_r+0x5c0>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	4929      	ldr	r1, [pc, #164]	; (800a09c <_dtoa_r+0x5bc>)
 8009ff8:	f7f6 fb98 	bl	800072c <__aeabi_ddiv>
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	4632      	mov	r2, r6
 800a000:	f7f6 f8b2 	bl	8000168 <__aeabi_dsub>
 800a004:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a008:	9f03      	ldr	r7, [sp, #12]
 800a00a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a00e:	f7f6 fd13 	bl	8000a38 <__aeabi_d2iz>
 800a012:	4604      	mov	r4, r0
 800a014:	f7f6 f9f6 	bl	8000404 <__aeabi_i2d>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a020:	f7f6 f8a2 	bl	8000168 <__aeabi_dsub>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	3430      	adds	r4, #48	; 0x30
 800a02a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a02e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a032:	f807 4b01 	strb.w	r4, [r7], #1
 800a036:	f7f6 fcc1 	bl	80009bc <__aeabi_dcmplt>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d174      	bne.n	800a128 <_dtoa_r+0x648>
 800a03e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a042:	2000      	movs	r0, #0
 800a044:	4911      	ldr	r1, [pc, #68]	; (800a08c <_dtoa_r+0x5ac>)
 800a046:	f7f6 f88f 	bl	8000168 <__aeabi_dsub>
 800a04a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a04e:	f7f6 fcb5 	bl	80009bc <__aeabi_dcmplt>
 800a052:	2800      	cmp	r0, #0
 800a054:	f040 80b7 	bne.w	800a1c6 <_dtoa_r+0x6e6>
 800a058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a05a:	429f      	cmp	r7, r3
 800a05c:	f43f af7a 	beq.w	8009f54 <_dtoa_r+0x474>
 800a060:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a064:	2200      	movs	r2, #0
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <_dtoa_r+0x5b0>)
 800a068:	f7f6 fa36 	bl	80004d8 <__aeabi_dmul>
 800a06c:	2200      	movs	r2, #0
 800a06e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a076:	4b06      	ldr	r3, [pc, #24]	; (800a090 <_dtoa_r+0x5b0>)
 800a078:	f7f6 fa2e 	bl	80004d8 <__aeabi_dmul>
 800a07c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a080:	e7c3      	b.n	800a00a <_dtoa_r+0x52a>
 800a082:	bf00      	nop
 800a084:	0800ca98 	.word	0x0800ca98
 800a088:	0800ca70 	.word	0x0800ca70
 800a08c:	3ff00000 	.word	0x3ff00000
 800a090:	40240000 	.word	0x40240000
 800a094:	401c0000 	.word	0x401c0000
 800a098:	40140000 	.word	0x40140000
 800a09c:	3fe00000 	.word	0x3fe00000
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fa18 	bl	80004d8 <__aeabi_dmul>
 800a0a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0ae:	9c03      	ldr	r4, [sp, #12]
 800a0b0:	9314      	str	r3, [sp, #80]	; 0x50
 800a0b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0b6:	f7f6 fcbf 	bl	8000a38 <__aeabi_d2iz>
 800a0ba:	9015      	str	r0, [sp, #84]	; 0x54
 800a0bc:	f7f6 f9a2 	bl	8000404 <__aeabi_i2d>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0c8:	f7f6 f84e 	bl	8000168 <__aeabi_dsub>
 800a0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	3330      	adds	r3, #48	; 0x30
 800a0d2:	f804 3b01 	strb.w	r3, [r4], #1
 800a0d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0d8:	460f      	mov	r7, r1
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	f04f 0200 	mov.w	r2, #0
 800a0e0:	d124      	bne.n	800a12c <_dtoa_r+0x64c>
 800a0e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0e6:	4bb0      	ldr	r3, [pc, #704]	; (800a3a8 <_dtoa_r+0x8c8>)
 800a0e8:	f7f6 f840 	bl	800016c <__adddf3>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 fc80 	bl	80009f8 <__aeabi_dcmpgt>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d163      	bne.n	800a1c4 <_dtoa_r+0x6e4>
 800a0fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a100:	2000      	movs	r0, #0
 800a102:	49a9      	ldr	r1, [pc, #676]	; (800a3a8 <_dtoa_r+0x8c8>)
 800a104:	f7f6 f830 	bl	8000168 <__aeabi_dsub>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4630      	mov	r0, r6
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 fc54 	bl	80009bc <__aeabi_dcmplt>
 800a114:	2800      	cmp	r0, #0
 800a116:	f43f af1d 	beq.w	8009f54 <_dtoa_r+0x474>
 800a11a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a11c:	1e7b      	subs	r3, r7, #1
 800a11e:	9314      	str	r3, [sp, #80]	; 0x50
 800a120:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a124:	2b30      	cmp	r3, #48	; 0x30
 800a126:	d0f8      	beq.n	800a11a <_dtoa_r+0x63a>
 800a128:	46c2      	mov	sl, r8
 800a12a:	e03b      	b.n	800a1a4 <_dtoa_r+0x6c4>
 800a12c:	4b9f      	ldr	r3, [pc, #636]	; (800a3ac <_dtoa_r+0x8cc>)
 800a12e:	f7f6 f9d3 	bl	80004d8 <__aeabi_dmul>
 800a132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a136:	e7bc      	b.n	800a0b2 <_dtoa_r+0x5d2>
 800a138:	9f03      	ldr	r7, [sp, #12]
 800a13a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a13e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a142:	4640      	mov	r0, r8
 800a144:	4649      	mov	r1, r9
 800a146:	f7f6 faf1 	bl	800072c <__aeabi_ddiv>
 800a14a:	f7f6 fc75 	bl	8000a38 <__aeabi_d2iz>
 800a14e:	4604      	mov	r4, r0
 800a150:	f7f6 f958 	bl	8000404 <__aeabi_i2d>
 800a154:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a158:	f7f6 f9be 	bl	80004d8 <__aeabi_dmul>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4640      	mov	r0, r8
 800a162:	4649      	mov	r1, r9
 800a164:	f7f6 f800 	bl	8000168 <__aeabi_dsub>
 800a168:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a16c:	f807 6b01 	strb.w	r6, [r7], #1
 800a170:	9e03      	ldr	r6, [sp, #12]
 800a172:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a176:	1bbe      	subs	r6, r7, r6
 800a178:	45b4      	cmp	ip, r6
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	d136      	bne.n	800a1ee <_dtoa_r+0x70e>
 800a180:	f7f5 fff4 	bl	800016c <__adddf3>
 800a184:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a188:	4680      	mov	r8, r0
 800a18a:	4689      	mov	r9, r1
 800a18c:	f7f6 fc34 	bl	80009f8 <__aeabi_dcmpgt>
 800a190:	bb58      	cbnz	r0, 800a1ea <_dtoa_r+0x70a>
 800a192:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a196:	4640      	mov	r0, r8
 800a198:	4649      	mov	r1, r9
 800a19a:	f7f6 fc05 	bl	80009a8 <__aeabi_dcmpeq>
 800a19e:	b108      	cbz	r0, 800a1a4 <_dtoa_r+0x6c4>
 800a1a0:	07e1      	lsls	r1, r4, #31
 800a1a2:	d422      	bmi.n	800a1ea <_dtoa_r+0x70a>
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	4659      	mov	r1, fp
 800a1a8:	f000 ff36 	bl	800b018 <_Bfree>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	703b      	strb	r3, [r7, #0]
 800a1b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1b2:	f10a 0001 	add.w	r0, sl, #1
 800a1b6:	6018      	str	r0, [r3, #0]
 800a1b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f43f acde 	beq.w	8009b7c <_dtoa_r+0x9c>
 800a1c0:	601f      	str	r7, [r3, #0]
 800a1c2:	e4db      	b.n	8009b7c <_dtoa_r+0x9c>
 800a1c4:	4627      	mov	r7, r4
 800a1c6:	463b      	mov	r3, r7
 800a1c8:	461f      	mov	r7, r3
 800a1ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1ce:	2a39      	cmp	r2, #57	; 0x39
 800a1d0:	d107      	bne.n	800a1e2 <_dtoa_r+0x702>
 800a1d2:	9a03      	ldr	r2, [sp, #12]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d1f7      	bne.n	800a1c8 <_dtoa_r+0x6e8>
 800a1d8:	2230      	movs	r2, #48	; 0x30
 800a1da:	9903      	ldr	r1, [sp, #12]
 800a1dc:	f108 0801 	add.w	r8, r8, #1
 800a1e0:	700a      	strb	r2, [r1, #0]
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	3201      	adds	r2, #1
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	e79e      	b.n	800a128 <_dtoa_r+0x648>
 800a1ea:	46d0      	mov	r8, sl
 800a1ec:	e7eb      	b.n	800a1c6 <_dtoa_r+0x6e6>
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4b6e      	ldr	r3, [pc, #440]	; (800a3ac <_dtoa_r+0x8cc>)
 800a1f2:	f7f6 f971 	bl	80004d8 <__aeabi_dmul>
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4680      	mov	r8, r0
 800a1fc:	4689      	mov	r9, r1
 800a1fe:	f7f6 fbd3 	bl	80009a8 <__aeabi_dcmpeq>
 800a202:	2800      	cmp	r0, #0
 800a204:	d09b      	beq.n	800a13e <_dtoa_r+0x65e>
 800a206:	e7cd      	b.n	800a1a4 <_dtoa_r+0x6c4>
 800a208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	f000 80d0 	beq.w	800a3b0 <_dtoa_r+0x8d0>
 800a210:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a212:	2a01      	cmp	r2, #1
 800a214:	f300 80ae 	bgt.w	800a374 <_dtoa_r+0x894>
 800a218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	f000 80a6 	beq.w	800a36c <_dtoa_r+0x88c>
 800a220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a226:	9f06      	ldr	r7, [sp, #24]
 800a228:	9a06      	ldr	r2, [sp, #24]
 800a22a:	2101      	movs	r1, #1
 800a22c:	441a      	add	r2, r3
 800a22e:	9206      	str	r2, [sp, #24]
 800a230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a232:	4628      	mov	r0, r5
 800a234:	441a      	add	r2, r3
 800a236:	9209      	str	r2, [sp, #36]	; 0x24
 800a238:	f000 ffee 	bl	800b218 <__i2b>
 800a23c:	4606      	mov	r6, r0
 800a23e:	2f00      	cmp	r7, #0
 800a240:	dd0c      	ble.n	800a25c <_dtoa_r+0x77c>
 800a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd09      	ble.n	800a25c <_dtoa_r+0x77c>
 800a248:	42bb      	cmp	r3, r7
 800a24a:	bfa8      	it	ge
 800a24c:	463b      	movge	r3, r7
 800a24e:	9a06      	ldr	r2, [sp, #24]
 800a250:	1aff      	subs	r7, r7, r3
 800a252:	1ad2      	subs	r2, r2, r3
 800a254:	9206      	str	r2, [sp, #24]
 800a256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	9309      	str	r3, [sp, #36]	; 0x24
 800a25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25e:	b1f3      	cbz	r3, 800a29e <_dtoa_r+0x7be>
 800a260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 80a8 	beq.w	800a3b8 <_dtoa_r+0x8d8>
 800a268:	2c00      	cmp	r4, #0
 800a26a:	dd10      	ble.n	800a28e <_dtoa_r+0x7ae>
 800a26c:	4631      	mov	r1, r6
 800a26e:	4622      	mov	r2, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f001 f88f 	bl	800b394 <__pow5mult>
 800a276:	465a      	mov	r2, fp
 800a278:	4601      	mov	r1, r0
 800a27a:	4606      	mov	r6, r0
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 ffe1 	bl	800b244 <__multiply>
 800a282:	4680      	mov	r8, r0
 800a284:	4659      	mov	r1, fp
 800a286:	4628      	mov	r0, r5
 800a288:	f000 fec6 	bl	800b018 <_Bfree>
 800a28c:	46c3      	mov	fp, r8
 800a28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a290:	1b1a      	subs	r2, r3, r4
 800a292:	d004      	beq.n	800a29e <_dtoa_r+0x7be>
 800a294:	4659      	mov	r1, fp
 800a296:	4628      	mov	r0, r5
 800a298:	f001 f87c 	bl	800b394 <__pow5mult>
 800a29c:	4683      	mov	fp, r0
 800a29e:	2101      	movs	r1, #1
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 ffb9 	bl	800b218 <__i2b>
 800a2a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f340 8086 	ble.w	800a3bc <_dtoa_r+0x8dc>
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f001 f86d 	bl	800b394 <__pow5mult>
 800a2ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2bc:	4604      	mov	r4, r0
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	dd7f      	ble.n	800a3c2 <_dtoa_r+0x8e2>
 800a2c2:	f04f 0800 	mov.w	r8, #0
 800a2c6:	6923      	ldr	r3, [r4, #16]
 800a2c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2cc:	6918      	ldr	r0, [r3, #16]
 800a2ce:	f000 ff55 	bl	800b17c <__hi0bits>
 800a2d2:	f1c0 0020 	rsb	r0, r0, #32
 800a2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d8:	4418      	add	r0, r3
 800a2da:	f010 001f 	ands.w	r0, r0, #31
 800a2de:	f000 8092 	beq.w	800a406 <_dtoa_r+0x926>
 800a2e2:	f1c0 0320 	rsb	r3, r0, #32
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	f340 808a 	ble.w	800a400 <_dtoa_r+0x920>
 800a2ec:	f1c0 001c 	rsb	r0, r0, #28
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	4407      	add	r7, r0
 800a2f4:	4403      	add	r3, r0
 800a2f6:	9306      	str	r3, [sp, #24]
 800a2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fa:	4403      	add	r3, r0
 800a2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fe:	9b06      	ldr	r3, [sp, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	dd05      	ble.n	800a310 <_dtoa_r+0x830>
 800a304:	4659      	mov	r1, fp
 800a306:	461a      	mov	r2, r3
 800a308:	4628      	mov	r0, r5
 800a30a:	f001 f89d 	bl	800b448 <__lshift>
 800a30e:	4683      	mov	fp, r0
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	dd05      	ble.n	800a322 <_dtoa_r+0x842>
 800a316:	4621      	mov	r1, r4
 800a318:	461a      	mov	r2, r3
 800a31a:	4628      	mov	r0, r5
 800a31c:	f001 f894 	bl	800b448 <__lshift>
 800a320:	4604      	mov	r4, r0
 800a322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d070      	beq.n	800a40a <_dtoa_r+0x92a>
 800a328:	4621      	mov	r1, r4
 800a32a:	4658      	mov	r0, fp
 800a32c:	f001 f8fc 	bl	800b528 <__mcmp>
 800a330:	2800      	cmp	r0, #0
 800a332:	da6a      	bge.n	800a40a <_dtoa_r+0x92a>
 800a334:	2300      	movs	r3, #0
 800a336:	4659      	mov	r1, fp
 800a338:	220a      	movs	r2, #10
 800a33a:	4628      	mov	r0, r5
 800a33c:	f000 fe8e 	bl	800b05c <__multadd>
 800a340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a342:	4683      	mov	fp, r0
 800a344:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 8194 	beq.w	800a676 <_dtoa_r+0xb96>
 800a34e:	4631      	mov	r1, r6
 800a350:	2300      	movs	r3, #0
 800a352:	220a      	movs	r2, #10
 800a354:	4628      	mov	r0, r5
 800a356:	f000 fe81 	bl	800b05c <__multadd>
 800a35a:	f1b9 0f00 	cmp.w	r9, #0
 800a35e:	4606      	mov	r6, r0
 800a360:	f300 8093 	bgt.w	800a48a <_dtoa_r+0x9aa>
 800a364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a366:	2b02      	cmp	r3, #2
 800a368:	dc57      	bgt.n	800a41a <_dtoa_r+0x93a>
 800a36a:	e08e      	b.n	800a48a <_dtoa_r+0x9aa>
 800a36c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a36e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a372:	e757      	b.n	800a224 <_dtoa_r+0x744>
 800a374:	9b08      	ldr	r3, [sp, #32]
 800a376:	1e5c      	subs	r4, r3, #1
 800a378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37a:	42a3      	cmp	r3, r4
 800a37c:	bfb7      	itett	lt
 800a37e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a380:	1b1c      	subge	r4, r3, r4
 800a382:	1ae2      	sublt	r2, r4, r3
 800a384:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a386:	bfbe      	ittt	lt
 800a388:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a38a:	189b      	addlt	r3, r3, r2
 800a38c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a38e:	9b08      	ldr	r3, [sp, #32]
 800a390:	bfb8      	it	lt
 800a392:	2400      	movlt	r4, #0
 800a394:	2b00      	cmp	r3, #0
 800a396:	bfbb      	ittet	lt
 800a398:	9b06      	ldrlt	r3, [sp, #24]
 800a39a:	9a08      	ldrlt	r2, [sp, #32]
 800a39c:	9f06      	ldrge	r7, [sp, #24]
 800a39e:	1a9f      	sublt	r7, r3, r2
 800a3a0:	bfac      	ite	ge
 800a3a2:	9b08      	ldrge	r3, [sp, #32]
 800a3a4:	2300      	movlt	r3, #0
 800a3a6:	e73f      	b.n	800a228 <_dtoa_r+0x748>
 800a3a8:	3fe00000 	.word	0x3fe00000
 800a3ac:	40240000 	.word	0x40240000
 800a3b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3b2:	9f06      	ldr	r7, [sp, #24]
 800a3b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a3b6:	e742      	b.n	800a23e <_dtoa_r+0x75e>
 800a3b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ba:	e76b      	b.n	800a294 <_dtoa_r+0x7b4>
 800a3bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	dc19      	bgt.n	800a3f6 <_dtoa_r+0x916>
 800a3c2:	9b04      	ldr	r3, [sp, #16]
 800a3c4:	b9bb      	cbnz	r3, 800a3f6 <_dtoa_r+0x916>
 800a3c6:	9b05      	ldr	r3, [sp, #20]
 800a3c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3cc:	b99b      	cbnz	r3, 800a3f6 <_dtoa_r+0x916>
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3d4:	0d1b      	lsrs	r3, r3, #20
 800a3d6:	051b      	lsls	r3, r3, #20
 800a3d8:	b183      	cbz	r3, 800a3fc <_dtoa_r+0x91c>
 800a3da:	f04f 0801 	mov.w	r8, #1
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	9306      	str	r3, [sp, #24]
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f47f af6a 	bne.w	800a2c6 <_dtoa_r+0x7e6>
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e76f      	b.n	800a2d6 <_dtoa_r+0x7f6>
 800a3f6:	f04f 0800 	mov.w	r8, #0
 800a3fa:	e7f6      	b.n	800a3ea <_dtoa_r+0x90a>
 800a3fc:	4698      	mov	r8, r3
 800a3fe:	e7f4      	b.n	800a3ea <_dtoa_r+0x90a>
 800a400:	f43f af7d 	beq.w	800a2fe <_dtoa_r+0x81e>
 800a404:	4618      	mov	r0, r3
 800a406:	301c      	adds	r0, #28
 800a408:	e772      	b.n	800a2f0 <_dtoa_r+0x810>
 800a40a:	9b08      	ldr	r3, [sp, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc36      	bgt.n	800a47e <_dtoa_r+0x99e>
 800a410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a412:	2b02      	cmp	r3, #2
 800a414:	dd33      	ble.n	800a47e <_dtoa_r+0x99e>
 800a416:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a41a:	f1b9 0f00 	cmp.w	r9, #0
 800a41e:	d10d      	bne.n	800a43c <_dtoa_r+0x95c>
 800a420:	4621      	mov	r1, r4
 800a422:	464b      	mov	r3, r9
 800a424:	2205      	movs	r2, #5
 800a426:	4628      	mov	r0, r5
 800a428:	f000 fe18 	bl	800b05c <__multadd>
 800a42c:	4601      	mov	r1, r0
 800a42e:	4604      	mov	r4, r0
 800a430:	4658      	mov	r0, fp
 800a432:	f001 f879 	bl	800b528 <__mcmp>
 800a436:	2800      	cmp	r0, #0
 800a438:	f73f adb8 	bgt.w	8009fac <_dtoa_r+0x4cc>
 800a43c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a43e:	9f03      	ldr	r7, [sp, #12]
 800a440:	ea6f 0a03 	mvn.w	sl, r3
 800a444:	f04f 0800 	mov.w	r8, #0
 800a448:	4621      	mov	r1, r4
 800a44a:	4628      	mov	r0, r5
 800a44c:	f000 fde4 	bl	800b018 <_Bfree>
 800a450:	2e00      	cmp	r6, #0
 800a452:	f43f aea7 	beq.w	800a1a4 <_dtoa_r+0x6c4>
 800a456:	f1b8 0f00 	cmp.w	r8, #0
 800a45a:	d005      	beq.n	800a468 <_dtoa_r+0x988>
 800a45c:	45b0      	cmp	r8, r6
 800a45e:	d003      	beq.n	800a468 <_dtoa_r+0x988>
 800a460:	4641      	mov	r1, r8
 800a462:	4628      	mov	r0, r5
 800a464:	f000 fdd8 	bl	800b018 <_Bfree>
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 fdd4 	bl	800b018 <_Bfree>
 800a470:	e698      	b.n	800a1a4 <_dtoa_r+0x6c4>
 800a472:	2400      	movs	r4, #0
 800a474:	4626      	mov	r6, r4
 800a476:	e7e1      	b.n	800a43c <_dtoa_r+0x95c>
 800a478:	46c2      	mov	sl, r8
 800a47a:	4626      	mov	r6, r4
 800a47c:	e596      	b.n	8009fac <_dtoa_r+0x4cc>
 800a47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a480:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 80fd 	beq.w	800a684 <_dtoa_r+0xba4>
 800a48a:	2f00      	cmp	r7, #0
 800a48c:	dd05      	ble.n	800a49a <_dtoa_r+0x9ba>
 800a48e:	4631      	mov	r1, r6
 800a490:	463a      	mov	r2, r7
 800a492:	4628      	mov	r0, r5
 800a494:	f000 ffd8 	bl	800b448 <__lshift>
 800a498:	4606      	mov	r6, r0
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	d05c      	beq.n	800a55a <_dtoa_r+0xa7a>
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	6871      	ldr	r1, [r6, #4]
 800a4a4:	f000 fd78 	bl	800af98 <_Balloc>
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	b928      	cbnz	r0, 800a4b8 <_dtoa_r+0x9d8>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4b2:	4b7f      	ldr	r3, [pc, #508]	; (800a6b0 <_dtoa_r+0xbd0>)
 800a4b4:	f7ff bb28 	b.w	8009b08 <_dtoa_r+0x28>
 800a4b8:	6932      	ldr	r2, [r6, #16]
 800a4ba:	f106 010c 	add.w	r1, r6, #12
 800a4be:	3202      	adds	r2, #2
 800a4c0:	0092      	lsls	r2, r2, #2
 800a4c2:	300c      	adds	r0, #12
 800a4c4:	f7fd fbd5 	bl	8007c72 <memcpy>
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f000 ffbb 	bl	800b448 <__lshift>
 800a4d2:	46b0      	mov	r8, r6
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	9308      	str	r3, [sp, #32]
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	444b      	add	r3, r9
 800a4e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ea:	9b08      	ldr	r3, [sp, #32]
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	4658      	mov	r0, fp
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	f7ff fa66 	bl	80099c4 <quorem>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	3330      	adds	r3, #48	; 0x30
 800a4fe:	9006      	str	r0, [sp, #24]
 800a500:	4658      	mov	r0, fp
 800a502:	930b      	str	r3, [sp, #44]	; 0x2c
 800a504:	f001 f810 	bl	800b528 <__mcmp>
 800a508:	4632      	mov	r2, r6
 800a50a:	4681      	mov	r9, r0
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f001 f826 	bl	800b560 <__mdiff>
 800a514:	68c2      	ldr	r2, [r0, #12]
 800a516:	4607      	mov	r7, r0
 800a518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51a:	bb02      	cbnz	r2, 800a55e <_dtoa_r+0xa7e>
 800a51c:	4601      	mov	r1, r0
 800a51e:	4658      	mov	r0, fp
 800a520:	f001 f802 	bl	800b528 <__mcmp>
 800a524:	4602      	mov	r2, r0
 800a526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a528:	4639      	mov	r1, r7
 800a52a:	4628      	mov	r0, r5
 800a52c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a530:	f000 fd72 	bl	800b018 <_Bfree>
 800a534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a538:	9f08      	ldr	r7, [sp, #32]
 800a53a:	ea43 0102 	orr.w	r1, r3, r2
 800a53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a540:	430b      	orrs	r3, r1
 800a542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a544:	d10d      	bne.n	800a562 <_dtoa_r+0xa82>
 800a546:	2b39      	cmp	r3, #57	; 0x39
 800a548:	d029      	beq.n	800a59e <_dtoa_r+0xabe>
 800a54a:	f1b9 0f00 	cmp.w	r9, #0
 800a54e:	dd01      	ble.n	800a554 <_dtoa_r+0xa74>
 800a550:	9b06      	ldr	r3, [sp, #24]
 800a552:	3331      	adds	r3, #49	; 0x31
 800a554:	9a04      	ldr	r2, [sp, #16]
 800a556:	7013      	strb	r3, [r2, #0]
 800a558:	e776      	b.n	800a448 <_dtoa_r+0x968>
 800a55a:	4630      	mov	r0, r6
 800a55c:	e7b9      	b.n	800a4d2 <_dtoa_r+0x9f2>
 800a55e:	2201      	movs	r2, #1
 800a560:	e7e2      	b.n	800a528 <_dtoa_r+0xa48>
 800a562:	f1b9 0f00 	cmp.w	r9, #0
 800a566:	db06      	blt.n	800a576 <_dtoa_r+0xa96>
 800a568:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a56a:	ea41 0909 	orr.w	r9, r1, r9
 800a56e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a570:	ea59 0101 	orrs.w	r1, r9, r1
 800a574:	d120      	bne.n	800a5b8 <_dtoa_r+0xad8>
 800a576:	2a00      	cmp	r2, #0
 800a578:	ddec      	ble.n	800a554 <_dtoa_r+0xa74>
 800a57a:	4659      	mov	r1, fp
 800a57c:	2201      	movs	r2, #1
 800a57e:	4628      	mov	r0, r5
 800a580:	9308      	str	r3, [sp, #32]
 800a582:	f000 ff61 	bl	800b448 <__lshift>
 800a586:	4621      	mov	r1, r4
 800a588:	4683      	mov	fp, r0
 800a58a:	f000 ffcd 	bl	800b528 <__mcmp>
 800a58e:	2800      	cmp	r0, #0
 800a590:	9b08      	ldr	r3, [sp, #32]
 800a592:	dc02      	bgt.n	800a59a <_dtoa_r+0xaba>
 800a594:	d1de      	bne.n	800a554 <_dtoa_r+0xa74>
 800a596:	07da      	lsls	r2, r3, #31
 800a598:	d5dc      	bpl.n	800a554 <_dtoa_r+0xa74>
 800a59a:	2b39      	cmp	r3, #57	; 0x39
 800a59c:	d1d8      	bne.n	800a550 <_dtoa_r+0xa70>
 800a59e:	2339      	movs	r3, #57	; 0x39
 800a5a0:	9a04      	ldr	r2, [sp, #16]
 800a5a2:	7013      	strb	r3, [r2, #0]
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	461f      	mov	r7, r3
 800a5a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	2a39      	cmp	r2, #57	; 0x39
 800a5b0:	d050      	beq.n	800a654 <_dtoa_r+0xb74>
 800a5b2:	3201      	adds	r2, #1
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	e747      	b.n	800a448 <_dtoa_r+0x968>
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	dd03      	ble.n	800a5c4 <_dtoa_r+0xae4>
 800a5bc:	2b39      	cmp	r3, #57	; 0x39
 800a5be:	d0ee      	beq.n	800a59e <_dtoa_r+0xabe>
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	e7c7      	b.n	800a554 <_dtoa_r+0xa74>
 800a5c4:	9a08      	ldr	r2, [sp, #32]
 800a5c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5cc:	428a      	cmp	r2, r1
 800a5ce:	d02a      	beq.n	800a626 <_dtoa_r+0xb46>
 800a5d0:	4659      	mov	r1, fp
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	220a      	movs	r2, #10
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 fd40 	bl	800b05c <__multadd>
 800a5dc:	45b0      	cmp	r8, r6
 800a5de:	4683      	mov	fp, r0
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	f04f 020a 	mov.w	r2, #10
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	d107      	bne.n	800a5fe <_dtoa_r+0xb1e>
 800a5ee:	f000 fd35 	bl	800b05c <__multadd>
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	9b08      	ldr	r3, [sp, #32]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	9308      	str	r3, [sp, #32]
 800a5fc:	e775      	b.n	800a4ea <_dtoa_r+0xa0a>
 800a5fe:	f000 fd2d 	bl	800b05c <__multadd>
 800a602:	4631      	mov	r1, r6
 800a604:	4680      	mov	r8, r0
 800a606:	2300      	movs	r3, #0
 800a608:	220a      	movs	r2, #10
 800a60a:	4628      	mov	r0, r5
 800a60c:	f000 fd26 	bl	800b05c <__multadd>
 800a610:	4606      	mov	r6, r0
 800a612:	e7f0      	b.n	800a5f6 <_dtoa_r+0xb16>
 800a614:	f1b9 0f00 	cmp.w	r9, #0
 800a618:	bfcc      	ite	gt
 800a61a:	464f      	movgt	r7, r9
 800a61c:	2701      	movle	r7, #1
 800a61e:	f04f 0800 	mov.w	r8, #0
 800a622:	9a03      	ldr	r2, [sp, #12]
 800a624:	4417      	add	r7, r2
 800a626:	4659      	mov	r1, fp
 800a628:	2201      	movs	r2, #1
 800a62a:	4628      	mov	r0, r5
 800a62c:	9308      	str	r3, [sp, #32]
 800a62e:	f000 ff0b 	bl	800b448 <__lshift>
 800a632:	4621      	mov	r1, r4
 800a634:	4683      	mov	fp, r0
 800a636:	f000 ff77 	bl	800b528 <__mcmp>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	dcb2      	bgt.n	800a5a4 <_dtoa_r+0xac4>
 800a63e:	d102      	bne.n	800a646 <_dtoa_r+0xb66>
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	07db      	lsls	r3, r3, #31
 800a644:	d4ae      	bmi.n	800a5a4 <_dtoa_r+0xac4>
 800a646:	463b      	mov	r3, r7
 800a648:	461f      	mov	r7, r3
 800a64a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a64e:	2a30      	cmp	r2, #48	; 0x30
 800a650:	d0fa      	beq.n	800a648 <_dtoa_r+0xb68>
 800a652:	e6f9      	b.n	800a448 <_dtoa_r+0x968>
 800a654:	9a03      	ldr	r2, [sp, #12]
 800a656:	429a      	cmp	r2, r3
 800a658:	d1a5      	bne.n	800a5a6 <_dtoa_r+0xac6>
 800a65a:	2331      	movs	r3, #49	; 0x31
 800a65c:	f10a 0a01 	add.w	sl, sl, #1
 800a660:	e779      	b.n	800a556 <_dtoa_r+0xa76>
 800a662:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <_dtoa_r+0xbd4>)
 800a664:	f7ff baa8 	b.w	8009bb8 <_dtoa_r+0xd8>
 800a668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f47f aa81 	bne.w	8009b72 <_dtoa_r+0x92>
 800a670:	4b11      	ldr	r3, [pc, #68]	; (800a6b8 <_dtoa_r+0xbd8>)
 800a672:	f7ff baa1 	b.w	8009bb8 <_dtoa_r+0xd8>
 800a676:	f1b9 0f00 	cmp.w	r9, #0
 800a67a:	dc03      	bgt.n	800a684 <_dtoa_r+0xba4>
 800a67c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a67e:	2b02      	cmp	r3, #2
 800a680:	f73f aecb 	bgt.w	800a41a <_dtoa_r+0x93a>
 800a684:	9f03      	ldr	r7, [sp, #12]
 800a686:	4621      	mov	r1, r4
 800a688:	4658      	mov	r0, fp
 800a68a:	f7ff f99b 	bl	80099c4 <quorem>
 800a68e:	9a03      	ldr	r2, [sp, #12]
 800a690:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a694:	f807 3b01 	strb.w	r3, [r7], #1
 800a698:	1aba      	subs	r2, r7, r2
 800a69a:	4591      	cmp	r9, r2
 800a69c:	ddba      	ble.n	800a614 <_dtoa_r+0xb34>
 800a69e:	4659      	mov	r1, fp
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	220a      	movs	r2, #10
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f000 fcd9 	bl	800b05c <__multadd>
 800a6aa:	4683      	mov	fp, r0
 800a6ac:	e7eb      	b.n	800a686 <_dtoa_r+0xba6>
 800a6ae:	bf00      	nop
 800a6b0:	0800c988 	.word	0x0800c988
 800a6b4:	0800c788 	.word	0x0800c788
 800a6b8:	0800c909 	.word	0x0800c909

0800a6bc <__sflush_r>:
 800a6bc:	898a      	ldrh	r2, [r1, #12]
 800a6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	0710      	lsls	r0, r2, #28
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	d457      	bmi.n	800a778 <__sflush_r+0xbc>
 800a6c8:	684b      	ldr	r3, [r1, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dc04      	bgt.n	800a6d8 <__sflush_r+0x1c>
 800a6ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dc01      	bgt.n	800a6d8 <__sflush_r+0x1c>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6da:	2e00      	cmp	r6, #0
 800a6dc:	d0fa      	beq.n	800a6d4 <__sflush_r+0x18>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6e4:	682f      	ldr	r7, [r5, #0]
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	d032      	beq.n	800a750 <__sflush_r+0x94>
 800a6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	075a      	lsls	r2, r3, #29
 800a6f0:	d505      	bpl.n	800a6fe <__sflush_r+0x42>
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	1ac0      	subs	r0, r0, r3
 800a6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6f8:	b10b      	cbz	r3, 800a6fe <__sflush_r+0x42>
 800a6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6fc:	1ac0      	subs	r0, r0, r3
 800a6fe:	2300      	movs	r3, #0
 800a700:	4602      	mov	r2, r0
 800a702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a704:	4628      	mov	r0, r5
 800a706:	6a21      	ldr	r1, [r4, #32]
 800a708:	47b0      	blx	r6
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	d106      	bne.n	800a71e <__sflush_r+0x62>
 800a710:	6829      	ldr	r1, [r5, #0]
 800a712:	291d      	cmp	r1, #29
 800a714:	d82c      	bhi.n	800a770 <__sflush_r+0xb4>
 800a716:	4a29      	ldr	r2, [pc, #164]	; (800a7bc <__sflush_r+0x100>)
 800a718:	40ca      	lsrs	r2, r1
 800a71a:	07d6      	lsls	r6, r2, #31
 800a71c:	d528      	bpl.n	800a770 <__sflush_r+0xb4>
 800a71e:	2200      	movs	r2, #0
 800a720:	6062      	str	r2, [r4, #4]
 800a722:	6922      	ldr	r2, [r4, #16]
 800a724:	04d9      	lsls	r1, r3, #19
 800a726:	6022      	str	r2, [r4, #0]
 800a728:	d504      	bpl.n	800a734 <__sflush_r+0x78>
 800a72a:	1c42      	adds	r2, r0, #1
 800a72c:	d101      	bne.n	800a732 <__sflush_r+0x76>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b903      	cbnz	r3, 800a734 <__sflush_r+0x78>
 800a732:	6560      	str	r0, [r4, #84]	; 0x54
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	602f      	str	r7, [r5, #0]
 800a738:	2900      	cmp	r1, #0
 800a73a:	d0cb      	beq.n	800a6d4 <__sflush_r+0x18>
 800a73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a740:	4299      	cmp	r1, r3
 800a742:	d002      	beq.n	800a74a <__sflush_r+0x8e>
 800a744:	4628      	mov	r0, r5
 800a746:	f001 f8f3 	bl	800b930 <_free_r>
 800a74a:	2000      	movs	r0, #0
 800a74c:	6360      	str	r0, [r4, #52]	; 0x34
 800a74e:	e7c2      	b.n	800a6d6 <__sflush_r+0x1a>
 800a750:	6a21      	ldr	r1, [r4, #32]
 800a752:	2301      	movs	r3, #1
 800a754:	4628      	mov	r0, r5
 800a756:	47b0      	blx	r6
 800a758:	1c41      	adds	r1, r0, #1
 800a75a:	d1c7      	bne.n	800a6ec <__sflush_r+0x30>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0c4      	beq.n	800a6ec <__sflush_r+0x30>
 800a762:	2b1d      	cmp	r3, #29
 800a764:	d001      	beq.n	800a76a <__sflush_r+0xae>
 800a766:	2b16      	cmp	r3, #22
 800a768:	d101      	bne.n	800a76e <__sflush_r+0xb2>
 800a76a:	602f      	str	r7, [r5, #0]
 800a76c:	e7b2      	b.n	800a6d4 <__sflush_r+0x18>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	e7ae      	b.n	800a6d6 <__sflush_r+0x1a>
 800a778:	690f      	ldr	r7, [r1, #16]
 800a77a:	2f00      	cmp	r7, #0
 800a77c:	d0aa      	beq.n	800a6d4 <__sflush_r+0x18>
 800a77e:	0793      	lsls	r3, r2, #30
 800a780:	bf18      	it	ne
 800a782:	2300      	movne	r3, #0
 800a784:	680e      	ldr	r6, [r1, #0]
 800a786:	bf08      	it	eq
 800a788:	694b      	ldreq	r3, [r1, #20]
 800a78a:	1bf6      	subs	r6, r6, r7
 800a78c:	600f      	str	r7, [r1, #0]
 800a78e:	608b      	str	r3, [r1, #8]
 800a790:	2e00      	cmp	r6, #0
 800a792:	dd9f      	ble.n	800a6d4 <__sflush_r+0x18>
 800a794:	4633      	mov	r3, r6
 800a796:	463a      	mov	r2, r7
 800a798:	4628      	mov	r0, r5
 800a79a:	6a21      	ldr	r1, [r4, #32]
 800a79c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a7a0:	47e0      	blx	ip
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	dc06      	bgt.n	800a7b4 <__sflush_r+0xf8>
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	e790      	b.n	800a6d6 <__sflush_r+0x1a>
 800a7b4:	4407      	add	r7, r0
 800a7b6:	1a36      	subs	r6, r6, r0
 800a7b8:	e7ea      	b.n	800a790 <__sflush_r+0xd4>
 800a7ba:	bf00      	nop
 800a7bc:	20400001 	.word	0x20400001

0800a7c0 <_fflush_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	690b      	ldr	r3, [r1, #16]
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b913      	cbnz	r3, 800a7d0 <_fflush_r+0x10>
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	b118      	cbz	r0, 800a7da <_fflush_r+0x1a>
 800a7d2:	6983      	ldr	r3, [r0, #24]
 800a7d4:	b90b      	cbnz	r3, 800a7da <_fflush_r+0x1a>
 800a7d6:	f7fd f987 	bl	8007ae8 <__sinit>
 800a7da:	4b14      	ldr	r3, [pc, #80]	; (800a82c <_fflush_r+0x6c>)
 800a7dc:	429c      	cmp	r4, r3
 800a7de:	d11b      	bne.n	800a818 <_fflush_r+0x58>
 800a7e0:	686c      	ldr	r4, [r5, #4]
 800a7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0ef      	beq.n	800a7ca <_fflush_r+0xa>
 800a7ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7ec:	07d0      	lsls	r0, r2, #31
 800a7ee:	d404      	bmi.n	800a7fa <_fflush_r+0x3a>
 800a7f0:	0599      	lsls	r1, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_fflush_r+0x3a>
 800a7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7f6:	f7fd fa3a 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7ff ff5d 	bl	800a6bc <__sflush_r>
 800a802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a804:	4605      	mov	r5, r0
 800a806:	07da      	lsls	r2, r3, #31
 800a808:	d4e0      	bmi.n	800a7cc <_fflush_r+0xc>
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	059b      	lsls	r3, r3, #22
 800a80e:	d4dd      	bmi.n	800a7cc <_fflush_r+0xc>
 800a810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a812:	f7fd fa2d 	bl	8007c70 <__retarget_lock_release_recursive>
 800a816:	e7d9      	b.n	800a7cc <_fflush_r+0xc>
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <_fflush_r+0x70>)
 800a81a:	429c      	cmp	r4, r3
 800a81c:	d101      	bne.n	800a822 <_fflush_r+0x62>
 800a81e:	68ac      	ldr	r4, [r5, #8]
 800a820:	e7df      	b.n	800a7e2 <_fflush_r+0x22>
 800a822:	4b04      	ldr	r3, [pc, #16]	; (800a834 <_fflush_r+0x74>)
 800a824:	429c      	cmp	r4, r3
 800a826:	bf08      	it	eq
 800a828:	68ec      	ldreq	r4, [r5, #12]
 800a82a:	e7da      	b.n	800a7e2 <_fflush_r+0x22>
 800a82c:	0800c734 	.word	0x0800c734
 800a830:	0800c754 	.word	0x0800c754
 800a834:	0800c714 	.word	0x0800c714

0800a838 <rshift>:
 800a838:	6903      	ldr	r3, [r0, #16]
 800a83a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a83e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a842:	f100 0414 	add.w	r4, r0, #20
 800a846:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a84a:	dd46      	ble.n	800a8da <rshift+0xa2>
 800a84c:	f011 011f 	ands.w	r1, r1, #31
 800a850:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a854:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a858:	d10c      	bne.n	800a874 <rshift+0x3c>
 800a85a:	4629      	mov	r1, r5
 800a85c:	f100 0710 	add.w	r7, r0, #16
 800a860:	42b1      	cmp	r1, r6
 800a862:	d335      	bcc.n	800a8d0 <rshift+0x98>
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	1eea      	subs	r2, r5, #3
 800a86a:	4296      	cmp	r6, r2
 800a86c:	bf38      	it	cc
 800a86e:	2300      	movcc	r3, #0
 800a870:	4423      	add	r3, r4
 800a872:	e015      	b.n	800a8a0 <rshift+0x68>
 800a874:	46a1      	mov	r9, r4
 800a876:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a87a:	f1c1 0820 	rsb	r8, r1, #32
 800a87e:	40cf      	lsrs	r7, r1
 800a880:	f105 0e04 	add.w	lr, r5, #4
 800a884:	4576      	cmp	r6, lr
 800a886:	46f4      	mov	ip, lr
 800a888:	d816      	bhi.n	800a8b8 <rshift+0x80>
 800a88a:	1a9a      	subs	r2, r3, r2
 800a88c:	0092      	lsls	r2, r2, #2
 800a88e:	3a04      	subs	r2, #4
 800a890:	3501      	adds	r5, #1
 800a892:	42ae      	cmp	r6, r5
 800a894:	bf38      	it	cc
 800a896:	2200      	movcc	r2, #0
 800a898:	18a3      	adds	r3, r4, r2
 800a89a:	50a7      	str	r7, [r4, r2]
 800a89c:	b107      	cbz	r7, 800a8a0 <rshift+0x68>
 800a89e:	3304      	adds	r3, #4
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	eba3 0204 	sub.w	r2, r3, r4
 800a8a6:	bf08      	it	eq
 800a8a8:	2300      	moveq	r3, #0
 800a8aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8ae:	6102      	str	r2, [r0, #16]
 800a8b0:	bf08      	it	eq
 800a8b2:	6143      	streq	r3, [r0, #20]
 800a8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b8:	f8dc c000 	ldr.w	ip, [ip]
 800a8bc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8c0:	ea4c 0707 	orr.w	r7, ip, r7
 800a8c4:	f849 7b04 	str.w	r7, [r9], #4
 800a8c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8cc:	40cf      	lsrs	r7, r1
 800a8ce:	e7d9      	b.n	800a884 <rshift+0x4c>
 800a8d0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8d4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8d8:	e7c2      	b.n	800a860 <rshift+0x28>
 800a8da:	4623      	mov	r3, r4
 800a8dc:	e7e0      	b.n	800a8a0 <rshift+0x68>

0800a8de <__hexdig_fun>:
 800a8de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8e2:	2b09      	cmp	r3, #9
 800a8e4:	d802      	bhi.n	800a8ec <__hexdig_fun+0xe>
 800a8e6:	3820      	subs	r0, #32
 800a8e8:	b2c0      	uxtb	r0, r0
 800a8ea:	4770      	bx	lr
 800a8ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d801      	bhi.n	800a8f8 <__hexdig_fun+0x1a>
 800a8f4:	3847      	subs	r0, #71	; 0x47
 800a8f6:	e7f7      	b.n	800a8e8 <__hexdig_fun+0xa>
 800a8f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8fc:	2b05      	cmp	r3, #5
 800a8fe:	d801      	bhi.n	800a904 <__hexdig_fun+0x26>
 800a900:	3827      	subs	r0, #39	; 0x27
 800a902:	e7f1      	b.n	800a8e8 <__hexdig_fun+0xa>
 800a904:	2000      	movs	r0, #0
 800a906:	4770      	bx	lr

0800a908 <__gethex>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	b08b      	sub	sp, #44	; 0x2c
 800a90e:	9305      	str	r3, [sp, #20]
 800a910:	4bb2      	ldr	r3, [pc, #712]	; (800abdc <__gethex+0x2d4>)
 800a912:	9002      	str	r0, [sp, #8]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	468b      	mov	fp, r1
 800a918:	4618      	mov	r0, r3
 800a91a:	4690      	mov	r8, r2
 800a91c:	9303      	str	r3, [sp, #12]
 800a91e:	f7f5 fc17 	bl	8000150 <strlen>
 800a922:	4682      	mov	sl, r0
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	f8db 2000 	ldr.w	r2, [fp]
 800a92a:	4403      	add	r3, r0
 800a92c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a930:	9306      	str	r3, [sp, #24]
 800a932:	1c93      	adds	r3, r2, #2
 800a934:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a938:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a93c:	32fe      	adds	r2, #254	; 0xfe
 800a93e:	18d1      	adds	r1, r2, r3
 800a940:	461f      	mov	r7, r3
 800a942:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a946:	9101      	str	r1, [sp, #4]
 800a948:	2830      	cmp	r0, #48	; 0x30
 800a94a:	d0f8      	beq.n	800a93e <__gethex+0x36>
 800a94c:	f7ff ffc7 	bl	800a8de <__hexdig_fun>
 800a950:	4604      	mov	r4, r0
 800a952:	2800      	cmp	r0, #0
 800a954:	d13a      	bne.n	800a9cc <__gethex+0xc4>
 800a956:	4652      	mov	r2, sl
 800a958:	4638      	mov	r0, r7
 800a95a:	9903      	ldr	r1, [sp, #12]
 800a95c:	f001 f9a4 	bl	800bca8 <strncmp>
 800a960:	4605      	mov	r5, r0
 800a962:	2800      	cmp	r0, #0
 800a964:	d166      	bne.n	800aa34 <__gethex+0x12c>
 800a966:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a96a:	eb07 060a 	add.w	r6, r7, sl
 800a96e:	f7ff ffb6 	bl	800a8de <__hexdig_fun>
 800a972:	2800      	cmp	r0, #0
 800a974:	d060      	beq.n	800aa38 <__gethex+0x130>
 800a976:	4633      	mov	r3, r6
 800a978:	7818      	ldrb	r0, [r3, #0]
 800a97a:	461f      	mov	r7, r3
 800a97c:	2830      	cmp	r0, #48	; 0x30
 800a97e:	f103 0301 	add.w	r3, r3, #1
 800a982:	d0f9      	beq.n	800a978 <__gethex+0x70>
 800a984:	f7ff ffab 	bl	800a8de <__hexdig_fun>
 800a988:	2301      	movs	r3, #1
 800a98a:	fab0 f480 	clz	r4, r0
 800a98e:	4635      	mov	r5, r6
 800a990:	0964      	lsrs	r4, r4, #5
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	463a      	mov	r2, r7
 800a996:	4616      	mov	r6, r2
 800a998:	7830      	ldrb	r0, [r6, #0]
 800a99a:	3201      	adds	r2, #1
 800a99c:	f7ff ff9f 	bl	800a8de <__hexdig_fun>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d1f8      	bne.n	800a996 <__gethex+0x8e>
 800a9a4:	4652      	mov	r2, sl
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	9903      	ldr	r1, [sp, #12]
 800a9aa:	f001 f97d 	bl	800bca8 <strncmp>
 800a9ae:	b980      	cbnz	r0, 800a9d2 <__gethex+0xca>
 800a9b0:	b94d      	cbnz	r5, 800a9c6 <__gethex+0xbe>
 800a9b2:	eb06 050a 	add.w	r5, r6, sl
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	7830      	ldrb	r0, [r6, #0]
 800a9bc:	3201      	adds	r2, #1
 800a9be:	f7ff ff8e 	bl	800a8de <__hexdig_fun>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1f8      	bne.n	800a9b8 <__gethex+0xb0>
 800a9c6:	1bad      	subs	r5, r5, r6
 800a9c8:	00ad      	lsls	r5, r5, #2
 800a9ca:	e004      	b.n	800a9d6 <__gethex+0xce>
 800a9cc:	2400      	movs	r4, #0
 800a9ce:	4625      	mov	r5, r4
 800a9d0:	e7e0      	b.n	800a994 <__gethex+0x8c>
 800a9d2:	2d00      	cmp	r5, #0
 800a9d4:	d1f7      	bne.n	800a9c6 <__gethex+0xbe>
 800a9d6:	7833      	ldrb	r3, [r6, #0]
 800a9d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9dc:	2b50      	cmp	r3, #80	; 0x50
 800a9de:	d139      	bne.n	800aa54 <__gethex+0x14c>
 800a9e0:	7873      	ldrb	r3, [r6, #1]
 800a9e2:	2b2b      	cmp	r3, #43	; 0x2b
 800a9e4:	d02a      	beq.n	800aa3c <__gethex+0x134>
 800a9e6:	2b2d      	cmp	r3, #45	; 0x2d
 800a9e8:	d02c      	beq.n	800aa44 <__gethex+0x13c>
 800a9ea:	f04f 0900 	mov.w	r9, #0
 800a9ee:	1c71      	adds	r1, r6, #1
 800a9f0:	7808      	ldrb	r0, [r1, #0]
 800a9f2:	f7ff ff74 	bl	800a8de <__hexdig_fun>
 800a9f6:	1e43      	subs	r3, r0, #1
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b18      	cmp	r3, #24
 800a9fc:	d82a      	bhi.n	800aa54 <__gethex+0x14c>
 800a9fe:	f1a0 0210 	sub.w	r2, r0, #16
 800aa02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa06:	f7ff ff6a 	bl	800a8de <__hexdig_fun>
 800aa0a:	1e43      	subs	r3, r0, #1
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b18      	cmp	r3, #24
 800aa10:	d91b      	bls.n	800aa4a <__gethex+0x142>
 800aa12:	f1b9 0f00 	cmp.w	r9, #0
 800aa16:	d000      	beq.n	800aa1a <__gethex+0x112>
 800aa18:	4252      	negs	r2, r2
 800aa1a:	4415      	add	r5, r2
 800aa1c:	f8cb 1000 	str.w	r1, [fp]
 800aa20:	b1d4      	cbz	r4, 800aa58 <__gethex+0x150>
 800aa22:	9b01      	ldr	r3, [sp, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	bf14      	ite	ne
 800aa28:	2700      	movne	r7, #0
 800aa2a:	2706      	moveq	r7, #6
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	b00b      	add	sp, #44	; 0x2c
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa34:	463e      	mov	r6, r7
 800aa36:	4625      	mov	r5, r4
 800aa38:	2401      	movs	r4, #1
 800aa3a:	e7cc      	b.n	800a9d6 <__gethex+0xce>
 800aa3c:	f04f 0900 	mov.w	r9, #0
 800aa40:	1cb1      	adds	r1, r6, #2
 800aa42:	e7d5      	b.n	800a9f0 <__gethex+0xe8>
 800aa44:	f04f 0901 	mov.w	r9, #1
 800aa48:	e7fa      	b.n	800aa40 <__gethex+0x138>
 800aa4a:	230a      	movs	r3, #10
 800aa4c:	fb03 0202 	mla	r2, r3, r2, r0
 800aa50:	3a10      	subs	r2, #16
 800aa52:	e7d6      	b.n	800aa02 <__gethex+0xfa>
 800aa54:	4631      	mov	r1, r6
 800aa56:	e7e1      	b.n	800aa1c <__gethex+0x114>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	1bf3      	subs	r3, r6, r7
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	2b07      	cmp	r3, #7
 800aa60:	dc0a      	bgt.n	800aa78 <__gethex+0x170>
 800aa62:	9802      	ldr	r0, [sp, #8]
 800aa64:	f000 fa98 	bl	800af98 <_Balloc>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	b940      	cbnz	r0, 800aa7e <__gethex+0x176>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	21de      	movs	r1, #222	; 0xde
 800aa70:	4b5b      	ldr	r3, [pc, #364]	; (800abe0 <__gethex+0x2d8>)
 800aa72:	485c      	ldr	r0, [pc, #368]	; (800abe4 <__gethex+0x2dc>)
 800aa74:	f001 f93a 	bl	800bcec <__assert_func>
 800aa78:	3101      	adds	r1, #1
 800aa7a:	105b      	asrs	r3, r3, #1
 800aa7c:	e7ef      	b.n	800aa5e <__gethex+0x156>
 800aa7e:	f04f 0b00 	mov.w	fp, #0
 800aa82:	f100 0914 	add.w	r9, r0, #20
 800aa86:	f1ca 0301 	rsb	r3, sl, #1
 800aa8a:	f8cd 9010 	str.w	r9, [sp, #16]
 800aa8e:	f8cd b004 	str.w	fp, [sp, #4]
 800aa92:	9308      	str	r3, [sp, #32]
 800aa94:	42b7      	cmp	r7, r6
 800aa96:	d33f      	bcc.n	800ab18 <__gethex+0x210>
 800aa98:	9f04      	ldr	r7, [sp, #16]
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	f847 3b04 	str.w	r3, [r7], #4
 800aaa0:	eba7 0709 	sub.w	r7, r7, r9
 800aaa4:	10bf      	asrs	r7, r7, #2
 800aaa6:	6127      	str	r7, [r4, #16]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 fb67 	bl	800b17c <__hi0bits>
 800aaae:	017f      	lsls	r7, r7, #5
 800aab0:	f8d8 6000 	ldr.w	r6, [r8]
 800aab4:	1a3f      	subs	r7, r7, r0
 800aab6:	42b7      	cmp	r7, r6
 800aab8:	dd62      	ble.n	800ab80 <__gethex+0x278>
 800aaba:	1bbf      	subs	r7, r7, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 ff01 	bl	800b8c6 <__any_on>
 800aac4:	4682      	mov	sl, r0
 800aac6:	b1a8      	cbz	r0, 800aaf4 <__gethex+0x1ec>
 800aac8:	f04f 0a01 	mov.w	sl, #1
 800aacc:	1e7b      	subs	r3, r7, #1
 800aace:	1159      	asrs	r1, r3, #5
 800aad0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aad4:	f003 021f 	and.w	r2, r3, #31
 800aad8:	fa0a f202 	lsl.w	r2, sl, r2
 800aadc:	420a      	tst	r2, r1
 800aade:	d009      	beq.n	800aaf4 <__gethex+0x1ec>
 800aae0:	4553      	cmp	r3, sl
 800aae2:	dd05      	ble.n	800aaf0 <__gethex+0x1e8>
 800aae4:	4620      	mov	r0, r4
 800aae6:	1eb9      	subs	r1, r7, #2
 800aae8:	f000 feed 	bl	800b8c6 <__any_on>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d144      	bne.n	800ab7a <__gethex+0x272>
 800aaf0:	f04f 0a02 	mov.w	sl, #2
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7ff fe9e 	bl	800a838 <rshift>
 800aafc:	443d      	add	r5, r7
 800aafe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab02:	42ab      	cmp	r3, r5
 800ab04:	da4a      	bge.n	800ab9c <__gethex+0x294>
 800ab06:	4621      	mov	r1, r4
 800ab08:	9802      	ldr	r0, [sp, #8]
 800ab0a:	f000 fa85 	bl	800b018 <_Bfree>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab12:	27a3      	movs	r7, #163	; 0xa3
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	e789      	b.n	800aa2c <__gethex+0x124>
 800ab18:	1e73      	subs	r3, r6, #1
 800ab1a:	9a06      	ldr	r2, [sp, #24]
 800ab1c:	9307      	str	r3, [sp, #28]
 800ab1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d019      	beq.n	800ab5a <__gethex+0x252>
 800ab26:	f1bb 0f20 	cmp.w	fp, #32
 800ab2a:	d107      	bne.n	800ab3c <__gethex+0x234>
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	9a01      	ldr	r2, [sp, #4]
 800ab30:	f843 2b04 	str.w	r2, [r3], #4
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	2300      	movs	r3, #0
 800ab38:	469b      	mov	fp, r3
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab40:	f7ff fecd 	bl	800a8de <__hexdig_fun>
 800ab44:	9b01      	ldr	r3, [sp, #4]
 800ab46:	f000 000f 	and.w	r0, r0, #15
 800ab4a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab4e:	4303      	orrs	r3, r0
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	f10b 0b04 	add.w	fp, fp, #4
 800ab56:	9b07      	ldr	r3, [sp, #28]
 800ab58:	e00d      	b.n	800ab76 <__gethex+0x26e>
 800ab5a:	9a08      	ldr	r2, [sp, #32]
 800ab5c:	1e73      	subs	r3, r6, #1
 800ab5e:	4413      	add	r3, r2
 800ab60:	42bb      	cmp	r3, r7
 800ab62:	d3e0      	bcc.n	800ab26 <__gethex+0x21e>
 800ab64:	4618      	mov	r0, r3
 800ab66:	4652      	mov	r2, sl
 800ab68:	9903      	ldr	r1, [sp, #12]
 800ab6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6c:	f001 f89c 	bl	800bca8 <strncmp>
 800ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab72:	2800      	cmp	r0, #0
 800ab74:	d1d7      	bne.n	800ab26 <__gethex+0x21e>
 800ab76:	461e      	mov	r6, r3
 800ab78:	e78c      	b.n	800aa94 <__gethex+0x18c>
 800ab7a:	f04f 0a03 	mov.w	sl, #3
 800ab7e:	e7b9      	b.n	800aaf4 <__gethex+0x1ec>
 800ab80:	da09      	bge.n	800ab96 <__gethex+0x28e>
 800ab82:	1bf7      	subs	r7, r6, r7
 800ab84:	4621      	mov	r1, r4
 800ab86:	463a      	mov	r2, r7
 800ab88:	9802      	ldr	r0, [sp, #8]
 800ab8a:	f000 fc5d 	bl	800b448 <__lshift>
 800ab8e:	4604      	mov	r4, r0
 800ab90:	1bed      	subs	r5, r5, r7
 800ab92:	f100 0914 	add.w	r9, r0, #20
 800ab96:	f04f 0a00 	mov.w	sl, #0
 800ab9a:	e7b0      	b.n	800aafe <__gethex+0x1f6>
 800ab9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aba0:	42a8      	cmp	r0, r5
 800aba2:	dd72      	ble.n	800ac8a <__gethex+0x382>
 800aba4:	1b45      	subs	r5, r0, r5
 800aba6:	42ae      	cmp	r6, r5
 800aba8:	dc35      	bgt.n	800ac16 <__gethex+0x30e>
 800abaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d029      	beq.n	800ac06 <__gethex+0x2fe>
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d02b      	beq.n	800ac0e <__gethex+0x306>
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d11c      	bne.n	800abf4 <__gethex+0x2ec>
 800abba:	42ae      	cmp	r6, r5
 800abbc:	d11a      	bne.n	800abf4 <__gethex+0x2ec>
 800abbe:	2e01      	cmp	r6, #1
 800abc0:	d112      	bne.n	800abe8 <__gethex+0x2e0>
 800abc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abc6:	9a05      	ldr	r2, [sp, #20]
 800abc8:	2762      	movs	r7, #98	; 0x62
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	2301      	movs	r3, #1
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	f8c9 3000 	str.w	r3, [r9]
 800abd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abd6:	601c      	str	r4, [r3, #0]
 800abd8:	e728      	b.n	800aa2c <__gethex+0x124>
 800abda:	bf00      	nop
 800abdc:	0800ca00 	.word	0x0800ca00
 800abe0:	0800c988 	.word	0x0800c988
 800abe4:	0800c999 	.word	0x0800c999
 800abe8:	4620      	mov	r0, r4
 800abea:	1e71      	subs	r1, r6, #1
 800abec:	f000 fe6b 	bl	800b8c6 <__any_on>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1e6      	bne.n	800abc2 <__gethex+0x2ba>
 800abf4:	4621      	mov	r1, r4
 800abf6:	9802      	ldr	r0, [sp, #8]
 800abf8:	f000 fa0e 	bl	800b018 <_Bfree>
 800abfc:	2300      	movs	r3, #0
 800abfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac00:	2750      	movs	r7, #80	; 0x50
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	e712      	b.n	800aa2c <__gethex+0x124>
 800ac06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1f3      	bne.n	800abf4 <__gethex+0x2ec>
 800ac0c:	e7d9      	b.n	800abc2 <__gethex+0x2ba>
 800ac0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1d6      	bne.n	800abc2 <__gethex+0x2ba>
 800ac14:	e7ee      	b.n	800abf4 <__gethex+0x2ec>
 800ac16:	1e6f      	subs	r7, r5, #1
 800ac18:	f1ba 0f00 	cmp.w	sl, #0
 800ac1c:	d132      	bne.n	800ac84 <__gethex+0x37c>
 800ac1e:	b127      	cbz	r7, 800ac2a <__gethex+0x322>
 800ac20:	4639      	mov	r1, r7
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fe4f 	bl	800b8c6 <__any_on>
 800ac28:	4682      	mov	sl, r0
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	117b      	asrs	r3, r7, #5
 800ac2e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac32:	f007 071f 	and.w	r7, r7, #31
 800ac36:	fa01 f707 	lsl.w	r7, r1, r7
 800ac3a:	421f      	tst	r7, r3
 800ac3c:	f04f 0702 	mov.w	r7, #2
 800ac40:	4629      	mov	r1, r5
 800ac42:	4620      	mov	r0, r4
 800ac44:	bf18      	it	ne
 800ac46:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac4a:	1b76      	subs	r6, r6, r5
 800ac4c:	f7ff fdf4 	bl	800a838 <rshift>
 800ac50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac54:	f1ba 0f00 	cmp.w	sl, #0
 800ac58:	d048      	beq.n	800acec <__gethex+0x3e4>
 800ac5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d015      	beq.n	800ac8e <__gethex+0x386>
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d017      	beq.n	800ac96 <__gethex+0x38e>
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d109      	bne.n	800ac7e <__gethex+0x376>
 800ac6a:	f01a 0f02 	tst.w	sl, #2
 800ac6e:	d006      	beq.n	800ac7e <__gethex+0x376>
 800ac70:	f8d9 0000 	ldr.w	r0, [r9]
 800ac74:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac78:	f01a 0f01 	tst.w	sl, #1
 800ac7c:	d10e      	bne.n	800ac9c <__gethex+0x394>
 800ac7e:	f047 0710 	orr.w	r7, r7, #16
 800ac82:	e033      	b.n	800acec <__gethex+0x3e4>
 800ac84:	f04f 0a01 	mov.w	sl, #1
 800ac88:	e7cf      	b.n	800ac2a <__gethex+0x322>
 800ac8a:	2701      	movs	r7, #1
 800ac8c:	e7e2      	b.n	800ac54 <__gethex+0x34c>
 800ac8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac90:	f1c3 0301 	rsb	r3, r3, #1
 800ac94:	9315      	str	r3, [sp, #84]	; 0x54
 800ac96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d0f0      	beq.n	800ac7e <__gethex+0x376>
 800ac9c:	f04f 0c00 	mov.w	ip, #0
 800aca0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aca4:	f104 0314 	add.w	r3, r4, #20
 800aca8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acba:	d01c      	beq.n	800acf6 <__gethex+0x3ee>
 800acbc:	3201      	adds	r2, #1
 800acbe:	6002      	str	r2, [r0, #0]
 800acc0:	2f02      	cmp	r7, #2
 800acc2:	f104 0314 	add.w	r3, r4, #20
 800acc6:	d13d      	bne.n	800ad44 <__gethex+0x43c>
 800acc8:	f8d8 2000 	ldr.w	r2, [r8]
 800accc:	3a01      	subs	r2, #1
 800acce:	42b2      	cmp	r2, r6
 800acd0:	d10a      	bne.n	800ace8 <__gethex+0x3e0>
 800acd2:	2201      	movs	r2, #1
 800acd4:	1171      	asrs	r1, r6, #5
 800acd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acda:	f006 061f 	and.w	r6, r6, #31
 800acde:	fa02 f606 	lsl.w	r6, r2, r6
 800ace2:	421e      	tst	r6, r3
 800ace4:	bf18      	it	ne
 800ace6:	4617      	movne	r7, r2
 800ace8:	f047 0720 	orr.w	r7, r7, #32
 800acec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acee:	601c      	str	r4, [r3, #0]
 800acf0:	9b05      	ldr	r3, [sp, #20]
 800acf2:	601d      	str	r5, [r3, #0]
 800acf4:	e69a      	b.n	800aa2c <__gethex+0x124>
 800acf6:	4299      	cmp	r1, r3
 800acf8:	f843 cc04 	str.w	ip, [r3, #-4]
 800acfc:	d8d8      	bhi.n	800acb0 <__gethex+0x3a8>
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	459b      	cmp	fp, r3
 800ad02:	db17      	blt.n	800ad34 <__gethex+0x42c>
 800ad04:	6861      	ldr	r1, [r4, #4]
 800ad06:	9802      	ldr	r0, [sp, #8]
 800ad08:	3101      	adds	r1, #1
 800ad0a:	f000 f945 	bl	800af98 <_Balloc>
 800ad0e:	4681      	mov	r9, r0
 800ad10:	b918      	cbnz	r0, 800ad1a <__gethex+0x412>
 800ad12:	4602      	mov	r2, r0
 800ad14:	2184      	movs	r1, #132	; 0x84
 800ad16:	4b19      	ldr	r3, [pc, #100]	; (800ad7c <__gethex+0x474>)
 800ad18:	e6ab      	b.n	800aa72 <__gethex+0x16a>
 800ad1a:	6922      	ldr	r2, [r4, #16]
 800ad1c:	f104 010c 	add.w	r1, r4, #12
 800ad20:	3202      	adds	r2, #2
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	300c      	adds	r0, #12
 800ad26:	f7fc ffa4 	bl	8007c72 <memcpy>
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	9802      	ldr	r0, [sp, #8]
 800ad2e:	f000 f973 	bl	800b018 <_Bfree>
 800ad32:	464c      	mov	r4, r9
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	6122      	str	r2, [r4, #16]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad40:	615a      	str	r2, [r3, #20]
 800ad42:	e7bd      	b.n	800acc0 <__gethex+0x3b8>
 800ad44:	6922      	ldr	r2, [r4, #16]
 800ad46:	455a      	cmp	r2, fp
 800ad48:	dd0b      	ble.n	800ad62 <__gethex+0x45a>
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f7ff fd73 	bl	800a838 <rshift>
 800ad52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad56:	3501      	adds	r5, #1
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	f6ff aed4 	blt.w	800ab06 <__gethex+0x1fe>
 800ad5e:	2701      	movs	r7, #1
 800ad60:	e7c2      	b.n	800ace8 <__gethex+0x3e0>
 800ad62:	f016 061f 	ands.w	r6, r6, #31
 800ad66:	d0fa      	beq.n	800ad5e <__gethex+0x456>
 800ad68:	4453      	add	r3, sl
 800ad6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad6e:	f000 fa05 	bl	800b17c <__hi0bits>
 800ad72:	f1c6 0620 	rsb	r6, r6, #32
 800ad76:	42b0      	cmp	r0, r6
 800ad78:	dbe7      	blt.n	800ad4a <__gethex+0x442>
 800ad7a:	e7f0      	b.n	800ad5e <__gethex+0x456>
 800ad7c:	0800c988 	.word	0x0800c988

0800ad80 <L_shift>:
 800ad80:	f1c2 0208 	rsb	r2, r2, #8
 800ad84:	0092      	lsls	r2, r2, #2
 800ad86:	b570      	push	{r4, r5, r6, lr}
 800ad88:	f1c2 0620 	rsb	r6, r2, #32
 800ad8c:	6843      	ldr	r3, [r0, #4]
 800ad8e:	6804      	ldr	r4, [r0, #0]
 800ad90:	fa03 f506 	lsl.w	r5, r3, r6
 800ad94:	432c      	orrs	r4, r5
 800ad96:	40d3      	lsrs	r3, r2
 800ad98:	6004      	str	r4, [r0, #0]
 800ad9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad9e:	4288      	cmp	r0, r1
 800ada0:	d3f4      	bcc.n	800ad8c <L_shift+0xc>
 800ada2:	bd70      	pop	{r4, r5, r6, pc}

0800ada4 <__match>:
 800ada4:	b530      	push	{r4, r5, lr}
 800ada6:	6803      	ldr	r3, [r0, #0]
 800ada8:	3301      	adds	r3, #1
 800adaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adae:	b914      	cbnz	r4, 800adb6 <__match+0x12>
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	2001      	movs	r0, #1
 800adb4:	bd30      	pop	{r4, r5, pc}
 800adb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adbe:	2d19      	cmp	r5, #25
 800adc0:	bf98      	it	ls
 800adc2:	3220      	addls	r2, #32
 800adc4:	42a2      	cmp	r2, r4
 800adc6:	d0f0      	beq.n	800adaa <__match+0x6>
 800adc8:	2000      	movs	r0, #0
 800adca:	e7f3      	b.n	800adb4 <__match+0x10>

0800adcc <__hexnan>:
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	2500      	movs	r5, #0
 800add2:	680b      	ldr	r3, [r1, #0]
 800add4:	4682      	mov	sl, r0
 800add6:	115e      	asrs	r6, r3, #5
 800add8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800addc:	f013 031f 	ands.w	r3, r3, #31
 800ade0:	bf18      	it	ne
 800ade2:	3604      	addne	r6, #4
 800ade4:	1f37      	subs	r7, r6, #4
 800ade6:	46b9      	mov	r9, r7
 800ade8:	463c      	mov	r4, r7
 800adea:	46ab      	mov	fp, r5
 800adec:	b087      	sub	sp, #28
 800adee:	4690      	mov	r8, r2
 800adf0:	6802      	ldr	r2, [r0, #0]
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	f846 5c04 	str.w	r5, [r6, #-4]
 800adf8:	9502      	str	r5, [sp, #8]
 800adfa:	7851      	ldrb	r1, [r2, #1]
 800adfc:	1c53      	adds	r3, r2, #1
 800adfe:	9303      	str	r3, [sp, #12]
 800ae00:	b341      	cbz	r1, 800ae54 <__hexnan+0x88>
 800ae02:	4608      	mov	r0, r1
 800ae04:	9205      	str	r2, [sp, #20]
 800ae06:	9104      	str	r1, [sp, #16]
 800ae08:	f7ff fd69 	bl	800a8de <__hexdig_fun>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d14f      	bne.n	800aeb0 <__hexnan+0xe4>
 800ae10:	9904      	ldr	r1, [sp, #16]
 800ae12:	9a05      	ldr	r2, [sp, #20]
 800ae14:	2920      	cmp	r1, #32
 800ae16:	d818      	bhi.n	800ae4a <__hexnan+0x7e>
 800ae18:	9b02      	ldr	r3, [sp, #8]
 800ae1a:	459b      	cmp	fp, r3
 800ae1c:	dd13      	ble.n	800ae46 <__hexnan+0x7a>
 800ae1e:	454c      	cmp	r4, r9
 800ae20:	d206      	bcs.n	800ae30 <__hexnan+0x64>
 800ae22:	2d07      	cmp	r5, #7
 800ae24:	dc04      	bgt.n	800ae30 <__hexnan+0x64>
 800ae26:	462a      	mov	r2, r5
 800ae28:	4649      	mov	r1, r9
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7ff ffa8 	bl	800ad80 <L_shift>
 800ae30:	4544      	cmp	r4, r8
 800ae32:	d950      	bls.n	800aed6 <__hexnan+0x10a>
 800ae34:	2300      	movs	r3, #0
 800ae36:	f1a4 0904 	sub.w	r9, r4, #4
 800ae3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae3e:	461d      	mov	r5, r3
 800ae40:	464c      	mov	r4, r9
 800ae42:	f8cd b008 	str.w	fp, [sp, #8]
 800ae46:	9a03      	ldr	r2, [sp, #12]
 800ae48:	e7d7      	b.n	800adfa <__hexnan+0x2e>
 800ae4a:	2929      	cmp	r1, #41	; 0x29
 800ae4c:	d156      	bne.n	800aefc <__hexnan+0x130>
 800ae4e:	3202      	adds	r2, #2
 800ae50:	f8ca 2000 	str.w	r2, [sl]
 800ae54:	f1bb 0f00 	cmp.w	fp, #0
 800ae58:	d050      	beq.n	800aefc <__hexnan+0x130>
 800ae5a:	454c      	cmp	r4, r9
 800ae5c:	d206      	bcs.n	800ae6c <__hexnan+0xa0>
 800ae5e:	2d07      	cmp	r5, #7
 800ae60:	dc04      	bgt.n	800ae6c <__hexnan+0xa0>
 800ae62:	462a      	mov	r2, r5
 800ae64:	4649      	mov	r1, r9
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7ff ff8a 	bl	800ad80 <L_shift>
 800ae6c:	4544      	cmp	r4, r8
 800ae6e:	d934      	bls.n	800aeda <__hexnan+0x10e>
 800ae70:	4623      	mov	r3, r4
 800ae72:	f1a8 0204 	sub.w	r2, r8, #4
 800ae76:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae7a:	429f      	cmp	r7, r3
 800ae7c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae80:	d2f9      	bcs.n	800ae76 <__hexnan+0xaa>
 800ae82:	1b3b      	subs	r3, r7, r4
 800ae84:	f023 0303 	bic.w	r3, r3, #3
 800ae88:	3304      	adds	r3, #4
 800ae8a:	3401      	adds	r4, #1
 800ae8c:	3e03      	subs	r6, #3
 800ae8e:	42b4      	cmp	r4, r6
 800ae90:	bf88      	it	hi
 800ae92:	2304      	movhi	r3, #4
 800ae94:	2200      	movs	r2, #0
 800ae96:	4443      	add	r3, r8
 800ae98:	f843 2b04 	str.w	r2, [r3], #4
 800ae9c:	429f      	cmp	r7, r3
 800ae9e:	d2fb      	bcs.n	800ae98 <__hexnan+0xcc>
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	b91b      	cbnz	r3, 800aeac <__hexnan+0xe0>
 800aea4:	4547      	cmp	r7, r8
 800aea6:	d127      	bne.n	800aef8 <__hexnan+0x12c>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	2005      	movs	r0, #5
 800aeae:	e026      	b.n	800aefe <__hexnan+0x132>
 800aeb0:	3501      	adds	r5, #1
 800aeb2:	2d08      	cmp	r5, #8
 800aeb4:	f10b 0b01 	add.w	fp, fp, #1
 800aeb8:	dd06      	ble.n	800aec8 <__hexnan+0xfc>
 800aeba:	4544      	cmp	r4, r8
 800aebc:	d9c3      	bls.n	800ae46 <__hexnan+0x7a>
 800aebe:	2300      	movs	r3, #0
 800aec0:	2501      	movs	r5, #1
 800aec2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aec6:	3c04      	subs	r4, #4
 800aec8:	6822      	ldr	r2, [r4, #0]
 800aeca:	f000 000f 	and.w	r0, r0, #15
 800aece:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aed2:	6022      	str	r2, [r4, #0]
 800aed4:	e7b7      	b.n	800ae46 <__hexnan+0x7a>
 800aed6:	2508      	movs	r5, #8
 800aed8:	e7b5      	b.n	800ae46 <__hexnan+0x7a>
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0df      	beq.n	800aea0 <__hexnan+0xd4>
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	f1c3 0320 	rsb	r3, r3, #32
 800aee8:	fa22 f303 	lsr.w	r3, r2, r3
 800aeec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aef0:	401a      	ands	r2, r3
 800aef2:	f846 2c04 	str.w	r2, [r6, #-4]
 800aef6:	e7d3      	b.n	800aea0 <__hexnan+0xd4>
 800aef8:	3f04      	subs	r7, #4
 800aefa:	e7d1      	b.n	800aea0 <__hexnan+0xd4>
 800aefc:	2004      	movs	r0, #4
 800aefe:	b007      	add	sp, #28
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af04 <_localeconv_r>:
 800af04:	4800      	ldr	r0, [pc, #0]	; (800af08 <_localeconv_r+0x4>)
 800af06:	4770      	bx	lr
 800af08:	20000168 	.word	0x20000168

0800af0c <_lseek_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	4611      	mov	r1, r2
 800af14:	2200      	movs	r2, #0
 800af16:	4d05      	ldr	r5, [pc, #20]	; (800af2c <_lseek_r+0x20>)
 800af18:	602a      	str	r2, [r5, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	f7f6 fc5c 	bl	80017d8 <_lseek>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d102      	bne.n	800af2a <_lseek_r+0x1e>
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	b103      	cbz	r3, 800af2a <_lseek_r+0x1e>
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
 800af2c:	200031d8 	.word	0x200031d8

0800af30 <malloc>:
 800af30:	4b02      	ldr	r3, [pc, #8]	; (800af3c <malloc+0xc>)
 800af32:	4601      	mov	r1, r0
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	f7fc bed3 	b.w	8007ce0 <_malloc_r>
 800af3a:	bf00      	nop
 800af3c:	20000010 	.word	0x20000010

0800af40 <__ascii_mbtowc>:
 800af40:	b082      	sub	sp, #8
 800af42:	b901      	cbnz	r1, 800af46 <__ascii_mbtowc+0x6>
 800af44:	a901      	add	r1, sp, #4
 800af46:	b142      	cbz	r2, 800af5a <__ascii_mbtowc+0x1a>
 800af48:	b14b      	cbz	r3, 800af5e <__ascii_mbtowc+0x1e>
 800af4a:	7813      	ldrb	r3, [r2, #0]
 800af4c:	600b      	str	r3, [r1, #0]
 800af4e:	7812      	ldrb	r2, [r2, #0]
 800af50:	1e10      	subs	r0, r2, #0
 800af52:	bf18      	it	ne
 800af54:	2001      	movne	r0, #1
 800af56:	b002      	add	sp, #8
 800af58:	4770      	bx	lr
 800af5a:	4610      	mov	r0, r2
 800af5c:	e7fb      	b.n	800af56 <__ascii_mbtowc+0x16>
 800af5e:	f06f 0001 	mvn.w	r0, #1
 800af62:	e7f8      	b.n	800af56 <__ascii_mbtowc+0x16>

0800af64 <memchr>:
 800af64:	4603      	mov	r3, r0
 800af66:	b510      	push	{r4, lr}
 800af68:	b2c9      	uxtb	r1, r1
 800af6a:	4402      	add	r2, r0
 800af6c:	4293      	cmp	r3, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	d101      	bne.n	800af76 <memchr+0x12>
 800af72:	2000      	movs	r0, #0
 800af74:	e003      	b.n	800af7e <memchr+0x1a>
 800af76:	7804      	ldrb	r4, [r0, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	428c      	cmp	r4, r1
 800af7c:	d1f6      	bne.n	800af6c <memchr+0x8>
 800af7e:	bd10      	pop	{r4, pc}

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_lock+0x8>)
 800af82:	f7fc be74 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	200031cc 	.word	0x200031cc

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__malloc_unlock+0x8>)
 800af8e:	f7fc be6f 	b.w	8007c70 <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	200031cc 	.word	0x200031cc

0800af98 <_Balloc>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af9c:	4604      	mov	r4, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	b976      	cbnz	r6, 800afc0 <_Balloc+0x28>
 800afa2:	2010      	movs	r0, #16
 800afa4:	f7ff ffc4 	bl	800af30 <malloc>
 800afa8:	4602      	mov	r2, r0
 800afaa:	6260      	str	r0, [r4, #36]	; 0x24
 800afac:	b920      	cbnz	r0, 800afb8 <_Balloc+0x20>
 800afae:	2166      	movs	r1, #102	; 0x66
 800afb0:	4b17      	ldr	r3, [pc, #92]	; (800b010 <_Balloc+0x78>)
 800afb2:	4818      	ldr	r0, [pc, #96]	; (800b014 <_Balloc+0x7c>)
 800afb4:	f000 fe9a 	bl	800bcec <__assert_func>
 800afb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afbc:	6006      	str	r6, [r0, #0]
 800afbe:	60c6      	str	r6, [r0, #12]
 800afc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afc2:	68f3      	ldr	r3, [r6, #12]
 800afc4:	b183      	cbz	r3, 800afe8 <_Balloc+0x50>
 800afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afce:	b9b8      	cbnz	r0, 800b000 <_Balloc+0x68>
 800afd0:	2101      	movs	r1, #1
 800afd2:	fa01 f605 	lsl.w	r6, r1, r5
 800afd6:	1d72      	adds	r2, r6, #5
 800afd8:	4620      	mov	r0, r4
 800afda:	0092      	lsls	r2, r2, #2
 800afdc:	f000 fc94 	bl	800b908 <_calloc_r>
 800afe0:	b160      	cbz	r0, 800affc <_Balloc+0x64>
 800afe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afe6:	e00e      	b.n	800b006 <_Balloc+0x6e>
 800afe8:	2221      	movs	r2, #33	; 0x21
 800afea:	2104      	movs	r1, #4
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fc8b 	bl	800b908 <_calloc_r>
 800aff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aff4:	60f0      	str	r0, [r6, #12]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e4      	bne.n	800afc6 <_Balloc+0x2e>
 800affc:	2000      	movs	r0, #0
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	6802      	ldr	r2, [r0, #0]
 800b002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b006:	2300      	movs	r3, #0
 800b008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b00c:	e7f7      	b.n	800affe <_Balloc+0x66>
 800b00e:	bf00      	nop
 800b010:	0800c916 	.word	0x0800c916
 800b014:	0800ca14 	.word	0x0800ca14

0800b018 <_Bfree>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b01c:	4605      	mov	r5, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b976      	cbnz	r6, 800b040 <_Bfree+0x28>
 800b022:	2010      	movs	r0, #16
 800b024:	f7ff ff84 	bl	800af30 <malloc>
 800b028:	4602      	mov	r2, r0
 800b02a:	6268      	str	r0, [r5, #36]	; 0x24
 800b02c:	b920      	cbnz	r0, 800b038 <_Bfree+0x20>
 800b02e:	218a      	movs	r1, #138	; 0x8a
 800b030:	4b08      	ldr	r3, [pc, #32]	; (800b054 <_Bfree+0x3c>)
 800b032:	4809      	ldr	r0, [pc, #36]	; (800b058 <_Bfree+0x40>)
 800b034:	f000 fe5a 	bl	800bcec <__assert_func>
 800b038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b03c:	6006      	str	r6, [r0, #0]
 800b03e:	60c6      	str	r6, [r0, #12]
 800b040:	b13c      	cbz	r4, 800b052 <_Bfree+0x3a>
 800b042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b044:	6862      	ldr	r2, [r4, #4]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b04c:	6021      	str	r1, [r4, #0]
 800b04e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	0800c916 	.word	0x0800c916
 800b058:	0800ca14 	.word	0x0800ca14

0800b05c <__multadd>:
 800b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b060:	4607      	mov	r7, r0
 800b062:	460c      	mov	r4, r1
 800b064:	461e      	mov	r6, r3
 800b066:	2000      	movs	r0, #0
 800b068:	690d      	ldr	r5, [r1, #16]
 800b06a:	f101 0c14 	add.w	ip, r1, #20
 800b06e:	f8dc 3000 	ldr.w	r3, [ip]
 800b072:	3001      	adds	r0, #1
 800b074:	b299      	uxth	r1, r3
 800b076:	fb02 6101 	mla	r1, r2, r1, r6
 800b07a:	0c1e      	lsrs	r6, r3, #16
 800b07c:	0c0b      	lsrs	r3, r1, #16
 800b07e:	fb02 3306 	mla	r3, r2, r6, r3
 800b082:	b289      	uxth	r1, r1
 800b084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b088:	4285      	cmp	r5, r0
 800b08a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b08e:	f84c 1b04 	str.w	r1, [ip], #4
 800b092:	dcec      	bgt.n	800b06e <__multadd+0x12>
 800b094:	b30e      	cbz	r6, 800b0da <__multadd+0x7e>
 800b096:	68a3      	ldr	r3, [r4, #8]
 800b098:	42ab      	cmp	r3, r5
 800b09a:	dc19      	bgt.n	800b0d0 <__multadd+0x74>
 800b09c:	6861      	ldr	r1, [r4, #4]
 800b09e:	4638      	mov	r0, r7
 800b0a0:	3101      	adds	r1, #1
 800b0a2:	f7ff ff79 	bl	800af98 <_Balloc>
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	b928      	cbnz	r0, 800b0b6 <__multadd+0x5a>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	21b5      	movs	r1, #181	; 0xb5
 800b0ae:	4b0c      	ldr	r3, [pc, #48]	; (800b0e0 <__multadd+0x84>)
 800b0b0:	480c      	ldr	r0, [pc, #48]	; (800b0e4 <__multadd+0x88>)
 800b0b2:	f000 fe1b 	bl	800bcec <__assert_func>
 800b0b6:	6922      	ldr	r2, [r4, #16]
 800b0b8:	f104 010c 	add.w	r1, r4, #12
 800b0bc:	3202      	adds	r2, #2
 800b0be:	0092      	lsls	r2, r2, #2
 800b0c0:	300c      	adds	r0, #12
 800b0c2:	f7fc fdd6 	bl	8007c72 <memcpy>
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7ff ffa5 	bl	800b018 <_Bfree>
 800b0ce:	4644      	mov	r4, r8
 800b0d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0d4:	3501      	adds	r5, #1
 800b0d6:	615e      	str	r6, [r3, #20]
 800b0d8:	6125      	str	r5, [r4, #16]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e0:	0800c988 	.word	0x0800c988
 800b0e4:	0800ca14 	.word	0x0800ca14

0800b0e8 <__s2b>:
 800b0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	4615      	mov	r5, r2
 800b0ee:	2209      	movs	r2, #9
 800b0f0:	461f      	mov	r7, r3
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	2100      	movs	r1, #0
 800b100:	429a      	cmp	r2, r3
 800b102:	db09      	blt.n	800b118 <__s2b+0x30>
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff ff47 	bl	800af98 <_Balloc>
 800b10a:	b940      	cbnz	r0, 800b11e <__s2b+0x36>
 800b10c:	4602      	mov	r2, r0
 800b10e:	21ce      	movs	r1, #206	; 0xce
 800b110:	4b18      	ldr	r3, [pc, #96]	; (800b174 <__s2b+0x8c>)
 800b112:	4819      	ldr	r0, [pc, #100]	; (800b178 <__s2b+0x90>)
 800b114:	f000 fdea 	bl	800bcec <__assert_func>
 800b118:	0052      	lsls	r2, r2, #1
 800b11a:	3101      	adds	r1, #1
 800b11c:	e7f0      	b.n	800b100 <__s2b+0x18>
 800b11e:	9b08      	ldr	r3, [sp, #32]
 800b120:	2d09      	cmp	r5, #9
 800b122:	6143      	str	r3, [r0, #20]
 800b124:	f04f 0301 	mov.w	r3, #1
 800b128:	6103      	str	r3, [r0, #16]
 800b12a:	dd16      	ble.n	800b15a <__s2b+0x72>
 800b12c:	f104 0909 	add.w	r9, r4, #9
 800b130:	46c8      	mov	r8, r9
 800b132:	442c      	add	r4, r5
 800b134:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b138:	4601      	mov	r1, r0
 800b13a:	220a      	movs	r2, #10
 800b13c:	4630      	mov	r0, r6
 800b13e:	3b30      	subs	r3, #48	; 0x30
 800b140:	f7ff ff8c 	bl	800b05c <__multadd>
 800b144:	45a0      	cmp	r8, r4
 800b146:	d1f5      	bne.n	800b134 <__s2b+0x4c>
 800b148:	f1a5 0408 	sub.w	r4, r5, #8
 800b14c:	444c      	add	r4, r9
 800b14e:	1b2d      	subs	r5, r5, r4
 800b150:	1963      	adds	r3, r4, r5
 800b152:	42bb      	cmp	r3, r7
 800b154:	db04      	blt.n	800b160 <__s2b+0x78>
 800b156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15a:	2509      	movs	r5, #9
 800b15c:	340a      	adds	r4, #10
 800b15e:	e7f6      	b.n	800b14e <__s2b+0x66>
 800b160:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b164:	4601      	mov	r1, r0
 800b166:	220a      	movs	r2, #10
 800b168:	4630      	mov	r0, r6
 800b16a:	3b30      	subs	r3, #48	; 0x30
 800b16c:	f7ff ff76 	bl	800b05c <__multadd>
 800b170:	e7ee      	b.n	800b150 <__s2b+0x68>
 800b172:	bf00      	nop
 800b174:	0800c988 	.word	0x0800c988
 800b178:	0800ca14 	.word	0x0800ca14

0800b17c <__hi0bits>:
 800b17c:	0c02      	lsrs	r2, r0, #16
 800b17e:	0412      	lsls	r2, r2, #16
 800b180:	4603      	mov	r3, r0
 800b182:	b9ca      	cbnz	r2, 800b1b8 <__hi0bits+0x3c>
 800b184:	0403      	lsls	r3, r0, #16
 800b186:	2010      	movs	r0, #16
 800b188:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b18c:	bf04      	itt	eq
 800b18e:	021b      	lsleq	r3, r3, #8
 800b190:	3008      	addeq	r0, #8
 800b192:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b196:	bf04      	itt	eq
 800b198:	011b      	lsleq	r3, r3, #4
 800b19a:	3004      	addeq	r0, #4
 800b19c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b1a0:	bf04      	itt	eq
 800b1a2:	009b      	lsleq	r3, r3, #2
 800b1a4:	3002      	addeq	r0, #2
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	db05      	blt.n	800b1b6 <__hi0bits+0x3a>
 800b1aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b1ae:	f100 0001 	add.w	r0, r0, #1
 800b1b2:	bf08      	it	eq
 800b1b4:	2020      	moveq	r0, #32
 800b1b6:	4770      	bx	lr
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	e7e5      	b.n	800b188 <__hi0bits+0xc>

0800b1bc <__lo0bits>:
 800b1bc:	6803      	ldr	r3, [r0, #0]
 800b1be:	4602      	mov	r2, r0
 800b1c0:	f013 0007 	ands.w	r0, r3, #7
 800b1c4:	d00b      	beq.n	800b1de <__lo0bits+0x22>
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	d421      	bmi.n	800b20e <__lo0bits+0x52>
 800b1ca:	0798      	lsls	r0, r3, #30
 800b1cc:	bf49      	itett	mi
 800b1ce:	085b      	lsrmi	r3, r3, #1
 800b1d0:	089b      	lsrpl	r3, r3, #2
 800b1d2:	2001      	movmi	r0, #1
 800b1d4:	6013      	strmi	r3, [r2, #0]
 800b1d6:	bf5c      	itt	pl
 800b1d8:	2002      	movpl	r0, #2
 800b1da:	6013      	strpl	r3, [r2, #0]
 800b1dc:	4770      	bx	lr
 800b1de:	b299      	uxth	r1, r3
 800b1e0:	b909      	cbnz	r1, 800b1e6 <__lo0bits+0x2a>
 800b1e2:	2010      	movs	r0, #16
 800b1e4:	0c1b      	lsrs	r3, r3, #16
 800b1e6:	b2d9      	uxtb	r1, r3
 800b1e8:	b909      	cbnz	r1, 800b1ee <__lo0bits+0x32>
 800b1ea:	3008      	adds	r0, #8
 800b1ec:	0a1b      	lsrs	r3, r3, #8
 800b1ee:	0719      	lsls	r1, r3, #28
 800b1f0:	bf04      	itt	eq
 800b1f2:	091b      	lsreq	r3, r3, #4
 800b1f4:	3004      	addeq	r0, #4
 800b1f6:	0799      	lsls	r1, r3, #30
 800b1f8:	bf04      	itt	eq
 800b1fa:	089b      	lsreq	r3, r3, #2
 800b1fc:	3002      	addeq	r0, #2
 800b1fe:	07d9      	lsls	r1, r3, #31
 800b200:	d403      	bmi.n	800b20a <__lo0bits+0x4e>
 800b202:	085b      	lsrs	r3, r3, #1
 800b204:	f100 0001 	add.w	r0, r0, #1
 800b208:	d003      	beq.n	800b212 <__lo0bits+0x56>
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	4770      	bx	lr
 800b20e:	2000      	movs	r0, #0
 800b210:	4770      	bx	lr
 800b212:	2020      	movs	r0, #32
 800b214:	4770      	bx	lr
	...

0800b218 <__i2b>:
 800b218:	b510      	push	{r4, lr}
 800b21a:	460c      	mov	r4, r1
 800b21c:	2101      	movs	r1, #1
 800b21e:	f7ff febb 	bl	800af98 <_Balloc>
 800b222:	4602      	mov	r2, r0
 800b224:	b928      	cbnz	r0, 800b232 <__i2b+0x1a>
 800b226:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b22a:	4b04      	ldr	r3, [pc, #16]	; (800b23c <__i2b+0x24>)
 800b22c:	4804      	ldr	r0, [pc, #16]	; (800b240 <__i2b+0x28>)
 800b22e:	f000 fd5d 	bl	800bcec <__assert_func>
 800b232:	2301      	movs	r3, #1
 800b234:	6144      	str	r4, [r0, #20]
 800b236:	6103      	str	r3, [r0, #16]
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	bf00      	nop
 800b23c:	0800c988 	.word	0x0800c988
 800b240:	0800ca14 	.word	0x0800ca14

0800b244 <__multiply>:
 800b244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b248:	4691      	mov	r9, r2
 800b24a:	690a      	ldr	r2, [r1, #16]
 800b24c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b250:	460c      	mov	r4, r1
 800b252:	429a      	cmp	r2, r3
 800b254:	bfbe      	ittt	lt
 800b256:	460b      	movlt	r3, r1
 800b258:	464c      	movlt	r4, r9
 800b25a:	4699      	movlt	r9, r3
 800b25c:	6927      	ldr	r7, [r4, #16]
 800b25e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b262:	68a3      	ldr	r3, [r4, #8]
 800b264:	6861      	ldr	r1, [r4, #4]
 800b266:	eb07 060a 	add.w	r6, r7, sl
 800b26a:	42b3      	cmp	r3, r6
 800b26c:	b085      	sub	sp, #20
 800b26e:	bfb8      	it	lt
 800b270:	3101      	addlt	r1, #1
 800b272:	f7ff fe91 	bl	800af98 <_Balloc>
 800b276:	b930      	cbnz	r0, 800b286 <__multiply+0x42>
 800b278:	4602      	mov	r2, r0
 800b27a:	f240 115d 	movw	r1, #349	; 0x15d
 800b27e:	4b43      	ldr	r3, [pc, #268]	; (800b38c <__multiply+0x148>)
 800b280:	4843      	ldr	r0, [pc, #268]	; (800b390 <__multiply+0x14c>)
 800b282:	f000 fd33 	bl	800bcec <__assert_func>
 800b286:	f100 0514 	add.w	r5, r0, #20
 800b28a:	462b      	mov	r3, r5
 800b28c:	2200      	movs	r2, #0
 800b28e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b292:	4543      	cmp	r3, r8
 800b294:	d321      	bcc.n	800b2da <__multiply+0x96>
 800b296:	f104 0314 	add.w	r3, r4, #20
 800b29a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b29e:	f109 0314 	add.w	r3, r9, #20
 800b2a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2a6:	9202      	str	r2, [sp, #8]
 800b2a8:	1b3a      	subs	r2, r7, r4
 800b2aa:	3a15      	subs	r2, #21
 800b2ac:	f022 0203 	bic.w	r2, r2, #3
 800b2b0:	3204      	adds	r2, #4
 800b2b2:	f104 0115 	add.w	r1, r4, #21
 800b2b6:	428f      	cmp	r7, r1
 800b2b8:	bf38      	it	cc
 800b2ba:	2204      	movcc	r2, #4
 800b2bc:	9201      	str	r2, [sp, #4]
 800b2be:	9a02      	ldr	r2, [sp, #8]
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d80c      	bhi.n	800b2e0 <__multiply+0x9c>
 800b2c6:	2e00      	cmp	r6, #0
 800b2c8:	dd03      	ble.n	800b2d2 <__multiply+0x8e>
 800b2ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d059      	beq.n	800b386 <__multiply+0x142>
 800b2d2:	6106      	str	r6, [r0, #16]
 800b2d4:	b005      	add	sp, #20
 800b2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2da:	f843 2b04 	str.w	r2, [r3], #4
 800b2de:	e7d8      	b.n	800b292 <__multiply+0x4e>
 800b2e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2e4:	f1ba 0f00 	cmp.w	sl, #0
 800b2e8:	d023      	beq.n	800b332 <__multiply+0xee>
 800b2ea:	46a9      	mov	r9, r5
 800b2ec:	f04f 0c00 	mov.w	ip, #0
 800b2f0:	f104 0e14 	add.w	lr, r4, #20
 800b2f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2f8:	f8d9 1000 	ldr.w	r1, [r9]
 800b2fc:	fa1f fb82 	uxth.w	fp, r2
 800b300:	b289      	uxth	r1, r1
 800b302:	fb0a 110b 	mla	r1, sl, fp, r1
 800b306:	4461      	add	r1, ip
 800b308:	f8d9 c000 	ldr.w	ip, [r9]
 800b30c:	0c12      	lsrs	r2, r2, #16
 800b30e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b312:	fb0a c202 	mla	r2, sl, r2, ip
 800b316:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b31a:	b289      	uxth	r1, r1
 800b31c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b320:	4577      	cmp	r7, lr
 800b322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b326:	f849 1b04 	str.w	r1, [r9], #4
 800b32a:	d8e3      	bhi.n	800b2f4 <__multiply+0xb0>
 800b32c:	9a01      	ldr	r2, [sp, #4]
 800b32e:	f845 c002 	str.w	ip, [r5, r2]
 800b332:	9a03      	ldr	r2, [sp, #12]
 800b334:	3304      	adds	r3, #4
 800b336:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b33a:	f1b9 0f00 	cmp.w	r9, #0
 800b33e:	d020      	beq.n	800b382 <__multiply+0x13e>
 800b340:	46ae      	mov	lr, r5
 800b342:	f04f 0a00 	mov.w	sl, #0
 800b346:	6829      	ldr	r1, [r5, #0]
 800b348:	f104 0c14 	add.w	ip, r4, #20
 800b34c:	f8bc b000 	ldrh.w	fp, [ip]
 800b350:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b354:	b289      	uxth	r1, r1
 800b356:	fb09 220b 	mla	r2, r9, fp, r2
 800b35a:	4492      	add	sl, r2
 800b35c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b360:	f84e 1b04 	str.w	r1, [lr], #4
 800b364:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b368:	f8be 1000 	ldrh.w	r1, [lr]
 800b36c:	0c12      	lsrs	r2, r2, #16
 800b36e:	fb09 1102 	mla	r1, r9, r2, r1
 800b372:	4567      	cmp	r7, ip
 800b374:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b378:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b37c:	d8e6      	bhi.n	800b34c <__multiply+0x108>
 800b37e:	9a01      	ldr	r2, [sp, #4]
 800b380:	50a9      	str	r1, [r5, r2]
 800b382:	3504      	adds	r5, #4
 800b384:	e79b      	b.n	800b2be <__multiply+0x7a>
 800b386:	3e01      	subs	r6, #1
 800b388:	e79d      	b.n	800b2c6 <__multiply+0x82>
 800b38a:	bf00      	nop
 800b38c:	0800c988 	.word	0x0800c988
 800b390:	0800ca14 	.word	0x0800ca14

0800b394 <__pow5mult>:
 800b394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b398:	4615      	mov	r5, r2
 800b39a:	f012 0203 	ands.w	r2, r2, #3
 800b39e:	4606      	mov	r6, r0
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	d007      	beq.n	800b3b4 <__pow5mult+0x20>
 800b3a4:	4c25      	ldr	r4, [pc, #148]	; (800b43c <__pow5mult+0xa8>)
 800b3a6:	3a01      	subs	r2, #1
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3ae:	f7ff fe55 	bl	800b05c <__multadd>
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	10ad      	asrs	r5, r5, #2
 800b3b6:	d03d      	beq.n	800b434 <__pow5mult+0xa0>
 800b3b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3ba:	b97c      	cbnz	r4, 800b3dc <__pow5mult+0x48>
 800b3bc:	2010      	movs	r0, #16
 800b3be:	f7ff fdb7 	bl	800af30 <malloc>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b3c6:	b928      	cbnz	r0, 800b3d4 <__pow5mult+0x40>
 800b3c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3cc:	4b1c      	ldr	r3, [pc, #112]	; (800b440 <__pow5mult+0xac>)
 800b3ce:	481d      	ldr	r0, [pc, #116]	; (800b444 <__pow5mult+0xb0>)
 800b3d0:	f000 fc8c 	bl	800bcec <__assert_func>
 800b3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3d8:	6004      	str	r4, [r0, #0]
 800b3da:	60c4      	str	r4, [r0, #12]
 800b3dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3e4:	b94c      	cbnz	r4, 800b3fa <__pow5mult+0x66>
 800b3e6:	f240 2171 	movw	r1, #625	; 0x271
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ff14 	bl	800b218 <__i2b>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3f8:	6003      	str	r3, [r0, #0]
 800b3fa:	f04f 0900 	mov.w	r9, #0
 800b3fe:	07eb      	lsls	r3, r5, #31
 800b400:	d50a      	bpl.n	800b418 <__pow5mult+0x84>
 800b402:	4639      	mov	r1, r7
 800b404:	4622      	mov	r2, r4
 800b406:	4630      	mov	r0, r6
 800b408:	f7ff ff1c 	bl	800b244 <__multiply>
 800b40c:	4680      	mov	r8, r0
 800b40e:	4639      	mov	r1, r7
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff fe01 	bl	800b018 <_Bfree>
 800b416:	4647      	mov	r7, r8
 800b418:	106d      	asrs	r5, r5, #1
 800b41a:	d00b      	beq.n	800b434 <__pow5mult+0xa0>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	b938      	cbnz	r0, 800b430 <__pow5mult+0x9c>
 800b420:	4622      	mov	r2, r4
 800b422:	4621      	mov	r1, r4
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff ff0d 	bl	800b244 <__multiply>
 800b42a:	6020      	str	r0, [r4, #0]
 800b42c:	f8c0 9000 	str.w	r9, [r0]
 800b430:	4604      	mov	r4, r0
 800b432:	e7e4      	b.n	800b3fe <__pow5mult+0x6a>
 800b434:	4638      	mov	r0, r7
 800b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43a:	bf00      	nop
 800b43c:	0800cb60 	.word	0x0800cb60
 800b440:	0800c916 	.word	0x0800c916
 800b444:	0800ca14 	.word	0x0800ca14

0800b448 <__lshift>:
 800b448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44c:	460c      	mov	r4, r1
 800b44e:	4607      	mov	r7, r0
 800b450:	4691      	mov	r9, r2
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	6849      	ldr	r1, [r1, #4]
 800b456:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b460:	f108 0601 	add.w	r6, r8, #1
 800b464:	42b3      	cmp	r3, r6
 800b466:	db0b      	blt.n	800b480 <__lshift+0x38>
 800b468:	4638      	mov	r0, r7
 800b46a:	f7ff fd95 	bl	800af98 <_Balloc>
 800b46e:	4605      	mov	r5, r0
 800b470:	b948      	cbnz	r0, 800b486 <__lshift+0x3e>
 800b472:	4602      	mov	r2, r0
 800b474:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b478:	4b29      	ldr	r3, [pc, #164]	; (800b520 <__lshift+0xd8>)
 800b47a:	482a      	ldr	r0, [pc, #168]	; (800b524 <__lshift+0xdc>)
 800b47c:	f000 fc36 	bl	800bcec <__assert_func>
 800b480:	3101      	adds	r1, #1
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	e7ee      	b.n	800b464 <__lshift+0x1c>
 800b486:	2300      	movs	r3, #0
 800b488:	f100 0114 	add.w	r1, r0, #20
 800b48c:	f100 0210 	add.w	r2, r0, #16
 800b490:	4618      	mov	r0, r3
 800b492:	4553      	cmp	r3, sl
 800b494:	db37      	blt.n	800b506 <__lshift+0xbe>
 800b496:	6920      	ldr	r0, [r4, #16]
 800b498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b49c:	f104 0314 	add.w	r3, r4, #20
 800b4a0:	f019 091f 	ands.w	r9, r9, #31
 800b4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b4ac:	d02f      	beq.n	800b50e <__lshift+0xc6>
 800b4ae:	468a      	mov	sl, r1
 800b4b0:	f04f 0c00 	mov.w	ip, #0
 800b4b4:	f1c9 0e20 	rsb	lr, r9, #32
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	fa02 f209 	lsl.w	r2, r2, r9
 800b4be:	ea42 020c 	orr.w	r2, r2, ip
 800b4c2:	f84a 2b04 	str.w	r2, [sl], #4
 800b4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ca:	4298      	cmp	r0, r3
 800b4cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4d0:	d8f2      	bhi.n	800b4b8 <__lshift+0x70>
 800b4d2:	1b03      	subs	r3, r0, r4
 800b4d4:	3b15      	subs	r3, #21
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	3304      	adds	r3, #4
 800b4dc:	f104 0215 	add.w	r2, r4, #21
 800b4e0:	4290      	cmp	r0, r2
 800b4e2:	bf38      	it	cc
 800b4e4:	2304      	movcc	r3, #4
 800b4e6:	f841 c003 	str.w	ip, [r1, r3]
 800b4ea:	f1bc 0f00 	cmp.w	ip, #0
 800b4ee:	d001      	beq.n	800b4f4 <__lshift+0xac>
 800b4f0:	f108 0602 	add.w	r6, r8, #2
 800b4f4:	3e01      	subs	r6, #1
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	612e      	str	r6, [r5, #16]
 800b4fc:	f7ff fd8c 	bl	800b018 <_Bfree>
 800b500:	4628      	mov	r0, r5
 800b502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b506:	f842 0f04 	str.w	r0, [r2, #4]!
 800b50a:	3301      	adds	r3, #1
 800b50c:	e7c1      	b.n	800b492 <__lshift+0x4a>
 800b50e:	3904      	subs	r1, #4
 800b510:	f853 2b04 	ldr.w	r2, [r3], #4
 800b514:	4298      	cmp	r0, r3
 800b516:	f841 2f04 	str.w	r2, [r1, #4]!
 800b51a:	d8f9      	bhi.n	800b510 <__lshift+0xc8>
 800b51c:	e7ea      	b.n	800b4f4 <__lshift+0xac>
 800b51e:	bf00      	nop
 800b520:	0800c988 	.word	0x0800c988
 800b524:	0800ca14 	.word	0x0800ca14

0800b528 <__mcmp>:
 800b528:	4603      	mov	r3, r0
 800b52a:	690a      	ldr	r2, [r1, #16]
 800b52c:	6900      	ldr	r0, [r0, #16]
 800b52e:	b530      	push	{r4, r5, lr}
 800b530:	1a80      	subs	r0, r0, r2
 800b532:	d10d      	bne.n	800b550 <__mcmp+0x28>
 800b534:	3314      	adds	r3, #20
 800b536:	3114      	adds	r1, #20
 800b538:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b53c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b540:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b544:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b548:	4295      	cmp	r5, r2
 800b54a:	d002      	beq.n	800b552 <__mcmp+0x2a>
 800b54c:	d304      	bcc.n	800b558 <__mcmp+0x30>
 800b54e:	2001      	movs	r0, #1
 800b550:	bd30      	pop	{r4, r5, pc}
 800b552:	42a3      	cmp	r3, r4
 800b554:	d3f4      	bcc.n	800b540 <__mcmp+0x18>
 800b556:	e7fb      	b.n	800b550 <__mcmp+0x28>
 800b558:	f04f 30ff 	mov.w	r0, #4294967295
 800b55c:	e7f8      	b.n	800b550 <__mcmp+0x28>
	...

0800b560 <__mdiff>:
 800b560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	460d      	mov	r5, r1
 800b566:	4607      	mov	r7, r0
 800b568:	4611      	mov	r1, r2
 800b56a:	4628      	mov	r0, r5
 800b56c:	4614      	mov	r4, r2
 800b56e:	f7ff ffdb 	bl	800b528 <__mcmp>
 800b572:	1e06      	subs	r6, r0, #0
 800b574:	d111      	bne.n	800b59a <__mdiff+0x3a>
 800b576:	4631      	mov	r1, r6
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff fd0d 	bl	800af98 <_Balloc>
 800b57e:	4602      	mov	r2, r0
 800b580:	b928      	cbnz	r0, 800b58e <__mdiff+0x2e>
 800b582:	f240 2132 	movw	r1, #562	; 0x232
 800b586:	4b3a      	ldr	r3, [pc, #232]	; (800b670 <__mdiff+0x110>)
 800b588:	483a      	ldr	r0, [pc, #232]	; (800b674 <__mdiff+0x114>)
 800b58a:	f000 fbaf 	bl	800bcec <__assert_func>
 800b58e:	2301      	movs	r3, #1
 800b590:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b594:	4610      	mov	r0, r2
 800b596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59a:	bfa4      	itt	ge
 800b59c:	4623      	movge	r3, r4
 800b59e:	462c      	movge	r4, r5
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	6861      	ldr	r1, [r4, #4]
 800b5a4:	bfa6      	itte	ge
 800b5a6:	461d      	movge	r5, r3
 800b5a8:	2600      	movge	r6, #0
 800b5aa:	2601      	movlt	r6, #1
 800b5ac:	f7ff fcf4 	bl	800af98 <_Balloc>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	b918      	cbnz	r0, 800b5bc <__mdiff+0x5c>
 800b5b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5b8:	4b2d      	ldr	r3, [pc, #180]	; (800b670 <__mdiff+0x110>)
 800b5ba:	e7e5      	b.n	800b588 <__mdiff+0x28>
 800b5bc:	f102 0814 	add.w	r8, r2, #20
 800b5c0:	46c2      	mov	sl, r8
 800b5c2:	f04f 0c00 	mov.w	ip, #0
 800b5c6:	6927      	ldr	r7, [r4, #16]
 800b5c8:	60c6      	str	r6, [r0, #12]
 800b5ca:	692e      	ldr	r6, [r5, #16]
 800b5cc:	f104 0014 	add.w	r0, r4, #20
 800b5d0:	f105 0914 	add.w	r9, r5, #20
 800b5d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b5d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5dc:	3410      	adds	r4, #16
 800b5de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b5e2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5e6:	fa1f f18b 	uxth.w	r1, fp
 800b5ea:	448c      	add	ip, r1
 800b5ec:	b299      	uxth	r1, r3
 800b5ee:	0c1b      	lsrs	r3, r3, #16
 800b5f0:	ebac 0101 	sub.w	r1, ip, r1
 800b5f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b5fc:	b289      	uxth	r1, r1
 800b5fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b602:	454e      	cmp	r6, r9
 800b604:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b608:	f84a 3b04 	str.w	r3, [sl], #4
 800b60c:	d8e7      	bhi.n	800b5de <__mdiff+0x7e>
 800b60e:	1b73      	subs	r3, r6, r5
 800b610:	3b15      	subs	r3, #21
 800b612:	f023 0303 	bic.w	r3, r3, #3
 800b616:	3515      	adds	r5, #21
 800b618:	3304      	adds	r3, #4
 800b61a:	42ae      	cmp	r6, r5
 800b61c:	bf38      	it	cc
 800b61e:	2304      	movcc	r3, #4
 800b620:	4418      	add	r0, r3
 800b622:	4443      	add	r3, r8
 800b624:	461e      	mov	r6, r3
 800b626:	4605      	mov	r5, r0
 800b628:	4575      	cmp	r5, lr
 800b62a:	d30e      	bcc.n	800b64a <__mdiff+0xea>
 800b62c:	f10e 0103 	add.w	r1, lr, #3
 800b630:	1a09      	subs	r1, r1, r0
 800b632:	f021 0103 	bic.w	r1, r1, #3
 800b636:	3803      	subs	r0, #3
 800b638:	4586      	cmp	lr, r0
 800b63a:	bf38      	it	cc
 800b63c:	2100      	movcc	r1, #0
 800b63e:	4419      	add	r1, r3
 800b640:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b644:	b18b      	cbz	r3, 800b66a <__mdiff+0x10a>
 800b646:	6117      	str	r7, [r2, #16]
 800b648:	e7a4      	b.n	800b594 <__mdiff+0x34>
 800b64a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b64e:	fa1f f188 	uxth.w	r1, r8
 800b652:	4461      	add	r1, ip
 800b654:	140c      	asrs	r4, r1, #16
 800b656:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b65a:	b289      	uxth	r1, r1
 800b65c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b660:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b664:	f846 1b04 	str.w	r1, [r6], #4
 800b668:	e7de      	b.n	800b628 <__mdiff+0xc8>
 800b66a:	3f01      	subs	r7, #1
 800b66c:	e7e8      	b.n	800b640 <__mdiff+0xe0>
 800b66e:	bf00      	nop
 800b670:	0800c988 	.word	0x0800c988
 800b674:	0800ca14 	.word	0x0800ca14

0800b678 <__ulp>:
 800b678:	4b11      	ldr	r3, [pc, #68]	; (800b6c0 <__ulp+0x48>)
 800b67a:	400b      	ands	r3, r1
 800b67c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b680:	2b00      	cmp	r3, #0
 800b682:	dd02      	ble.n	800b68a <__ulp+0x12>
 800b684:	2000      	movs	r0, #0
 800b686:	4619      	mov	r1, r3
 800b688:	4770      	bx	lr
 800b68a:	425b      	negs	r3, r3
 800b68c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b690:	f04f 0000 	mov.w	r0, #0
 800b694:	f04f 0100 	mov.w	r1, #0
 800b698:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b69c:	da04      	bge.n	800b6a8 <__ulp+0x30>
 800b69e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6a2:	fa43 f102 	asr.w	r1, r3, r2
 800b6a6:	4770      	bx	lr
 800b6a8:	f1a2 0314 	sub.w	r3, r2, #20
 800b6ac:	2b1e      	cmp	r3, #30
 800b6ae:	bfd6      	itet	le
 800b6b0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b6b4:	2301      	movgt	r3, #1
 800b6b6:	fa22 f303 	lsrle.w	r3, r2, r3
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	7ff00000 	.word	0x7ff00000

0800b6c4 <__b2d>:
 800b6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c8:	6907      	ldr	r7, [r0, #16]
 800b6ca:	f100 0914 	add.w	r9, r0, #20
 800b6ce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b6d2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b6d6:	f1a7 0804 	sub.w	r8, r7, #4
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff fd4e 	bl	800b17c <__hi0bits>
 800b6e0:	f1c0 0320 	rsb	r3, r0, #32
 800b6e4:	280a      	cmp	r0, #10
 800b6e6:	600b      	str	r3, [r1, #0]
 800b6e8:	491f      	ldr	r1, [pc, #124]	; (800b768 <__b2d+0xa4>)
 800b6ea:	dc17      	bgt.n	800b71c <__b2d+0x58>
 800b6ec:	45c1      	cmp	r9, r8
 800b6ee:	bf28      	it	cs
 800b6f0:	2200      	movcs	r2, #0
 800b6f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b6f6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b6fa:	bf38      	it	cc
 800b6fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b700:	ea43 0501 	orr.w	r5, r3, r1
 800b704:	f100 0315 	add.w	r3, r0, #21
 800b708:	fa06 f303 	lsl.w	r3, r6, r3
 800b70c:	fa22 f20c 	lsr.w	r2, r2, ip
 800b710:	ea43 0402 	orr.w	r4, r3, r2
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71c:	45c1      	cmp	r9, r8
 800b71e:	bf2e      	itee	cs
 800b720:	2200      	movcs	r2, #0
 800b722:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b726:	f1a7 0808 	subcc.w	r8, r7, #8
 800b72a:	f1b0 030b 	subs.w	r3, r0, #11
 800b72e:	d016      	beq.n	800b75e <__b2d+0x9a>
 800b730:	f1c3 0720 	rsb	r7, r3, #32
 800b734:	fa22 f107 	lsr.w	r1, r2, r7
 800b738:	45c8      	cmp	r8, r9
 800b73a:	fa06 f603 	lsl.w	r6, r6, r3
 800b73e:	ea46 0601 	orr.w	r6, r6, r1
 800b742:	bf94      	ite	ls
 800b744:	2100      	movls	r1, #0
 800b746:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b74a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b74e:	fa02 f003 	lsl.w	r0, r2, r3
 800b752:	40f9      	lsrs	r1, r7
 800b754:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b758:	ea40 0401 	orr.w	r4, r0, r1
 800b75c:	e7da      	b.n	800b714 <__b2d+0x50>
 800b75e:	4614      	mov	r4, r2
 800b760:	ea46 0501 	orr.w	r5, r6, r1
 800b764:	e7d6      	b.n	800b714 <__b2d+0x50>
 800b766:	bf00      	nop
 800b768:	3ff00000 	.word	0x3ff00000

0800b76c <__d2b>:
 800b76c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b770:	2101      	movs	r1, #1
 800b772:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b776:	4690      	mov	r8, r2
 800b778:	461d      	mov	r5, r3
 800b77a:	f7ff fc0d 	bl	800af98 <_Balloc>
 800b77e:	4604      	mov	r4, r0
 800b780:	b930      	cbnz	r0, 800b790 <__d2b+0x24>
 800b782:	4602      	mov	r2, r0
 800b784:	f240 310a 	movw	r1, #778	; 0x30a
 800b788:	4b24      	ldr	r3, [pc, #144]	; (800b81c <__d2b+0xb0>)
 800b78a:	4825      	ldr	r0, [pc, #148]	; (800b820 <__d2b+0xb4>)
 800b78c:	f000 faae 	bl	800bcec <__assert_func>
 800b790:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b794:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b798:	bb2d      	cbnz	r5, 800b7e6 <__d2b+0x7a>
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	f1b8 0300 	subs.w	r3, r8, #0
 800b7a0:	d026      	beq.n	800b7f0 <__d2b+0x84>
 800b7a2:	4668      	mov	r0, sp
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	f7ff fd09 	bl	800b1bc <__lo0bits>
 800b7aa:	9900      	ldr	r1, [sp, #0]
 800b7ac:	b1f0      	cbz	r0, 800b7ec <__d2b+0x80>
 800b7ae:	9a01      	ldr	r2, [sp, #4]
 800b7b0:	f1c0 0320 	rsb	r3, r0, #32
 800b7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b8:	430b      	orrs	r3, r1
 800b7ba:	40c2      	lsrs	r2, r0
 800b7bc:	6163      	str	r3, [r4, #20]
 800b7be:	9201      	str	r2, [sp, #4]
 800b7c0:	9b01      	ldr	r3, [sp, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bf14      	ite	ne
 800b7c6:	2102      	movne	r1, #2
 800b7c8:	2101      	moveq	r1, #1
 800b7ca:	61a3      	str	r3, [r4, #24]
 800b7cc:	6121      	str	r1, [r4, #16]
 800b7ce:	b1c5      	cbz	r5, 800b802 <__d2b+0x96>
 800b7d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7d4:	4405      	add	r5, r0
 800b7d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7da:	603d      	str	r5, [r7, #0]
 800b7dc:	6030      	str	r0, [r6, #0]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	b002      	add	sp, #8
 800b7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ea:	e7d6      	b.n	800b79a <__d2b+0x2e>
 800b7ec:	6161      	str	r1, [r4, #20]
 800b7ee:	e7e7      	b.n	800b7c0 <__d2b+0x54>
 800b7f0:	a801      	add	r0, sp, #4
 800b7f2:	f7ff fce3 	bl	800b1bc <__lo0bits>
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	9b01      	ldr	r3, [sp, #4]
 800b7fa:	6121      	str	r1, [r4, #16]
 800b7fc:	6163      	str	r3, [r4, #20]
 800b7fe:	3020      	adds	r0, #32
 800b800:	e7e5      	b.n	800b7ce <__d2b+0x62>
 800b802:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b806:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b80a:	6038      	str	r0, [r7, #0]
 800b80c:	6918      	ldr	r0, [r3, #16]
 800b80e:	f7ff fcb5 	bl	800b17c <__hi0bits>
 800b812:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b816:	6031      	str	r1, [r6, #0]
 800b818:	e7e1      	b.n	800b7de <__d2b+0x72>
 800b81a:	bf00      	nop
 800b81c:	0800c988 	.word	0x0800c988
 800b820:	0800ca14 	.word	0x0800ca14

0800b824 <__ratio>:
 800b824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	4688      	mov	r8, r1
 800b82a:	4669      	mov	r1, sp
 800b82c:	4681      	mov	r9, r0
 800b82e:	f7ff ff49 	bl	800b6c4 <__b2d>
 800b832:	460f      	mov	r7, r1
 800b834:	4604      	mov	r4, r0
 800b836:	460d      	mov	r5, r1
 800b838:	4640      	mov	r0, r8
 800b83a:	a901      	add	r1, sp, #4
 800b83c:	f7ff ff42 	bl	800b6c4 <__b2d>
 800b840:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b844:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b848:	468b      	mov	fp, r1
 800b84a:	eba3 0c02 	sub.w	ip, r3, r2
 800b84e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b852:	1a9b      	subs	r3, r3, r2
 800b854:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfd5      	itete	le
 800b85c:	460a      	movle	r2, r1
 800b85e:	462a      	movgt	r2, r5
 800b860:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b864:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b868:	bfd8      	it	le
 800b86a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b86e:	465b      	mov	r3, fp
 800b870:	4602      	mov	r2, r0
 800b872:	4639      	mov	r1, r7
 800b874:	4620      	mov	r0, r4
 800b876:	f7f4 ff59 	bl	800072c <__aeabi_ddiv>
 800b87a:	b003      	add	sp, #12
 800b87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b880 <__copybits>:
 800b880:	3901      	subs	r1, #1
 800b882:	b570      	push	{r4, r5, r6, lr}
 800b884:	1149      	asrs	r1, r1, #5
 800b886:	6914      	ldr	r4, [r2, #16]
 800b888:	3101      	adds	r1, #1
 800b88a:	f102 0314 	add.w	r3, r2, #20
 800b88e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b896:	1f05      	subs	r5, r0, #4
 800b898:	42a3      	cmp	r3, r4
 800b89a:	d30c      	bcc.n	800b8b6 <__copybits+0x36>
 800b89c:	1aa3      	subs	r3, r4, r2
 800b89e:	3b11      	subs	r3, #17
 800b8a0:	f023 0303 	bic.w	r3, r3, #3
 800b8a4:	3211      	adds	r2, #17
 800b8a6:	42a2      	cmp	r2, r4
 800b8a8:	bf88      	it	hi
 800b8aa:	2300      	movhi	r3, #0
 800b8ac:	4418      	add	r0, r3
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4288      	cmp	r0, r1
 800b8b2:	d305      	bcc.n	800b8c0 <__copybits+0x40>
 800b8b4:	bd70      	pop	{r4, r5, r6, pc}
 800b8b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8be:	e7eb      	b.n	800b898 <__copybits+0x18>
 800b8c0:	f840 3b04 	str.w	r3, [r0], #4
 800b8c4:	e7f4      	b.n	800b8b0 <__copybits+0x30>

0800b8c6 <__any_on>:
 800b8c6:	f100 0214 	add.w	r2, r0, #20
 800b8ca:	6900      	ldr	r0, [r0, #16]
 800b8cc:	114b      	asrs	r3, r1, #5
 800b8ce:	4298      	cmp	r0, r3
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	db11      	blt.n	800b8f8 <__any_on+0x32>
 800b8d4:	dd0a      	ble.n	800b8ec <__any_on+0x26>
 800b8d6:	f011 011f 	ands.w	r1, r1, #31
 800b8da:	d007      	beq.n	800b8ec <__any_on+0x26>
 800b8dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8e0:	fa24 f001 	lsr.w	r0, r4, r1
 800b8e4:	fa00 f101 	lsl.w	r1, r0, r1
 800b8e8:	428c      	cmp	r4, r1
 800b8ea:	d10b      	bne.n	800b904 <__any_on+0x3e>
 800b8ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d803      	bhi.n	800b8fc <__any_on+0x36>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	bd10      	pop	{r4, pc}
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	e7f7      	b.n	800b8ec <__any_on+0x26>
 800b8fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b900:	2900      	cmp	r1, #0
 800b902:	d0f5      	beq.n	800b8f0 <__any_on+0x2a>
 800b904:	2001      	movs	r0, #1
 800b906:	e7f6      	b.n	800b8f6 <__any_on+0x30>

0800b908 <_calloc_r>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	fba1 5402 	umull	r5, r4, r1, r2
 800b90e:	b934      	cbnz	r4, 800b91e <_calloc_r+0x16>
 800b910:	4629      	mov	r1, r5
 800b912:	f7fc f9e5 	bl	8007ce0 <_malloc_r>
 800b916:	4606      	mov	r6, r0
 800b918:	b928      	cbnz	r0, 800b926 <_calloc_r+0x1e>
 800b91a:	4630      	mov	r0, r6
 800b91c:	bd70      	pop	{r4, r5, r6, pc}
 800b91e:	220c      	movs	r2, #12
 800b920:	2600      	movs	r6, #0
 800b922:	6002      	str	r2, [r0, #0]
 800b924:	e7f9      	b.n	800b91a <_calloc_r+0x12>
 800b926:	462a      	mov	r2, r5
 800b928:	4621      	mov	r1, r4
 800b92a:	f7fc f9b0 	bl	8007c8e <memset>
 800b92e:	e7f4      	b.n	800b91a <_calloc_r+0x12>

0800b930 <_free_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4605      	mov	r5, r0
 800b934:	2900      	cmp	r1, #0
 800b936:	d040      	beq.n	800b9ba <_free_r+0x8a>
 800b938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b93c:	1f0c      	subs	r4, r1, #4
 800b93e:	2b00      	cmp	r3, #0
 800b940:	bfb8      	it	lt
 800b942:	18e4      	addlt	r4, r4, r3
 800b944:	f7ff fb1c 	bl	800af80 <__malloc_lock>
 800b948:	4a1c      	ldr	r2, [pc, #112]	; (800b9bc <_free_r+0x8c>)
 800b94a:	6813      	ldr	r3, [r2, #0]
 800b94c:	b933      	cbnz	r3, 800b95c <_free_r+0x2c>
 800b94e:	6063      	str	r3, [r4, #4]
 800b950:	6014      	str	r4, [r2, #0]
 800b952:	4628      	mov	r0, r5
 800b954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b958:	f7ff bb18 	b.w	800af8c <__malloc_unlock>
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d908      	bls.n	800b972 <_free_r+0x42>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	1821      	adds	r1, r4, r0
 800b964:	428b      	cmp	r3, r1
 800b966:	bf01      	itttt	eq
 800b968:	6819      	ldreq	r1, [r3, #0]
 800b96a:	685b      	ldreq	r3, [r3, #4]
 800b96c:	1809      	addeq	r1, r1, r0
 800b96e:	6021      	streq	r1, [r4, #0]
 800b970:	e7ed      	b.n	800b94e <_free_r+0x1e>
 800b972:	461a      	mov	r2, r3
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	b10b      	cbz	r3, 800b97c <_free_r+0x4c>
 800b978:	42a3      	cmp	r3, r4
 800b97a:	d9fa      	bls.n	800b972 <_free_r+0x42>
 800b97c:	6811      	ldr	r1, [r2, #0]
 800b97e:	1850      	adds	r0, r2, r1
 800b980:	42a0      	cmp	r0, r4
 800b982:	d10b      	bne.n	800b99c <_free_r+0x6c>
 800b984:	6820      	ldr	r0, [r4, #0]
 800b986:	4401      	add	r1, r0
 800b988:	1850      	adds	r0, r2, r1
 800b98a:	4283      	cmp	r3, r0
 800b98c:	6011      	str	r1, [r2, #0]
 800b98e:	d1e0      	bne.n	800b952 <_free_r+0x22>
 800b990:	6818      	ldr	r0, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	4401      	add	r1, r0
 800b996:	6011      	str	r1, [r2, #0]
 800b998:	6053      	str	r3, [r2, #4]
 800b99a:	e7da      	b.n	800b952 <_free_r+0x22>
 800b99c:	d902      	bls.n	800b9a4 <_free_r+0x74>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	e7d6      	b.n	800b952 <_free_r+0x22>
 800b9a4:	6820      	ldr	r0, [r4, #0]
 800b9a6:	1821      	adds	r1, r4, r0
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf01      	itttt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	1809      	addeq	r1, r1, r0
 800b9b2:	6021      	streq	r1, [r4, #0]
 800b9b4:	6063      	str	r3, [r4, #4]
 800b9b6:	6054      	str	r4, [r2, #4]
 800b9b8:	e7cb      	b.n	800b952 <_free_r+0x22>
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	200031d0 	.word	0x200031d0

0800b9c0 <__ssputs_r>:
 800b9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c4:	688e      	ldr	r6, [r1, #8]
 800b9c6:	4682      	mov	sl, r0
 800b9c8:	429e      	cmp	r6, r3
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	4690      	mov	r8, r2
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	d838      	bhi.n	800ba44 <__ssputs_r+0x84>
 800b9d2:	898a      	ldrh	r2, [r1, #12]
 800b9d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9d8:	d032      	beq.n	800ba40 <__ssputs_r+0x80>
 800b9da:	6825      	ldr	r5, [r4, #0]
 800b9dc:	6909      	ldr	r1, [r1, #16]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	eba5 0901 	sub.w	r9, r5, r1
 800b9e4:	6965      	ldr	r5, [r4, #20]
 800b9e6:	444b      	add	r3, r9
 800b9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9f0:	106d      	asrs	r5, r5, #1
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	bf38      	it	cc
 800b9f6:	461d      	movcc	r5, r3
 800b9f8:	0553      	lsls	r3, r2, #21
 800b9fa:	d531      	bpl.n	800ba60 <__ssputs_r+0xa0>
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	f7fc f96f 	bl	8007ce0 <_malloc_r>
 800ba02:	4606      	mov	r6, r0
 800ba04:	b950      	cbnz	r0, 800ba1c <__ssputs_r+0x5c>
 800ba06:	230c      	movs	r3, #12
 800ba08:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0c:	f8ca 3000 	str.w	r3, [sl]
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba16:	81a3      	strh	r3, [r4, #12]
 800ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1c:	464a      	mov	r2, r9
 800ba1e:	6921      	ldr	r1, [r4, #16]
 800ba20:	f7fc f927 	bl	8007c72 <memcpy>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	6126      	str	r6, [r4, #16]
 800ba32:	444e      	add	r6, r9
 800ba34:	6026      	str	r6, [r4, #0]
 800ba36:	463e      	mov	r6, r7
 800ba38:	6165      	str	r5, [r4, #20]
 800ba3a:	eba5 0509 	sub.w	r5, r5, r9
 800ba3e:	60a5      	str	r5, [r4, #8]
 800ba40:	42be      	cmp	r6, r7
 800ba42:	d900      	bls.n	800ba46 <__ssputs_r+0x86>
 800ba44:	463e      	mov	r6, r7
 800ba46:	4632      	mov	r2, r6
 800ba48:	4641      	mov	r1, r8
 800ba4a:	6820      	ldr	r0, [r4, #0]
 800ba4c:	f000 f97e 	bl	800bd4c <memmove>
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	2000      	movs	r0, #0
 800ba54:	1b9b      	subs	r3, r3, r6
 800ba56:	60a3      	str	r3, [r4, #8]
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	4433      	add	r3, r6
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	e7db      	b.n	800ba18 <__ssputs_r+0x58>
 800ba60:	462a      	mov	r2, r5
 800ba62:	f000 f98d 	bl	800bd80 <_realloc_r>
 800ba66:	4606      	mov	r6, r0
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d1e1      	bne.n	800ba30 <__ssputs_r+0x70>
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	6921      	ldr	r1, [r4, #16]
 800ba70:	f7ff ff5e 	bl	800b930 <_free_r>
 800ba74:	e7c7      	b.n	800ba06 <__ssputs_r+0x46>
	...

0800ba78 <_svfiprintf_r>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	4698      	mov	r8, r3
 800ba7e:	898b      	ldrh	r3, [r1, #12]
 800ba80:	4607      	mov	r7, r0
 800ba82:	061b      	lsls	r3, r3, #24
 800ba84:	460d      	mov	r5, r1
 800ba86:	4614      	mov	r4, r2
 800ba88:	b09d      	sub	sp, #116	; 0x74
 800ba8a:	d50e      	bpl.n	800baaa <_svfiprintf_r+0x32>
 800ba8c:	690b      	ldr	r3, [r1, #16]
 800ba8e:	b963      	cbnz	r3, 800baaa <_svfiprintf_r+0x32>
 800ba90:	2140      	movs	r1, #64	; 0x40
 800ba92:	f7fc f925 	bl	8007ce0 <_malloc_r>
 800ba96:	6028      	str	r0, [r5, #0]
 800ba98:	6128      	str	r0, [r5, #16]
 800ba9a:	b920      	cbnz	r0, 800baa6 <_svfiprintf_r+0x2e>
 800ba9c:	230c      	movs	r3, #12
 800ba9e:	603b      	str	r3, [r7, #0]
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295
 800baa4:	e0d1      	b.n	800bc4a <_svfiprintf_r+0x1d2>
 800baa6:	2340      	movs	r3, #64	; 0x40
 800baa8:	616b      	str	r3, [r5, #20]
 800baaa:	2300      	movs	r3, #0
 800baac:	9309      	str	r3, [sp, #36]	; 0x24
 800baae:	2320      	movs	r3, #32
 800bab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bab4:	2330      	movs	r3, #48	; 0x30
 800bab6:	f04f 0901 	mov.w	r9, #1
 800baba:	f8cd 800c 	str.w	r8, [sp, #12]
 800babe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc64 <_svfiprintf_r+0x1ec>
 800bac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bac6:	4623      	mov	r3, r4
 800bac8:	469a      	mov	sl, r3
 800baca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bace:	b10a      	cbz	r2, 800bad4 <_svfiprintf_r+0x5c>
 800bad0:	2a25      	cmp	r2, #37	; 0x25
 800bad2:	d1f9      	bne.n	800bac8 <_svfiprintf_r+0x50>
 800bad4:	ebba 0b04 	subs.w	fp, sl, r4
 800bad8:	d00b      	beq.n	800baf2 <_svfiprintf_r+0x7a>
 800bada:	465b      	mov	r3, fp
 800badc:	4622      	mov	r2, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	4638      	mov	r0, r7
 800bae2:	f7ff ff6d 	bl	800b9c0 <__ssputs_r>
 800bae6:	3001      	adds	r0, #1
 800bae8:	f000 80aa 	beq.w	800bc40 <_svfiprintf_r+0x1c8>
 800baec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baee:	445a      	add	r2, fp
 800baf0:	9209      	str	r2, [sp, #36]	; 0x24
 800baf2:	f89a 3000 	ldrb.w	r3, [sl]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f000 80a2 	beq.w	800bc40 <_svfiprintf_r+0x1c8>
 800bafc:	2300      	movs	r3, #0
 800bafe:	f04f 32ff 	mov.w	r2, #4294967295
 800bb02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb06:	f10a 0a01 	add.w	sl, sl, #1
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	9307      	str	r3, [sp, #28]
 800bb0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb12:	931a      	str	r3, [sp, #104]	; 0x68
 800bb14:	4654      	mov	r4, sl
 800bb16:	2205      	movs	r2, #5
 800bb18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb1c:	4851      	ldr	r0, [pc, #324]	; (800bc64 <_svfiprintf_r+0x1ec>)
 800bb1e:	f7ff fa21 	bl	800af64 <memchr>
 800bb22:	9a04      	ldr	r2, [sp, #16]
 800bb24:	b9d8      	cbnz	r0, 800bb5e <_svfiprintf_r+0xe6>
 800bb26:	06d0      	lsls	r0, r2, #27
 800bb28:	bf44      	itt	mi
 800bb2a:	2320      	movmi	r3, #32
 800bb2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb30:	0711      	lsls	r1, r2, #28
 800bb32:	bf44      	itt	mi
 800bb34:	232b      	movmi	r3, #43	; 0x2b
 800bb36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb40:	d015      	beq.n	800bb6e <_svfiprintf_r+0xf6>
 800bb42:	4654      	mov	r4, sl
 800bb44:	2000      	movs	r0, #0
 800bb46:	f04f 0c0a 	mov.w	ip, #10
 800bb4a:	9a07      	ldr	r2, [sp, #28]
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb52:	3b30      	subs	r3, #48	; 0x30
 800bb54:	2b09      	cmp	r3, #9
 800bb56:	d94e      	bls.n	800bbf6 <_svfiprintf_r+0x17e>
 800bb58:	b1b0      	cbz	r0, 800bb88 <_svfiprintf_r+0x110>
 800bb5a:	9207      	str	r2, [sp, #28]
 800bb5c:	e014      	b.n	800bb88 <_svfiprintf_r+0x110>
 800bb5e:	eba0 0308 	sub.w	r3, r0, r8
 800bb62:	fa09 f303 	lsl.w	r3, r9, r3
 800bb66:	4313      	orrs	r3, r2
 800bb68:	46a2      	mov	sl, r4
 800bb6a:	9304      	str	r3, [sp, #16]
 800bb6c:	e7d2      	b.n	800bb14 <_svfiprintf_r+0x9c>
 800bb6e:	9b03      	ldr	r3, [sp, #12]
 800bb70:	1d19      	adds	r1, r3, #4
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	9103      	str	r1, [sp, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bfbb      	ittet	lt
 800bb7a:	425b      	neglt	r3, r3
 800bb7c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb80:	9307      	strge	r3, [sp, #28]
 800bb82:	9307      	strlt	r3, [sp, #28]
 800bb84:	bfb8      	it	lt
 800bb86:	9204      	strlt	r2, [sp, #16]
 800bb88:	7823      	ldrb	r3, [r4, #0]
 800bb8a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb8c:	d10c      	bne.n	800bba8 <_svfiprintf_r+0x130>
 800bb8e:	7863      	ldrb	r3, [r4, #1]
 800bb90:	2b2a      	cmp	r3, #42	; 0x2a
 800bb92:	d135      	bne.n	800bc00 <_svfiprintf_r+0x188>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	3402      	adds	r4, #2
 800bb98:	1d1a      	adds	r2, r3, #4
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	9203      	str	r2, [sp, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	bfb8      	it	lt
 800bba2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bba6:	9305      	str	r3, [sp, #20]
 800bba8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bc68 <_svfiprintf_r+0x1f0>
 800bbac:	2203      	movs	r2, #3
 800bbae:	4650      	mov	r0, sl
 800bbb0:	7821      	ldrb	r1, [r4, #0]
 800bbb2:	f7ff f9d7 	bl	800af64 <memchr>
 800bbb6:	b140      	cbz	r0, 800bbca <_svfiprintf_r+0x152>
 800bbb8:	2340      	movs	r3, #64	; 0x40
 800bbba:	eba0 000a 	sub.w	r0, r0, sl
 800bbbe:	fa03 f000 	lsl.w	r0, r3, r0
 800bbc2:	9b04      	ldr	r3, [sp, #16]
 800bbc4:	3401      	adds	r4, #1
 800bbc6:	4303      	orrs	r3, r0
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbce:	2206      	movs	r2, #6
 800bbd0:	4826      	ldr	r0, [pc, #152]	; (800bc6c <_svfiprintf_r+0x1f4>)
 800bbd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbd6:	f7ff f9c5 	bl	800af64 <memchr>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d038      	beq.n	800bc50 <_svfiprintf_r+0x1d8>
 800bbde:	4b24      	ldr	r3, [pc, #144]	; (800bc70 <_svfiprintf_r+0x1f8>)
 800bbe0:	bb1b      	cbnz	r3, 800bc2a <_svfiprintf_r+0x1b2>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	3307      	adds	r3, #7
 800bbe6:	f023 0307 	bic.w	r3, r3, #7
 800bbea:	3308      	adds	r3, #8
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf0:	4433      	add	r3, r6
 800bbf2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf4:	e767      	b.n	800bac6 <_svfiprintf_r+0x4e>
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbfe:	e7a5      	b.n	800bb4c <_svfiprintf_r+0xd4>
 800bc00:	2300      	movs	r3, #0
 800bc02:	f04f 0c0a 	mov.w	ip, #10
 800bc06:	4619      	mov	r1, r3
 800bc08:	3401      	adds	r4, #1
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc12:	3a30      	subs	r2, #48	; 0x30
 800bc14:	2a09      	cmp	r2, #9
 800bc16:	d903      	bls.n	800bc20 <_svfiprintf_r+0x1a8>
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0c5      	beq.n	800bba8 <_svfiprintf_r+0x130>
 800bc1c:	9105      	str	r1, [sp, #20]
 800bc1e:	e7c3      	b.n	800bba8 <_svfiprintf_r+0x130>
 800bc20:	4604      	mov	r4, r0
 800bc22:	2301      	movs	r3, #1
 800bc24:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc28:	e7f0      	b.n	800bc0c <_svfiprintf_r+0x194>
 800bc2a:	ab03      	add	r3, sp, #12
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	462a      	mov	r2, r5
 800bc30:	4638      	mov	r0, r7
 800bc32:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <_svfiprintf_r+0x1fc>)
 800bc34:	a904      	add	r1, sp, #16
 800bc36:	f7fc f965 	bl	8007f04 <_printf_float>
 800bc3a:	1c42      	adds	r2, r0, #1
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	d1d6      	bne.n	800bbee <_svfiprintf_r+0x176>
 800bc40:	89ab      	ldrh	r3, [r5, #12]
 800bc42:	065b      	lsls	r3, r3, #25
 800bc44:	f53f af2c 	bmi.w	800baa0 <_svfiprintf_r+0x28>
 800bc48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc4a:	b01d      	add	sp, #116	; 0x74
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	462a      	mov	r2, r5
 800bc56:	4638      	mov	r0, r7
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <_svfiprintf_r+0x1fc>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	f7fc fbee 	bl	800843c <_printf_i>
 800bc60:	e7eb      	b.n	800bc3a <_svfiprintf_r+0x1c2>
 800bc62:	bf00      	nop
 800bc64:	0800cb6c 	.word	0x0800cb6c
 800bc68:	0800cb72 	.word	0x0800cb72
 800bc6c:	0800cb76 	.word	0x0800cb76
 800bc70:	08007f05 	.word	0x08007f05
 800bc74:	0800b9c1 	.word	0x0800b9c1

0800bc78 <_read_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	4611      	mov	r1, r2
 800bc80:	2200      	movs	r2, #0
 800bc82:	4d05      	ldr	r5, [pc, #20]	; (800bc98 <_read_r+0x20>)
 800bc84:	602a      	str	r2, [r5, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	f7f5 fd49 	bl	800171e <_read>
 800bc8c:	1c43      	adds	r3, r0, #1
 800bc8e:	d102      	bne.n	800bc96 <_read_r+0x1e>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	b103      	cbz	r3, 800bc96 <_read_r+0x1e>
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	bd38      	pop	{r3, r4, r5, pc}
 800bc98:	200031d8 	.word	0x200031d8

0800bc9c <nan>:
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	4901      	ldr	r1, [pc, #4]	; (800bca4 <nan+0x8>)
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	7ff80000 	.word	0x7ff80000

0800bca8 <strncmp>:
 800bca8:	4603      	mov	r3, r0
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	b172      	cbz	r2, 800bccc <strncmp+0x24>
 800bcae:	3901      	subs	r1, #1
 800bcb0:	1884      	adds	r4, r0, r2
 800bcb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bcb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bcba:	4290      	cmp	r0, r2
 800bcbc:	d101      	bne.n	800bcc2 <strncmp+0x1a>
 800bcbe:	42a3      	cmp	r3, r4
 800bcc0:	d101      	bne.n	800bcc6 <strncmp+0x1e>
 800bcc2:	1a80      	subs	r0, r0, r2
 800bcc4:	bd10      	pop	{r4, pc}
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d1f3      	bne.n	800bcb2 <strncmp+0xa>
 800bcca:	e7fa      	b.n	800bcc2 <strncmp+0x1a>
 800bccc:	4610      	mov	r0, r2
 800bcce:	e7f9      	b.n	800bcc4 <strncmp+0x1c>

0800bcd0 <__ascii_wctomb>:
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	b141      	cbz	r1, 800bce8 <__ascii_wctomb+0x18>
 800bcd6:	2aff      	cmp	r2, #255	; 0xff
 800bcd8:	d904      	bls.n	800bce4 <__ascii_wctomb+0x14>
 800bcda:	228a      	movs	r2, #138	; 0x8a
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	4770      	bx	lr
 800bce4:	2001      	movs	r0, #1
 800bce6:	700a      	strb	r2, [r1, #0]
 800bce8:	4770      	bx	lr
	...

0800bcec <__assert_func>:
 800bcec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcee:	4614      	mov	r4, r2
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <__assert_func+0x2c>)
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68d8      	ldr	r0, [r3, #12]
 800bcfa:	b14c      	cbz	r4, 800bd10 <__assert_func+0x24>
 800bcfc:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <__assert_func+0x30>)
 800bcfe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd02:	9100      	str	r1, [sp, #0]
 800bd04:	462b      	mov	r3, r5
 800bd06:	4906      	ldr	r1, [pc, #24]	; (800bd20 <__assert_func+0x34>)
 800bd08:	f000 f80e 	bl	800bd28 <fiprintf>
 800bd0c:	f000 fa7e 	bl	800c20c <abort>
 800bd10:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <__assert_func+0x38>)
 800bd12:	461c      	mov	r4, r3
 800bd14:	e7f3      	b.n	800bcfe <__assert_func+0x12>
 800bd16:	bf00      	nop
 800bd18:	20000010 	.word	0x20000010
 800bd1c:	0800cb7d 	.word	0x0800cb7d
 800bd20:	0800cb8a 	.word	0x0800cb8a
 800bd24:	0800cbb8 	.word	0x0800cbb8

0800bd28 <fiprintf>:
 800bd28:	b40e      	push	{r1, r2, r3}
 800bd2a:	b503      	push	{r0, r1, lr}
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	ab03      	add	r3, sp, #12
 800bd30:	4805      	ldr	r0, [pc, #20]	; (800bd48 <fiprintf+0x20>)
 800bd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd36:	6800      	ldr	r0, [r0, #0]
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	f000 f877 	bl	800be2c <_vfiprintf_r>
 800bd3e:	b002      	add	sp, #8
 800bd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd44:	b003      	add	sp, #12
 800bd46:	4770      	bx	lr
 800bd48:	20000010 	.word	0x20000010

0800bd4c <memmove>:
 800bd4c:	4288      	cmp	r0, r1
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	eb01 0402 	add.w	r4, r1, r2
 800bd54:	d902      	bls.n	800bd5c <memmove+0x10>
 800bd56:	4284      	cmp	r4, r0
 800bd58:	4623      	mov	r3, r4
 800bd5a:	d807      	bhi.n	800bd6c <memmove+0x20>
 800bd5c:	1e43      	subs	r3, r0, #1
 800bd5e:	42a1      	cmp	r1, r4
 800bd60:	d008      	beq.n	800bd74 <memmove+0x28>
 800bd62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd6a:	e7f8      	b.n	800bd5e <memmove+0x12>
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	4402      	add	r2, r0
 800bd70:	428a      	cmp	r2, r1
 800bd72:	d100      	bne.n	800bd76 <memmove+0x2a>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd7e:	e7f7      	b.n	800bd70 <memmove+0x24>

0800bd80 <_realloc_r>:
 800bd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd84:	4680      	mov	r8, r0
 800bd86:	4614      	mov	r4, r2
 800bd88:	460e      	mov	r6, r1
 800bd8a:	b921      	cbnz	r1, 800bd96 <_realloc_r+0x16>
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	f7fb bfa5 	b.w	8007ce0 <_malloc_r>
 800bd96:	b92a      	cbnz	r2, 800bda4 <_realloc_r+0x24>
 800bd98:	f7ff fdca 	bl	800b930 <_free_r>
 800bd9c:	4625      	mov	r5, r4
 800bd9e:	4628      	mov	r0, r5
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	f000 fa9e 	bl	800c2e4 <_malloc_usable_size_r>
 800bda8:	4284      	cmp	r4, r0
 800bdaa:	4607      	mov	r7, r0
 800bdac:	d802      	bhi.n	800bdb4 <_realloc_r+0x34>
 800bdae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdb2:	d812      	bhi.n	800bdda <_realloc_r+0x5a>
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	f7fb ff92 	bl	8007ce0 <_malloc_r>
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d0ed      	beq.n	800bd9e <_realloc_r+0x1e>
 800bdc2:	42bc      	cmp	r4, r7
 800bdc4:	4622      	mov	r2, r4
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	bf28      	it	cs
 800bdca:	463a      	movcs	r2, r7
 800bdcc:	f7fb ff51 	bl	8007c72 <memcpy>
 800bdd0:	4631      	mov	r1, r6
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	f7ff fdac 	bl	800b930 <_free_r>
 800bdd8:	e7e1      	b.n	800bd9e <_realloc_r+0x1e>
 800bdda:	4635      	mov	r5, r6
 800bddc:	e7df      	b.n	800bd9e <_realloc_r+0x1e>

0800bdde <__sfputc_r>:
 800bdde:	6893      	ldr	r3, [r2, #8]
 800bde0:	b410      	push	{r4}
 800bde2:	3b01      	subs	r3, #1
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	6093      	str	r3, [r2, #8]
 800bde8:	da07      	bge.n	800bdfa <__sfputc_r+0x1c>
 800bdea:	6994      	ldr	r4, [r2, #24]
 800bdec:	42a3      	cmp	r3, r4
 800bdee:	db01      	blt.n	800bdf4 <__sfputc_r+0x16>
 800bdf0:	290a      	cmp	r1, #10
 800bdf2:	d102      	bne.n	800bdfa <__sfputc_r+0x1c>
 800bdf4:	bc10      	pop	{r4}
 800bdf6:	f000 b949 	b.w	800c08c <__swbuf_r>
 800bdfa:	6813      	ldr	r3, [r2, #0]
 800bdfc:	1c58      	adds	r0, r3, #1
 800bdfe:	6010      	str	r0, [r2, #0]
 800be00:	7019      	strb	r1, [r3, #0]
 800be02:	4608      	mov	r0, r1
 800be04:	bc10      	pop	{r4}
 800be06:	4770      	bx	lr

0800be08 <__sfputs_r>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	4606      	mov	r6, r0
 800be0c:	460f      	mov	r7, r1
 800be0e:	4614      	mov	r4, r2
 800be10:	18d5      	adds	r5, r2, r3
 800be12:	42ac      	cmp	r4, r5
 800be14:	d101      	bne.n	800be1a <__sfputs_r+0x12>
 800be16:	2000      	movs	r0, #0
 800be18:	e007      	b.n	800be2a <__sfputs_r+0x22>
 800be1a:	463a      	mov	r2, r7
 800be1c:	4630      	mov	r0, r6
 800be1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be22:	f7ff ffdc 	bl	800bdde <__sfputc_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d1f3      	bne.n	800be12 <__sfputs_r+0xa>
 800be2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be2c <_vfiprintf_r>:
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	460d      	mov	r5, r1
 800be32:	4614      	mov	r4, r2
 800be34:	4698      	mov	r8, r3
 800be36:	4606      	mov	r6, r0
 800be38:	b09d      	sub	sp, #116	; 0x74
 800be3a:	b118      	cbz	r0, 800be44 <_vfiprintf_r+0x18>
 800be3c:	6983      	ldr	r3, [r0, #24]
 800be3e:	b90b      	cbnz	r3, 800be44 <_vfiprintf_r+0x18>
 800be40:	f7fb fe52 	bl	8007ae8 <__sinit>
 800be44:	4b89      	ldr	r3, [pc, #548]	; (800c06c <_vfiprintf_r+0x240>)
 800be46:	429d      	cmp	r5, r3
 800be48:	d11b      	bne.n	800be82 <_vfiprintf_r+0x56>
 800be4a:	6875      	ldr	r5, [r6, #4]
 800be4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be4e:	07d9      	lsls	r1, r3, #31
 800be50:	d405      	bmi.n	800be5e <_vfiprintf_r+0x32>
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	059a      	lsls	r2, r3, #22
 800be56:	d402      	bmi.n	800be5e <_vfiprintf_r+0x32>
 800be58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be5a:	f7fb ff08 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800be5e:	89ab      	ldrh	r3, [r5, #12]
 800be60:	071b      	lsls	r3, r3, #28
 800be62:	d501      	bpl.n	800be68 <_vfiprintf_r+0x3c>
 800be64:	692b      	ldr	r3, [r5, #16]
 800be66:	b9eb      	cbnz	r3, 800bea4 <_vfiprintf_r+0x78>
 800be68:	4629      	mov	r1, r5
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f960 	bl	800c130 <__swsetup_r>
 800be70:	b1c0      	cbz	r0, 800bea4 <_vfiprintf_r+0x78>
 800be72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be74:	07dc      	lsls	r4, r3, #31
 800be76:	d50e      	bpl.n	800be96 <_vfiprintf_r+0x6a>
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	b01d      	add	sp, #116	; 0x74
 800be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be82:	4b7b      	ldr	r3, [pc, #492]	; (800c070 <_vfiprintf_r+0x244>)
 800be84:	429d      	cmp	r5, r3
 800be86:	d101      	bne.n	800be8c <_vfiprintf_r+0x60>
 800be88:	68b5      	ldr	r5, [r6, #8]
 800be8a:	e7df      	b.n	800be4c <_vfiprintf_r+0x20>
 800be8c:	4b79      	ldr	r3, [pc, #484]	; (800c074 <_vfiprintf_r+0x248>)
 800be8e:	429d      	cmp	r5, r3
 800be90:	bf08      	it	eq
 800be92:	68f5      	ldreq	r5, [r6, #12]
 800be94:	e7da      	b.n	800be4c <_vfiprintf_r+0x20>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	0598      	lsls	r0, r3, #22
 800be9a:	d4ed      	bmi.n	800be78 <_vfiprintf_r+0x4c>
 800be9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9e:	f7fb fee7 	bl	8007c70 <__retarget_lock_release_recursive>
 800bea2:	e7e9      	b.n	800be78 <_vfiprintf_r+0x4c>
 800bea4:	2300      	movs	r3, #0
 800bea6:	9309      	str	r3, [sp, #36]	; 0x24
 800bea8:	2320      	movs	r3, #32
 800beaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beae:	2330      	movs	r3, #48	; 0x30
 800beb0:	f04f 0901 	mov.w	r9, #1
 800beb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c078 <_vfiprintf_r+0x24c>
 800bebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bec0:	4623      	mov	r3, r4
 800bec2:	469a      	mov	sl, r3
 800bec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec8:	b10a      	cbz	r2, 800bece <_vfiprintf_r+0xa2>
 800beca:	2a25      	cmp	r2, #37	; 0x25
 800becc:	d1f9      	bne.n	800bec2 <_vfiprintf_r+0x96>
 800bece:	ebba 0b04 	subs.w	fp, sl, r4
 800bed2:	d00b      	beq.n	800beec <_vfiprintf_r+0xc0>
 800bed4:	465b      	mov	r3, fp
 800bed6:	4622      	mov	r2, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	4630      	mov	r0, r6
 800bedc:	f7ff ff94 	bl	800be08 <__sfputs_r>
 800bee0:	3001      	adds	r0, #1
 800bee2:	f000 80aa 	beq.w	800c03a <_vfiprintf_r+0x20e>
 800bee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bee8:	445a      	add	r2, fp
 800beea:	9209      	str	r2, [sp, #36]	; 0x24
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 80a2 	beq.w	800c03a <_vfiprintf_r+0x20e>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f04f 32ff 	mov.w	r2, #4294967295
 800befc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf00:	f10a 0a01 	add.w	sl, sl, #1
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf0c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf0e:	4654      	mov	r4, sl
 800bf10:	2205      	movs	r2, #5
 800bf12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf16:	4858      	ldr	r0, [pc, #352]	; (800c078 <_vfiprintf_r+0x24c>)
 800bf18:	f7ff f824 	bl	800af64 <memchr>
 800bf1c:	9a04      	ldr	r2, [sp, #16]
 800bf1e:	b9d8      	cbnz	r0, 800bf58 <_vfiprintf_r+0x12c>
 800bf20:	06d1      	lsls	r1, r2, #27
 800bf22:	bf44      	itt	mi
 800bf24:	2320      	movmi	r3, #32
 800bf26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf2a:	0713      	lsls	r3, r2, #28
 800bf2c:	bf44      	itt	mi
 800bf2e:	232b      	movmi	r3, #43	; 0x2b
 800bf30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf34:	f89a 3000 	ldrb.w	r3, [sl]
 800bf38:	2b2a      	cmp	r3, #42	; 0x2a
 800bf3a:	d015      	beq.n	800bf68 <_vfiprintf_r+0x13c>
 800bf3c:	4654      	mov	r4, sl
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f04f 0c0a 	mov.w	ip, #10
 800bf44:	9a07      	ldr	r2, [sp, #28]
 800bf46:	4621      	mov	r1, r4
 800bf48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf4c:	3b30      	subs	r3, #48	; 0x30
 800bf4e:	2b09      	cmp	r3, #9
 800bf50:	d94e      	bls.n	800bff0 <_vfiprintf_r+0x1c4>
 800bf52:	b1b0      	cbz	r0, 800bf82 <_vfiprintf_r+0x156>
 800bf54:	9207      	str	r2, [sp, #28]
 800bf56:	e014      	b.n	800bf82 <_vfiprintf_r+0x156>
 800bf58:	eba0 0308 	sub.w	r3, r0, r8
 800bf5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf60:	4313      	orrs	r3, r2
 800bf62:	46a2      	mov	sl, r4
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	e7d2      	b.n	800bf0e <_vfiprintf_r+0xe2>
 800bf68:	9b03      	ldr	r3, [sp, #12]
 800bf6a:	1d19      	adds	r1, r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	9103      	str	r1, [sp, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfbb      	ittet	lt
 800bf74:	425b      	neglt	r3, r3
 800bf76:	f042 0202 	orrlt.w	r2, r2, #2
 800bf7a:	9307      	strge	r3, [sp, #28]
 800bf7c:	9307      	strlt	r3, [sp, #28]
 800bf7e:	bfb8      	it	lt
 800bf80:	9204      	strlt	r2, [sp, #16]
 800bf82:	7823      	ldrb	r3, [r4, #0]
 800bf84:	2b2e      	cmp	r3, #46	; 0x2e
 800bf86:	d10c      	bne.n	800bfa2 <_vfiprintf_r+0x176>
 800bf88:	7863      	ldrb	r3, [r4, #1]
 800bf8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8c:	d135      	bne.n	800bffa <_vfiprintf_r+0x1ce>
 800bf8e:	9b03      	ldr	r3, [sp, #12]
 800bf90:	3402      	adds	r4, #2
 800bf92:	1d1a      	adds	r2, r3, #4
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	9203      	str	r2, [sp, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	bfb8      	it	lt
 800bf9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfa0:	9305      	str	r3, [sp, #20]
 800bfa2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c07c <_vfiprintf_r+0x250>
 800bfa6:	2203      	movs	r2, #3
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	7821      	ldrb	r1, [r4, #0]
 800bfac:	f7fe ffda 	bl	800af64 <memchr>
 800bfb0:	b140      	cbz	r0, 800bfc4 <_vfiprintf_r+0x198>
 800bfb2:	2340      	movs	r3, #64	; 0x40
 800bfb4:	eba0 000a 	sub.w	r0, r0, sl
 800bfb8:	fa03 f000 	lsl.w	r0, r3, r0
 800bfbc:	9b04      	ldr	r3, [sp, #16]
 800bfbe:	3401      	adds	r4, #1
 800bfc0:	4303      	orrs	r3, r0
 800bfc2:	9304      	str	r3, [sp, #16]
 800bfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc8:	2206      	movs	r2, #6
 800bfca:	482d      	ldr	r0, [pc, #180]	; (800c080 <_vfiprintf_r+0x254>)
 800bfcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfd0:	f7fe ffc8 	bl	800af64 <memchr>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d03f      	beq.n	800c058 <_vfiprintf_r+0x22c>
 800bfd8:	4b2a      	ldr	r3, [pc, #168]	; (800c084 <_vfiprintf_r+0x258>)
 800bfda:	bb1b      	cbnz	r3, 800c024 <_vfiprintf_r+0x1f8>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	3307      	adds	r3, #7
 800bfe0:	f023 0307 	bic.w	r3, r3, #7
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfea:	443b      	add	r3, r7
 800bfec:	9309      	str	r3, [sp, #36]	; 0x24
 800bfee:	e767      	b.n	800bec0 <_vfiprintf_r+0x94>
 800bff0:	460c      	mov	r4, r1
 800bff2:	2001      	movs	r0, #1
 800bff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff8:	e7a5      	b.n	800bf46 <_vfiprintf_r+0x11a>
 800bffa:	2300      	movs	r3, #0
 800bffc:	f04f 0c0a 	mov.w	ip, #10
 800c000:	4619      	mov	r1, r3
 800c002:	3401      	adds	r4, #1
 800c004:	9305      	str	r3, [sp, #20]
 800c006:	4620      	mov	r0, r4
 800c008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00c:	3a30      	subs	r2, #48	; 0x30
 800c00e:	2a09      	cmp	r2, #9
 800c010:	d903      	bls.n	800c01a <_vfiprintf_r+0x1ee>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0c5      	beq.n	800bfa2 <_vfiprintf_r+0x176>
 800c016:	9105      	str	r1, [sp, #20]
 800c018:	e7c3      	b.n	800bfa2 <_vfiprintf_r+0x176>
 800c01a:	4604      	mov	r4, r0
 800c01c:	2301      	movs	r3, #1
 800c01e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c022:	e7f0      	b.n	800c006 <_vfiprintf_r+0x1da>
 800c024:	ab03      	add	r3, sp, #12
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	462a      	mov	r2, r5
 800c02a:	4630      	mov	r0, r6
 800c02c:	4b16      	ldr	r3, [pc, #88]	; (800c088 <_vfiprintf_r+0x25c>)
 800c02e:	a904      	add	r1, sp, #16
 800c030:	f7fb ff68 	bl	8007f04 <_printf_float>
 800c034:	4607      	mov	r7, r0
 800c036:	1c78      	adds	r0, r7, #1
 800c038:	d1d6      	bne.n	800bfe8 <_vfiprintf_r+0x1bc>
 800c03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c03c:	07d9      	lsls	r1, r3, #31
 800c03e:	d405      	bmi.n	800c04c <_vfiprintf_r+0x220>
 800c040:	89ab      	ldrh	r3, [r5, #12]
 800c042:	059a      	lsls	r2, r3, #22
 800c044:	d402      	bmi.n	800c04c <_vfiprintf_r+0x220>
 800c046:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c048:	f7fb fe12 	bl	8007c70 <__retarget_lock_release_recursive>
 800c04c:	89ab      	ldrh	r3, [r5, #12]
 800c04e:	065b      	lsls	r3, r3, #25
 800c050:	f53f af12 	bmi.w	800be78 <_vfiprintf_r+0x4c>
 800c054:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c056:	e711      	b.n	800be7c <_vfiprintf_r+0x50>
 800c058:	ab03      	add	r3, sp, #12
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	462a      	mov	r2, r5
 800c05e:	4630      	mov	r0, r6
 800c060:	4b09      	ldr	r3, [pc, #36]	; (800c088 <_vfiprintf_r+0x25c>)
 800c062:	a904      	add	r1, sp, #16
 800c064:	f7fc f9ea 	bl	800843c <_printf_i>
 800c068:	e7e4      	b.n	800c034 <_vfiprintf_r+0x208>
 800c06a:	bf00      	nop
 800c06c:	0800c734 	.word	0x0800c734
 800c070:	0800c754 	.word	0x0800c754
 800c074:	0800c714 	.word	0x0800c714
 800c078:	0800cb6c 	.word	0x0800cb6c
 800c07c:	0800cb72 	.word	0x0800cb72
 800c080:	0800cb76 	.word	0x0800cb76
 800c084:	08007f05 	.word	0x08007f05
 800c088:	0800be09 	.word	0x0800be09

0800c08c <__swbuf_r>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	460e      	mov	r6, r1
 800c090:	4614      	mov	r4, r2
 800c092:	4605      	mov	r5, r0
 800c094:	b118      	cbz	r0, 800c09e <__swbuf_r+0x12>
 800c096:	6983      	ldr	r3, [r0, #24]
 800c098:	b90b      	cbnz	r3, 800c09e <__swbuf_r+0x12>
 800c09a:	f7fb fd25 	bl	8007ae8 <__sinit>
 800c09e:	4b21      	ldr	r3, [pc, #132]	; (800c124 <__swbuf_r+0x98>)
 800c0a0:	429c      	cmp	r4, r3
 800c0a2:	d12b      	bne.n	800c0fc <__swbuf_r+0x70>
 800c0a4:	686c      	ldr	r4, [r5, #4]
 800c0a6:	69a3      	ldr	r3, [r4, #24]
 800c0a8:	60a3      	str	r3, [r4, #8]
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	071a      	lsls	r2, r3, #28
 800c0ae:	d52f      	bpl.n	800c110 <__swbuf_r+0x84>
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	b36b      	cbz	r3, 800c110 <__swbuf_r+0x84>
 800c0b4:	6923      	ldr	r3, [r4, #16]
 800c0b6:	6820      	ldr	r0, [r4, #0]
 800c0b8:	b2f6      	uxtb	r6, r6
 800c0ba:	1ac0      	subs	r0, r0, r3
 800c0bc:	6963      	ldr	r3, [r4, #20]
 800c0be:	4637      	mov	r7, r6
 800c0c0:	4283      	cmp	r3, r0
 800c0c2:	dc04      	bgt.n	800c0ce <__swbuf_r+0x42>
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f7fe fb7a 	bl	800a7c0 <_fflush_r>
 800c0cc:	bb30      	cbnz	r0, 800c11c <__swbuf_r+0x90>
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	60a3      	str	r3, [r4, #8]
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	6022      	str	r2, [r4, #0]
 800c0dc:	701e      	strb	r6, [r3, #0]
 800c0de:	6963      	ldr	r3, [r4, #20]
 800c0e0:	4283      	cmp	r3, r0
 800c0e2:	d004      	beq.n	800c0ee <__swbuf_r+0x62>
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	07db      	lsls	r3, r3, #31
 800c0e8:	d506      	bpl.n	800c0f8 <__swbuf_r+0x6c>
 800c0ea:	2e0a      	cmp	r6, #10
 800c0ec:	d104      	bne.n	800c0f8 <__swbuf_r+0x6c>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7fe fb65 	bl	800a7c0 <_fflush_r>
 800c0f6:	b988      	cbnz	r0, 800c11c <__swbuf_r+0x90>
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <__swbuf_r+0x9c>)
 800c0fe:	429c      	cmp	r4, r3
 800c100:	d101      	bne.n	800c106 <__swbuf_r+0x7a>
 800c102:	68ac      	ldr	r4, [r5, #8]
 800c104:	e7cf      	b.n	800c0a6 <__swbuf_r+0x1a>
 800c106:	4b09      	ldr	r3, [pc, #36]	; (800c12c <__swbuf_r+0xa0>)
 800c108:	429c      	cmp	r4, r3
 800c10a:	bf08      	it	eq
 800c10c:	68ec      	ldreq	r4, [r5, #12]
 800c10e:	e7ca      	b.n	800c0a6 <__swbuf_r+0x1a>
 800c110:	4621      	mov	r1, r4
 800c112:	4628      	mov	r0, r5
 800c114:	f000 f80c 	bl	800c130 <__swsetup_r>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d0cb      	beq.n	800c0b4 <__swbuf_r+0x28>
 800c11c:	f04f 37ff 	mov.w	r7, #4294967295
 800c120:	e7ea      	b.n	800c0f8 <__swbuf_r+0x6c>
 800c122:	bf00      	nop
 800c124:	0800c734 	.word	0x0800c734
 800c128:	0800c754 	.word	0x0800c754
 800c12c:	0800c714 	.word	0x0800c714

0800c130 <__swsetup_r>:
 800c130:	4b32      	ldr	r3, [pc, #200]	; (800c1fc <__swsetup_r+0xcc>)
 800c132:	b570      	push	{r4, r5, r6, lr}
 800c134:	681d      	ldr	r5, [r3, #0]
 800c136:	4606      	mov	r6, r0
 800c138:	460c      	mov	r4, r1
 800c13a:	b125      	cbz	r5, 800c146 <__swsetup_r+0x16>
 800c13c:	69ab      	ldr	r3, [r5, #24]
 800c13e:	b913      	cbnz	r3, 800c146 <__swsetup_r+0x16>
 800c140:	4628      	mov	r0, r5
 800c142:	f7fb fcd1 	bl	8007ae8 <__sinit>
 800c146:	4b2e      	ldr	r3, [pc, #184]	; (800c200 <__swsetup_r+0xd0>)
 800c148:	429c      	cmp	r4, r3
 800c14a:	d10f      	bne.n	800c16c <__swsetup_r+0x3c>
 800c14c:	686c      	ldr	r4, [r5, #4]
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c154:	0719      	lsls	r1, r3, #28
 800c156:	d42c      	bmi.n	800c1b2 <__swsetup_r+0x82>
 800c158:	06dd      	lsls	r5, r3, #27
 800c15a:	d411      	bmi.n	800c180 <__swsetup_r+0x50>
 800c15c:	2309      	movs	r3, #9
 800c15e:	6033      	str	r3, [r6, #0]
 800c160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c164:	f04f 30ff 	mov.w	r0, #4294967295
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	e03e      	b.n	800c1ea <__swsetup_r+0xba>
 800c16c:	4b25      	ldr	r3, [pc, #148]	; (800c204 <__swsetup_r+0xd4>)
 800c16e:	429c      	cmp	r4, r3
 800c170:	d101      	bne.n	800c176 <__swsetup_r+0x46>
 800c172:	68ac      	ldr	r4, [r5, #8]
 800c174:	e7eb      	b.n	800c14e <__swsetup_r+0x1e>
 800c176:	4b24      	ldr	r3, [pc, #144]	; (800c208 <__swsetup_r+0xd8>)
 800c178:	429c      	cmp	r4, r3
 800c17a:	bf08      	it	eq
 800c17c:	68ec      	ldreq	r4, [r5, #12]
 800c17e:	e7e6      	b.n	800c14e <__swsetup_r+0x1e>
 800c180:	0758      	lsls	r0, r3, #29
 800c182:	d512      	bpl.n	800c1aa <__swsetup_r+0x7a>
 800c184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c186:	b141      	cbz	r1, 800c19a <__swsetup_r+0x6a>
 800c188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c18c:	4299      	cmp	r1, r3
 800c18e:	d002      	beq.n	800c196 <__swsetup_r+0x66>
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff fbcd 	bl	800b930 <_free_r>
 800c196:	2300      	movs	r3, #0
 800c198:	6363      	str	r3, [r4, #52]	; 0x34
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	6063      	str	r3, [r4, #4]
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f043 0308 	orr.w	r3, r3, #8
 800c1b0:	81a3      	strh	r3, [r4, #12]
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	b94b      	cbnz	r3, 800c1ca <__swsetup_r+0x9a>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1c0:	d003      	beq.n	800c1ca <__swsetup_r+0x9a>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f000 f84d 	bl	800c264 <__smakebuf_r>
 800c1ca:	89a0      	ldrh	r0, [r4, #12]
 800c1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1d0:	f010 0301 	ands.w	r3, r0, #1
 800c1d4:	d00a      	beq.n	800c1ec <__swsetup_r+0xbc>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	60a3      	str	r3, [r4, #8]
 800c1da:	6963      	ldr	r3, [r4, #20]
 800c1dc:	425b      	negs	r3, r3
 800c1de:	61a3      	str	r3, [r4, #24]
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	b943      	cbnz	r3, 800c1f6 <__swsetup_r+0xc6>
 800c1e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1e8:	d1ba      	bne.n	800c160 <__swsetup_r+0x30>
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	0781      	lsls	r1, r0, #30
 800c1ee:	bf58      	it	pl
 800c1f0:	6963      	ldrpl	r3, [r4, #20]
 800c1f2:	60a3      	str	r3, [r4, #8]
 800c1f4:	e7f4      	b.n	800c1e0 <__swsetup_r+0xb0>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e7f7      	b.n	800c1ea <__swsetup_r+0xba>
 800c1fa:	bf00      	nop
 800c1fc:	20000010 	.word	0x20000010
 800c200:	0800c734 	.word	0x0800c734
 800c204:	0800c754 	.word	0x0800c754
 800c208:	0800c714 	.word	0x0800c714

0800c20c <abort>:
 800c20c:	2006      	movs	r0, #6
 800c20e:	b508      	push	{r3, lr}
 800c210:	f000 f898 	bl	800c344 <raise>
 800c214:	2001      	movs	r0, #1
 800c216:	f7f5 fa78 	bl	800170a <_exit>

0800c21a <__swhatbuf_r>:
 800c21a:	b570      	push	{r4, r5, r6, lr}
 800c21c:	460e      	mov	r6, r1
 800c21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c222:	4614      	mov	r4, r2
 800c224:	2900      	cmp	r1, #0
 800c226:	461d      	mov	r5, r3
 800c228:	b096      	sub	sp, #88	; 0x58
 800c22a:	da08      	bge.n	800c23e <__swhatbuf_r+0x24>
 800c22c:	2200      	movs	r2, #0
 800c22e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c232:	602a      	str	r2, [r5, #0]
 800c234:	061a      	lsls	r2, r3, #24
 800c236:	d410      	bmi.n	800c25a <__swhatbuf_r+0x40>
 800c238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c23c:	e00e      	b.n	800c25c <__swhatbuf_r+0x42>
 800c23e:	466a      	mov	r2, sp
 800c240:	f000 f89c 	bl	800c37c <_fstat_r>
 800c244:	2800      	cmp	r0, #0
 800c246:	dbf1      	blt.n	800c22c <__swhatbuf_r+0x12>
 800c248:	9a01      	ldr	r2, [sp, #4]
 800c24a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c24e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c252:	425a      	negs	r2, r3
 800c254:	415a      	adcs	r2, r3
 800c256:	602a      	str	r2, [r5, #0]
 800c258:	e7ee      	b.n	800c238 <__swhatbuf_r+0x1e>
 800c25a:	2340      	movs	r3, #64	; 0x40
 800c25c:	2000      	movs	r0, #0
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	b016      	add	sp, #88	; 0x58
 800c262:	bd70      	pop	{r4, r5, r6, pc}

0800c264 <__smakebuf_r>:
 800c264:	898b      	ldrh	r3, [r1, #12]
 800c266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c268:	079d      	lsls	r5, r3, #30
 800c26a:	4606      	mov	r6, r0
 800c26c:	460c      	mov	r4, r1
 800c26e:	d507      	bpl.n	800c280 <__smakebuf_r+0x1c>
 800c270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	6123      	str	r3, [r4, #16]
 800c278:	2301      	movs	r3, #1
 800c27a:	6163      	str	r3, [r4, #20]
 800c27c:	b002      	add	sp, #8
 800c27e:	bd70      	pop	{r4, r5, r6, pc}
 800c280:	466a      	mov	r2, sp
 800c282:	ab01      	add	r3, sp, #4
 800c284:	f7ff ffc9 	bl	800c21a <__swhatbuf_r>
 800c288:	9900      	ldr	r1, [sp, #0]
 800c28a:	4605      	mov	r5, r0
 800c28c:	4630      	mov	r0, r6
 800c28e:	f7fb fd27 	bl	8007ce0 <_malloc_r>
 800c292:	b948      	cbnz	r0, 800c2a8 <__smakebuf_r+0x44>
 800c294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c298:	059a      	lsls	r2, r3, #22
 800c29a:	d4ef      	bmi.n	800c27c <__smakebuf_r+0x18>
 800c29c:	f023 0303 	bic.w	r3, r3, #3
 800c2a0:	f043 0302 	orr.w	r3, r3, #2
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	e7e3      	b.n	800c270 <__smakebuf_r+0xc>
 800c2a8:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <__smakebuf_r+0x7c>)
 800c2aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	6020      	str	r0, [r4, #0]
 800c2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	9b00      	ldr	r3, [sp, #0]
 800c2b8:	6120      	str	r0, [r4, #16]
 800c2ba:	6163      	str	r3, [r4, #20]
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	b15b      	cbz	r3, 800c2d8 <__smakebuf_r+0x74>
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c6:	f000 f86b 	bl	800c3a0 <_isatty_r>
 800c2ca:	b128      	cbz	r0, 800c2d8 <__smakebuf_r+0x74>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	f023 0303 	bic.w	r3, r3, #3
 800c2d2:	f043 0301 	orr.w	r3, r3, #1
 800c2d6:	81a3      	strh	r3, [r4, #12]
 800c2d8:	89a0      	ldrh	r0, [r4, #12]
 800c2da:	4305      	orrs	r5, r0
 800c2dc:	81a5      	strh	r5, [r4, #12]
 800c2de:	e7cd      	b.n	800c27c <__smakebuf_r+0x18>
 800c2e0:	08007a81 	.word	0x08007a81

0800c2e4 <_malloc_usable_size_r>:
 800c2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2e8:	1f18      	subs	r0, r3, #4
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bfbc      	itt	lt
 800c2ee:	580b      	ldrlt	r3, [r1, r0]
 800c2f0:	18c0      	addlt	r0, r0, r3
 800c2f2:	4770      	bx	lr

0800c2f4 <_raise_r>:
 800c2f4:	291f      	cmp	r1, #31
 800c2f6:	b538      	push	{r3, r4, r5, lr}
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	460d      	mov	r5, r1
 800c2fc:	d904      	bls.n	800c308 <_raise_r+0x14>
 800c2fe:	2316      	movs	r3, #22
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	f04f 30ff 	mov.w	r0, #4294967295
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c30a:	b112      	cbz	r2, 800c312 <_raise_r+0x1e>
 800c30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c310:	b94b      	cbnz	r3, 800c326 <_raise_r+0x32>
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f830 	bl	800c378 <_getpid_r>
 800c318:	462a      	mov	r2, r5
 800c31a:	4601      	mov	r1, r0
 800c31c:	4620      	mov	r0, r4
 800c31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c322:	f000 b817 	b.w	800c354 <_kill_r>
 800c326:	2b01      	cmp	r3, #1
 800c328:	d00a      	beq.n	800c340 <_raise_r+0x4c>
 800c32a:	1c59      	adds	r1, r3, #1
 800c32c:	d103      	bne.n	800c336 <_raise_r+0x42>
 800c32e:	2316      	movs	r3, #22
 800c330:	6003      	str	r3, [r0, #0]
 800c332:	2001      	movs	r0, #1
 800c334:	e7e7      	b.n	800c306 <_raise_r+0x12>
 800c336:	2400      	movs	r4, #0
 800c338:	4628      	mov	r0, r5
 800c33a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c33e:	4798      	blx	r3
 800c340:	2000      	movs	r0, #0
 800c342:	e7e0      	b.n	800c306 <_raise_r+0x12>

0800c344 <raise>:
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <raise+0xc>)
 800c346:	4601      	mov	r1, r0
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	f7ff bfd3 	b.w	800c2f4 <_raise_r>
 800c34e:	bf00      	nop
 800c350:	20000010 	.word	0x20000010

0800c354 <_kill_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	2300      	movs	r3, #0
 800c358:	4d06      	ldr	r5, [pc, #24]	; (800c374 <_kill_r+0x20>)
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	4611      	mov	r1, r2
 800c360:	602b      	str	r3, [r5, #0]
 800c362:	f7f5 f9c2 	bl	80016ea <_kill>
 800c366:	1c43      	adds	r3, r0, #1
 800c368:	d102      	bne.n	800c370 <_kill_r+0x1c>
 800c36a:	682b      	ldr	r3, [r5, #0]
 800c36c:	b103      	cbz	r3, 800c370 <_kill_r+0x1c>
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	bd38      	pop	{r3, r4, r5, pc}
 800c372:	bf00      	nop
 800c374:	200031d8 	.word	0x200031d8

0800c378 <_getpid_r>:
 800c378:	f7f5 b9b0 	b.w	80016dc <_getpid>

0800c37c <_fstat_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	2300      	movs	r3, #0
 800c380:	4d06      	ldr	r5, [pc, #24]	; (800c39c <_fstat_r+0x20>)
 800c382:	4604      	mov	r4, r0
 800c384:	4608      	mov	r0, r1
 800c386:	4611      	mov	r1, r2
 800c388:	602b      	str	r3, [r5, #0]
 800c38a:	f7f5 fa0c 	bl	80017a6 <_fstat>
 800c38e:	1c43      	adds	r3, r0, #1
 800c390:	d102      	bne.n	800c398 <_fstat_r+0x1c>
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	b103      	cbz	r3, 800c398 <_fstat_r+0x1c>
 800c396:	6023      	str	r3, [r4, #0]
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	bf00      	nop
 800c39c:	200031d8 	.word	0x200031d8

0800c3a0 <_isatty_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	4d05      	ldr	r5, [pc, #20]	; (800c3bc <_isatty_r+0x1c>)
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	f7f5 fa0a 	bl	80017c4 <_isatty>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_isatty_r+0x1a>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_isatty_r+0x1a>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	200031d8 	.word	0x200031d8

0800c3c0 <_init>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	bf00      	nop
 800c3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c6:	bc08      	pop	{r3}
 800c3c8:	469e      	mov	lr, r3
 800c3ca:	4770      	bx	lr

0800c3cc <_fini>:
 800c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ce:	bf00      	nop
 800c3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3d2:	bc08      	pop	{r3}
 800c3d4:	469e      	mov	lr, r3
 800c3d6:	4770      	bx	lr
